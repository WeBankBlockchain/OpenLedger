package com.webank.openledger.contractsbak;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AssetPool extends Contract {
    public static final String[] BINARY_ARRAY = {"","fd5b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060028054905082101515610c8257610e1b565b8190505b600160028054905003811015610d3757600260018201815481101515610ca857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600282815481101515610ce257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050610c86565b6002600160028054905003815481101515610d4e57fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002805480919060019003610d909190611d3c565b506002805480602002602001604051908101604052809291908181526020018280548015610e1357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610dc9575b505050505095505b505050505092915050565b60006060600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04d4ef3600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086896040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ecc9493929190612989565b6040805180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1d9190810190611f9e565b8092508193505050801515610f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5e90612b22565b60405180910390fd5b600160ff16600560009054906101000a900460ff1660ff16141515610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890612c02565b60405180910390fd5b6002600560006101000a81548160ff021916908360ff160217905550600560009054906101000a900460ff169350505050919050565b6000606060008060008660ff169050611019888561186190919063ffffffff16565b935061102e818561192090919063ffffffff16565b9350600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04d4ef3600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630878a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110cf9493929190612809565b6040805180830381600087803b1580156110e857600080fd5b505af11580156110fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111209190810190611f9e565b809350819450505081151561116a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116190612a42565b60405180910390fd5b600160ff16600560009054906101000a900460ff1660ff161415156111c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bb90612c02565b60405180910390fd5b6111cd8861187d565b151561120e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120590612a82565b60405180910390fd5b6112178761193c565b1515611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90612c22565b60405180910390fd5b8660ff166000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660ff16141515156112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e890612ba2565b60405180910390fd5b7f93f27415d37326acf502083f0633852015a2113d0f9e29eac36cf784a4a3e401886000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1689604051611372939291906129e9565b60405180910390a1600360008860ff1660ff1681526020019081526020016000206000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900460ff168160000160006101000a81548160ff021916908360ff16021790555060018201816001019080546001816001161561010002031660029004611426929190611cb5565b506002820181600201908054600181600116156101000203166002900461144e929190611cb5565b509050506000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169450505050509392505050565b6000606060008060006114bf611d68565b600089511180156114d1575060408951105b1515611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990612aa2565b60405180910390fd5b8960ff16915061152b828661192090919063ffffffff16565b945061154089866119ad90919063ffffffff16565b945061155588866119ad90919063ffffffff16565b9450600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c04d4ef3600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630888b6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115f69493929190612929565b6040805180830381600087803b15801561160f57600080fd5b505af1158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116479190810190611f9e565b8094508195505050821515611691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168890612b62565b60405180910390fd5b600160ff168a60ff161415156116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390612c02565b60405180910390fd5b6116e58a61193c565b151515611727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171e90612b02565b60405180910390fd5b6060604051908101604052808b60ff1681526020018a81526020018981525090506001819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010190805190602001906117b3929190611d8d565b5060408201518160020190805190602001906117d0929190611d8d565b5050505080600360008c60ff1660ff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff160217905550602082015181600101908051906020019061182b929190611d8d565b506040820151816002019080519060200190611848929190611d8d565b5090505060018054905095505050505050949350505050565b606061187583611870846119c1565b611aa0565b905092915050565b600080600090505b600280549050811015611915578273ffffffffffffffffffffffffffffffffffffffff166002828154811015156118b857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611908576001915061191a565b8080600101915050611885565b600091505b50919050565b60606119348361192f84611c71565b611aa0565b905092915050565b600080600090505b6001805490508110156119a2578260ff1660018281548110151561196457fe5b906000526020600020906003020160000160009054906101000a900460ff1660ff16141561199557600191506119a7565b8080600101915050611944565b600091505b50919050565b60606119b98383611aa0565b905092915050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f191660200182016040528015611a0c5781602001602082028038833980820191505090505b509250600090505b6014811015611a99578181601481101515611a2b57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000028382815181101515611a5c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611a14565b5050919050565b606080606080606060008088955087945084518651016040519080825280601f01601f191660200182016040528015611ae85781602001602082028038833980820191505090505b50935083925060009150600090505b8551811015611baa578581815181101515611b0e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515611b6d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611af7565b600090505b8451811015611c62578481815181101515611bc657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515611c2557fe5b906020010190","","81036000830152612c3b816126f4565b9050919050565b6000602082019050612c57600083018461272b565b92915050565b6000602082019050612c72600083018461273a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612c9b57600080fd5b8060405250919050565b600067ffffffffffffffff821115612cbc57600080fd5b602082029050919050565b600067ffffffffffffffff821115612cde57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b600081519050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b6000612dd482612d45565b9050919050565b82818337600083830152505050565b60005b83811015612e08578082015181840152602081019050612ded565b83811115612e17576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d30cd31951cf223c807d66d030c6f917f2ab98f98d316b809629c1af1ec87e6d6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","036000830152612c3a816126f3565b9050919050565b6000602082019050612c56600083018461272a565b92915050565b6000602082019050612c716000830184612739565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612c9a57600080fd5b8060405250919050565b600067ffffffffffffffff821115612cbb57600080fd5b602082029050919050565b600067ffffffffffffffff821115612cdd57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b600081519050919050565b600060049050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b6000612dd382612d44565b9050919050565b82818337600083830152505050565b60005b83811015612e07578082015181840152602081019050612dec565b83811115612e16576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201fc2051ea980b9fc5a408f1079ab10136409586fff03502410ab9dd39d88a7456c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAssetList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAddress\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreezePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAddress\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freezePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAddress\",\"type\":\"address\"},{\"name\":\"toStatus\",\"type\":\"uint8\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"moveAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"authCenterAddr\",\"type\":\"address\"},{\"name\":\"orgAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toStatus\",\"type\":\"uint8\"}],\"name\":\"AssetStatusTransform\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETASSETLIST = "getAssetList";

    public static final String FUNC_STATUS = "status";

    public static final String FUNC_ADDASSET = "addAsset";

    public static final String FUNC_UNFREEZEPOOL = "unfreezePool";

    public static final String FUNC_REMOVEASSET = "removeAsset";

    public static final String FUNC_FREEZEPOOL = "freezePool";

    public static final String FUNC_MOVEASSET = "moveAsset";

    public static final String FUNC_ADDSTATUS = "addStatus";

    public static final Event ASSETSTATUSTRANSFORM_EVENT = new Event("AssetStatusTransform", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    protected AssetPool(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List getAssetList(List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETASSETLIST, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger status() throws ContractException {
        final Function function = new Function(FUNC_STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addAsset(String assetAddress, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAsset(String assetAddress, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAsset(String assetAddress, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getAddAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<List<String>> getAddAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public TransactionReceipt unfreezePool(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreezePool(List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreezePool(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getUnfreezePoolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZEPOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUnfreezePoolOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZEPOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeAsset(String assetAddress, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeAsset(String assetAddress, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveAsset(String assetAddress, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRemoveAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<List<String>> getRemoveAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public TransactionReceipt freezePool(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freezePool(List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreezePool(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZEPOOL, 
                Arrays.<Type>asList(new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getFreezePoolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZEPOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getFreezePoolOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZEPOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt moveAsset(String assetAddress, BigInteger toStatus, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_MOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new Uint8(toStatus),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void moveAsset(String assetAddress, BigInteger toStatus, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new Uint8(toStatus),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMoveAsset(String assetAddress, BigInteger toStatus, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_MOVEASSET, 
                Arrays.<Type>asList(new Address(assetAddress),
                new Uint8(toStatus),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getMoveAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MOVEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getMoveAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MOVEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addStatus(BigInteger status, String name, String desc, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDSTATUS, 
                Arrays.<Type>asList(new Uint8(status),
                new Utf8String(name),
                new Utf8String(desc),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addStatus(BigInteger status, String name, String desc, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDSTATUS, 
                Arrays.<Type>asList(new Uint8(status),
                new Utf8String(name),
                new Utf8String(desc),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddStatus(BigInteger status, String name, String desc, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDSTATUS, 
                Arrays.<Type>asList(new Uint8(status),
                new Utf8String(name),
                new Utf8String(desc),
                new StaticArray4<Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, String, String, List<byte[]>> getAddStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, String, List<byte[]>>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<BigInteger> getAddStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<AssetStatusTransformEventResponse> getAssetStatusTransformEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETSTATUSTRANSFORM_EVENT, transactionReceipt);
        ArrayList<AssetStatusTransformEventResponse> responses = new ArrayList<AssetStatusTransformEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AssetStatusTransformEventResponse typedResponse = new AssetStatusTransformEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._asset = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.toStatus = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAssetStatusTransformEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETSTATUSTRANSFORM_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAssetStatusTransformEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ASSETSTATUSTRANSFORM_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AssetPool load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AssetPool(contractAddress, client, credential);
    }

    public static AssetPool deploy(Client client, CryptoKeyPair credential, String authCenterAddr, String orgAddr) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(authCenterAddr),
                new Address(orgAddr)));
        return deploy(AssetPool.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class AssetStatusTransformEventResponse {
        public TransactionReceipt.Logs log;

        public String _asset;

        public BigInteger fromStatus;

        public BigInteger toStatus;
    }
}
