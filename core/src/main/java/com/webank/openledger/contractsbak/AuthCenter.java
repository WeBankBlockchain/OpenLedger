package com.webank.openledger.contractsbak;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.Utils;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AuthCenter extends Contract {
    public static final String[] BINARY_ARRAY = {"","906200103f565b5090565b8154818355818111156200103a5760020281600202836000526020600020918201910162001039919062001067565b5b505050565b6200106491905b808211156200106057600081600090555060010162001046565b5090565b90565b620010ac91905b80821115620010a857600080820160006200108a9190620010af565b6001820160006101000a81549060ff0219169055506002016200106e565b5090565b90565b50805460018160011615610100020316600290046000825580601f10620010d75750620010f8565b601f016020900490600052602060002090810190620010f791906200103f565b5b50565b600062001109825162001323565b905092915050565b600080604083850312156200112557600080fd5b60006200113585828601620010fb565b92505060206200114885828601620010fb565b9150509250929050565b6200115d8162001303565b82525050565b60006200117082620012f8565b8084526200118681602086016020860162001343565b620011918162001379565b602085010191505092915050565b6000620011ac82620012ed565b808452620011c281602086016020860162001343565b620011cd8162001379565b602085010191505092915050565b600081546001811660008114620011fb57600181146200121c5762001261565b607f600283041680865260ff19831660208701526040860193505062001261565b600282048086526020860195506200123485620012db565b60005b82811015620012585781548189015260018201915060208101905062001237565b80880195505050505b505092915050565b600060a08201905062001280600083018862001152565b6200128f602083018762001152565b8181036040830152620012a381866200119f565b90508181036060830152620012b9818562001163565b90508181036080830152620012cf8184620011db565b90509695505050505050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200136357808201518184015260208101905062001346565b8381111562001373576000848401525b50505050565b6000601f19601f8301169050919050565b61521c806200139a6000396000f3006080604052600436106101ee576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301db8d89146101f357806303ba71eb1461021e5780630754afd014610249578063081f9339146102765780630c0fd886146102a1578063117803e3146102cc57806315e9977e146102f757806323a772bd14610322578063283d26ca1461034d5780632a0acc6a146103785780632ef8cb1c146103a357806337258c0d146103ce578063391517531461040b5780633a0e61741461043657806353c4035e1461046157806357872d131461049e578063632e1dfe146104c957806369921c26146104f4578063699cc7f1146105315780636adc41651461055c57806381ddca191461058757806381e167cf146105c4578063893d20e8146105ef578063983d27371461061a5780639d53fe2b14610645578063accfbdd914610670578063b11569f5146106ae578063b3032be8146106d9578063b3cea21714610704578063b4eb5ede1461072f578063b73c40501461075a578063b85a290114610797578063bb1239c3146107c2578063bb24fe8a146107ed578063c04d4ef314610818578063c55fc52d14610856578063d24bfcf314610881578063e696f175146108be578063f307b32c146108fb578063f79e3c0a14610926575b600080fd5b3480156101ff57600080fd5b50610208610964565b6040516102159190614f41565b60405180910390f35b34801561022a57600080fd5b50610233610a02565b6040516102409190614f41565b60405180910390f35b34801561025557600080fd5b5061025e610aa0565b60405161026d93929190614e9c565b60405180910390f35b34801561028257600080fd5b5061028b610aba565b6040516102989190614f41565b60405180910390f35b3480156102ad57600080fd5b506102b6610b58565b6040516102c39190614f41565b60405180910390f35b3480156102d857600080fd5b506102e1610bf6565b6040516102ee9190614f41565b60405180910390f35b34801561030357600080fd5b5061030c610c94565b6040516103199190614f41565b60405180910390f35b34801561032e57600080fd5b50610337610d32565b6040516103449190614f41565b60405180910390f35b34801561035957600080fd5b50610362610dd0565b60405161036f9190614f41565b60405180910390f35b34801561038457600080fd5b5061038d610e6e565b60405161039a9190614f41565b60405180910390f35b3480156103af57600080fd5b506103b8610f0c565b6040516103c59190614f41565b60405180910390f35b3480156103da57600080fd5b506103f560048036036103f0919081019061469b565b610faa565b6040516104029190614ee1565b60405180910390f35b34801561041757600080fd5b5061042061174d565b60405161042d9190614f41565b60405180910390f35b34801561044257600080fd5b5061044b6117eb565b6040516104589190614f41565b60405180910390f35b34801561046d57600080fd5b5061048860048036036104839190810190614649565b611889565b6040516104959190614fe1565b60405180910390f35b3480156104aa57600080fd5b506104b3611aca565b6040516104c09190614f41565b60405180910390f35b3480156104d557600080fd5b506104de611b68565b6040516104eb9190614c7b565b60405180910390f35b34801561050057600080fd5b5061051b60048036036105169190810190614649565b611b8e565b6040516105289190614ee1565b60405180910390f35b34801561053d57600080fd5b50610546611d2f565b6040516105539190614f41565b60405180910390f35b34801561056857600080fd5b50610571611dcd565b60405161057e9190614c7b565b60405180910390f35b34801561059357600080fd5b506105ae60048036036105a99190810190614989565b611df3565b6040516105bb9190614ee1565b60405180910390f35b3480156105d057600080fd5b506105d9611eb9565b6040516105e69190614f41565b60405180910390f35b3480156105fb57600080fd5b50610604611f57565b6040516106119190614c7b565b60405180910390f35b34801561062657600080fd5b5061062f611f81565b60405161063c9190614f41565b60405180910390f35b34801561065157600080fd5b5061065a61201f565b6040516106679190614f41565b60405180910390f35b34801561067c57600080fd5b5061069760048036036106929190810190614649565b6120bd565b6040516106a5929190614de2565b60405180910390f35b3480156106ba57600080fd5b506106c3612265565b6040516106d09190614c7b565b60405180910390f35b3480156106e557600080fd5b506106ee61228b565b6040516106fb9190614c7b565b60405180910390f35b34801561071057600080fd5b506107196122b5565b6040516107269190614f41565b60405180910390f35b34801561073b57600080fd5b50610744612353565b6040516107519190614f41565b60405180910390f35b34801561076657600080fd5b50610781600480360361077c91908101906148e1565b6123f1565b60405161078e9190614ee1565b60405180910390f35b3480156107a357600080fd5b506107ac6124b4565b6040516107b99190614f41565b60405180910390f35b3480156107ce57600080fd5b506107d7612552565b6040516107e49190614c7b565b60405180910390f35b3480156107f957600080fd5b50610802612578565b60405161080f9190614f41565b60405180910390f35b34801561082457600080fd5b5061083f600480360361083a919081019061477d565b612616565b60405161084d929190614de2565b60405180910390f35b34801561086257600080fd5b5061086b61281e565b6040516108789190614c7b565b60405180910390f35b34801561088d57600080fd5b506108a860048036036108a39190810190614922565b612848565b6040516108b59190614ee1565b60405180910390f35b3480156108ca57600080fd5b506108e560048036036108e09190810190614716565b61294d565b6040516108f29190614ee1565b60405180910390f35b34801561090757600080fd5b5061091061301a565b60405161091d9190614f41565b60405180910390f35b34801561093257600080fd5b5061094d60048036036109489190810190614825565b6130b8565b60405161095b929190614de2565b60405180910390f35b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109fa5780601f106109cf576101008083540402835291602001916109fa565b820191906000526020600020905b8154815290600101906020018083116109dd57829003601f168201915b505050505081565b600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a985780601f10610a6d57610100808354040283529160200191610a98565b820191906000526020600020905b815481529060010190602001808311610a7b57829003601f168201915b505050505081565b6060806000610aaf601d6132bd565b925092509250909192565b600d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b505780601f10610b2557610100808354040283529160200191610b50565b820191906000526020600020905b815481529060010190602001808311610b3357829003601f168201915b505050505081565b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bee5780601f10610bc357610100808354040283529160200191610bee565b820191906000526020600020905b815481529060010190602001808311610bd157829003601f168201915b505050505081565b60148054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b82019190","","","","","5b82525050565b614c7581615130565b82525050565b6000602082019050614c906000830184614a1e565b92915050565b600060a082019050614cab6000830188614a1e565b614cb86020830187614a1e565b614cc56040830186614a1e565b614cd26060830185614a1e565b8181036080830152614ce48184614ac8565b90509695505050505050565b6000608082019050614d056000830187614a1e565b614d126020830186614a1e565b614d1f6040830185614a1e565b8181036060830152614d318184614ac8565b905095945050505050565b6000606082019050614d516000830186614a1e565b614d5e6020830185614a1e565b8181036040830152614d708184614ac8565b9050949350505050565b600060a082019050614d8f6000830188614a1e565b614d9c6020830187614a1e565b8181036040830152614dae8186614afe565b90508181036060830152614dc28185614ac8565b90508181036080830152614dd68184614b34565b90509695505050505050565b6000604082019050614df76000830185614a1e565b614e046020830184614a9b565b9392505050565b6000606082019050614e206000830186614a1e565b614e2d6020830185614ab9565b614e3a6040830184614a1e565b949350505050565b600060a082019050614e576000830188614a1e565b614e646020830187614bba565b614e716040830186614a1e565b614e7e6060830185614a1e565b8181036080830152614e908184614ac8565b90509695505050505050565b60006060820190508181036000830152614eb68186614a2d565b90508181036020830152614eca8185614a2d565b9050614ed96040830184614c5d565b949350505050565b6000602082019050614ef66000830184614a9b565b92915050565b6000608082019050614f116000830187614aaa565b614f1e6020830186614c6c565b614f2b6040830185614aaa565b614f386060830184614aaa565b95945050505050565b60006020820190508181036000830152614f5b8184614afe565b905092915050565b60006060820190508181036000830152614f7d8186614ac8565b9050614f8c6020830185614aaa565b614f996040830184614a1e565b949350505050565b60006020820190508181036000830152614fba81614bc9565b9050919050565b60006020820190508181036000830152614fda81614c00565b9050919050565b6000602082019050614ff66000830184614c5d565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561501f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561504057600080fd5b602082029050919050565b600067ffffffffffffffff82111561506257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000615188826150c4565b9050919050565b82818337600083830152505050565b60005b838110156151bc5780820151818401526020810190506151a1565b838111156151cb576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582013305c149e7a6cef1c2931494eb20757ff3988b6d7a76c533cedb253de009dd56c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","","","5b82525050565b614c7581615130565b82525050565b6000602082019050614c906000830184614a1e565b92915050565b600060a082019050614cab6000830188614a1e565b614cb86020830187614a1e565b614cc56040830186614a1e565b614cd26060830185614a1e565b8181036080830152614ce48184614ac8565b90509695505050505050565b6000608082019050614d056000830187614a1e565b614d126020830186614a1e565b614d1f6040830185614a1e565b8181036060830152614d318184614ac8565b905095945050505050565b6000606082019050614d516000830186614a1e565b614d5e6020830185614a1e565b8181036040830152614d708184614ac8565b9050949350505050565b600060a082019050614d8f6000830188614a1e565b614d9c6020830187614a1e565b8181036040830152614dae8186614afe565b90508181036060830152614dc28185614ac8565b90508181036080830152614dd68184614b34565b90509695505050505050565b6000604082019050614df76000830185614a1e565b614e046020830184614a9b565b9392505050565b6000606082019050614e206000830186614a1e565b614e2d6020830185614ab9565b614e3a6040830184614a1e565b949350505050565b600060a082019050614e576000830188614a1e565b614e646020830187614bba565b614e716040830186614a1e565b614e7e6060830185614a1e565b8181036080830152614e908184614ac8565b90509695505050505050565b60006060820190508181036000830152614eb68186614a2d565b90508181036020830152614eca8185614a2d565b9050614ed96040830184614c5d565b949350505050565b6000602082019050614ef66000830184614a9b565b92915050565b6000608082019050614f116000830187614aaa565b614f1e6020830186614c6c565b614f2b6040830185614aaa565b614f386060830184614aaa565b95945050505050565b60006020820190508181036000830152614f5b8184614afe565b905092915050565b60006060820190508181036000830152614f7d8186614ac8565b9050614f8c6020830185614aaa565b614f996040830184614a1e565b949350505050565b60006020820190508181036000830152614fba81614bc9565b9050919050565b60006020820190508181036000830152614fda81614c00565b9050919050565b6000602082019050614ff66000830184614c5d565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561501f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561504057600080fd5b602082029050919050565b600067ffffffffffffffff82111561506257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000615188826150c4565b9050919050565b82818337600083830152505050565b60005b838110156151bc5780820151818401526020810190506151a1565b838111156151cb576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201d904c05f63ba52112957a0d935f6e57110355ba11f81a21e90d2922f4f370906c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_R\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPENING_BANK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllKeyType\",\"outputs\":[{\"name\":\"keyList\",\"type\":\"bytes[]\"},{\"name\":\"valList\",\"type\":\"bytes[]\"},{\"name\":\"retNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_W\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DATA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECORD\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUB_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODE_R\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"org\",\"type\":\"address\"},{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"check2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonceFromAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODE_W\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSETS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"addKeyType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInnerAccountAndStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"removeKeyType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_PUBLIC\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATOR_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"org\",\"type\":\"address\"},{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"args\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"check2WithSign\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAuthManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"args\",\"type\":\"bytes\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"},{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KEY_ALL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"callee\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"args\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"checkWithSign\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"accountManagerAddr\",\"type\":\"address\"},{\"name\":\"authManagerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"callerOrg\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"calleeOrg\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"logCheck\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_ROLE_R = "ROLE_R";

    public static final String FUNC_OPENING_BANK = "OPENING_BANK";

    public static final String FUNC_GETALLKEYTYPE = "getAllKeyType";

    public static final String FUNC_ROLE_W = "ROLE_W";

    public static final String FUNC_DATA = "DATA";

    public static final String FUNC_OWNER = "OWNER";

    public static final String FUNC_BALANCE = "BALANCE";

    public static final String FUNC_RECORD = "RECORD";

    public static final String FUNC_PUB_KEY = "PUB_KEY";

    public static final String FUNC_ADMIN = "ADMIN";

    public static final String FUNC_MODE_R = "MODE_R";

    public static final String FUNC_CHECK2 = "check2";

    public static final String FUNC_TYPE_ADMIN = "TYPE_ADMIN";

    public static final String FUNC_TYPE_OWNER = "TYPE_OWNER";

    public static final String FUNC_GETNONCEFROMACCOUNT = "getNonceFromAccount";

    public static final String FUNC_MODE_W = "MODE_W";

    public static final String FUNC_OWNER_ADDR = "OWNER_ADDR";

    public static final String FUNC_CHECKACCOUNT = "checkAccount";

    public static final String FUNC_ASSETS = "ASSETS";

    public static final String FUNC_USER_ADDR = "USER_ADDR";

    public static final String FUNC_ADDKEYTYPE = "addKeyType";

    public static final String FUNC_USER = "USER";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_OPERATOR = "OPERATOR";

    public static final String FUNC_ROLE = "ROLE";

    public static final String FUNC_GETINNERACCOUNTANDSTATUS = "getInnerAccountAndStatus";

    public static final String FUNC_ADMIN_ADDR = "ADMIN_ADDR";

    public static final String FUNC_GETACCOUNTMANAGER = "getAccountManager";

    public static final String FUNC_ID = "ID";

    public static final String FUNC_ADDR = "ADDR";

    public static final String FUNC_REMOVEKEYTYPE = "removeKeyType";

    public static final String FUNC_TYPE_PUBLIC = "TYPE_PUBLIC";

    public static final String FUNC_OPERATOR_ADDR = "OPERATOR_ADDR";

    public static final String FUNC_TYPE = "TYPE";

    public static final String FUNC_CHECK2WITHSIGN = "check2WithSign";

    public static final String FUNC_GETAUTHMANAGER = "getAuthManager";

    public static final String FUNC_CHECKNONCE = "checkNonce";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_KEY_ALL = "KEY_ALL";

    public static final String FUNC_CHECKWITHSIGN = "checkWithSign";

    public static final Event LOGCHECK_EVENT = new Event("logCheck", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    protected AuthCenter(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public byte[] ROLE_R() throws ContractException {
        final Function function = new Function(FUNC_ROLE_R, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] OPENING_BANK() throws ContractException {
        final Function function = new Function(FUNC_OPENING_BANK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple3<List<byte[]>, List<byte[]>, BigInteger> getAllKeyType() throws ContractException {
        final Function function = new Function(FUNC_GETALLKEYTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<byte[]>, List<byte[]>, BigInteger>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue());
    }

    public byte[] ROLE_W() throws ContractException {
        final Function function = new Function(FUNC_ROLE_W, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] DATA() throws ContractException {
        final Function function = new Function(FUNC_DATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] OWNER() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] BALANCE() throws ContractException {
        final Function function = new Function(FUNC_BALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] RECORD() throws ContractException {
        final Function function = new Function(FUNC_RECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] PUB_KEY() throws ContractException {
        final Function function = new Function(FUNC_PUB_KEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] ADMIN() throws ContractException {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] MODE_R() throws ContractException {
        final Function function = new Function(FUNC_MODE_R, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Boolean check2(String caller, String org, String callee, byte[] key) throws ContractException {
        final Function function = new Function(FUNC_CHECK2, 
                Arrays.<Type>asList(new Address(caller), 
                new Address(org), 
                new Address(callee), 
                new DynamicBytes(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public byte[] TYPE_ADMIN() throws ContractException {
        final Function function = new Function(FUNC_TYPE_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] TYPE_OWNER() throws ContractException {
        final Function function = new Function(FUNC_TYPE_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public BigInteger getNonceFromAccount(String account) throws ContractException {
        final Function function = new Function(FUNC_GETNONCEFROMACCOUNT, 
                Arrays.<Type>asList(new Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public byte[] MODE_W() throws ContractException {
        final Function function = new Function(FUNC_MODE_W, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public String OWNER_ADDR() throws ContractException {
        final Function function = new Function(FUNC_OWNER_ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean checkAccount(String account) throws ContractException {
        final Function function = new Function(FUNC_CHECKACCOUNT, 
                Arrays.<Type>asList(new Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public byte[] ASSETS() throws ContractException {
        final Function function = new Function(FUNC_ASSETS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public String USER_ADDR() throws ContractException {
        final Function function = new Function(FUNC_USER_ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addKeyType(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_ADDKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key), 
                new DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addKeyType(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key), 
                new DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddKeyType(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_ADDKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key), 
                new DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getAddKeyTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDKEYTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddKeyTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDKEYTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] USER() throws ContractException {
        final Function function = new Function(FUNC_USER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt getOwner() {
        final Function function = new Function(
                FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetOwner() {
        final Function function = new Function(
                FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetOwnerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public byte[] OPERATOR() throws ContractException {
        final Function function = new Function(FUNC_OPERATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] ROLE() throws ContractException {
        final Function function = new Function(FUNC_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple2<String, Boolean> getInnerAccountAndStatus(String account) throws ContractException {
        final Function function = new Function(FUNC_GETINNERACCOUNTANDSTATUS, 
                Arrays.<Type>asList(new Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, Boolean>(
                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue());
    }

    public String ADMIN_ADDR() throws ContractException {
        final Function function = new Function(FUNC_ADMIN_ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getAccountManager() {
        final Function function = new Function(
                FUNC_GETACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAccountManager(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAccountManager() {
        final Function function = new Function(
                FUNC_GETACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAccountManagerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public byte[] ID() throws ContractException {
        final Function function = new Function(FUNC_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] ADDR() throws ContractException {
        final Function function = new Function(FUNC_ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt removeKeyType(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeKeyType(byte[] key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveKeyType(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEKEYTYPE, 
                Arrays.<Type>asList(new DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getRemoveKeyTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEKEYTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveKeyTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEKEYTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] TYPE_PUBLIC() throws ContractException {
        final Function function = new Function(FUNC_TYPE_PUBLIC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public String OPERATOR_ADDR() throws ContractException {
        final Function function = new Function(FUNC_OPERATOR_ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public byte[] TYPE() throws ContractException {
        final Function function = new Function(FUNC_TYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple2<String, Boolean> check2WithSign(String org, String callee, byte[] key, byte[] args, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_CHECK2WITHSIGN, 
                Arrays.<Type>asList(new Address(org), 
                new Address(callee), 
                new DynamicBytes(key), 
                new DynamicBytes(args), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<Bytes32>(
                        Utils.typeMap(sign, Bytes32.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, Boolean>(
                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt getAuthManager() {
        final Function function = new Function(
                FUNC_GETAUTHMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAuthManager(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETAUTHMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAuthManager() {
        final Function function = new Function(
                FUNC_GETAUTHMANAGER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAuthManagerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETAUTHMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkNonce(byte[] args, byte[] message, String account) {
        final Function function = new Function(
                FUNC_CHECKNONCE, 
                Arrays.<Type>asList(new DynamicBytes(args), 
                new Bytes32(message), 
                new Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkNonce(byte[] args, byte[] message, String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKNONCE, 
                Arrays.<Type>asList(new DynamicBytes(args), 
                new Bytes32(message), 
                new Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckNonce(byte[] args, byte[] message, String account) {
        final Function function = new Function(
                FUNC_CHECKNONCE, 
                Arrays.<Type>asList(new DynamicBytes(args), 
                new Bytes32(message), 
                new Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], byte[], String> getCheckNonceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKNONCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], byte[], String>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCheckNonceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKNONCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean check(String caller, String callee, byte[] key) throws ContractException {
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(new Address(caller), 
                new Address(callee), 
                new DynamicBytes(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public byte[] KEY_ALL() throws ContractException {
        final Function function = new Function(FUNC_KEY_ALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple2<String, Boolean> checkWithSign(String callee, byte[] key, byte[] args, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_CHECKWITHSIGN, 
                Arrays.<Type>asList(new Address(callee), 
                new DynamicBytes(key), 
                new DynamicBytes(args), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<Bytes32>(
                        Utils.typeMap(sign, Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, Boolean>(
                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue());
    }

    public List<LogCheckEventResponse> getLogCheckEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCHECK_EVENT, transactionReceipt);
        ArrayList<LogCheckEventResponse> responses = new ArrayList<LogCheckEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogCheckEventResponse typedResponse = new LogCheckEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.callerOrg = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.callee = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.calleeOrg = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.key = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogCheckEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCHECK_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogCheckEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCHECK_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AuthCenter load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AuthCenter(contractAddress, client, credential);
    }

    public static AuthCenter deploy(Client client, CryptoKeyPair credential, String accountManagerAddr, String authManagerAddr) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(accountManagerAddr), 
                new Address(authManagerAddr)));
        return deploy(AuthCenter.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogCheckEventResponse {
        public TransactionReceipt.Logs log;

        public String caller;

        public String callerOrg;

        public String callee;

        public String calleeOrg;

        public byte[] key;
    }
}
