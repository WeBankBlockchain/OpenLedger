package com.webank.openledger.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.webank.openledger.core.common.BaseCustody;
import com.webank.openledger.core.common.BaseHolder;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Account extends Contract implements BaseHolder {
    public static final String[] BINARY_ARRAY = {"60806040526000600260146101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405160808062003c0083398101806040526200004f91908101906200036a565b838383838181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508373ffffffffffffffffffffffffffffffffffffffff166353a33fb76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200017e57600080fd5b505af115801562000193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001b991908101906200033e565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663ad9a87526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200025e57600080fd5b505af115801562000273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200029991908101906200033e565b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050505050620003f6565b6000620003368251620003d6565b905092915050565b6000602082840312156200035157600080fd5b6000620003618482850162000328565b91505092915050565b600080600080608085870312156200038157600080fd5b6000620003918782880162000328565b9450506020620003a48782880162000328565b9350506040620003b78782880162000328565b9250506060620003ca8782880162000328565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6137fa80620004066000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a25d46a146101015780630fb3844c1461013e57806313af4035146101695780631e191eb414610192578063281b3acf146101d05780634da90f341461020e5780634e55d03c1461024b57806362a5af3b146102885780636a28f000146102b35780638866eaec146102de57806392ad4c56146103095780639864804314610346578063a0997a5814610383578063b2623cb0146103c0578063b2bdfa7b146103eb578063d195143c14610416578063ea8a1af014610441578063fd36fe431461046c575b600080fd5b34801561010d57600080fd5b5061012860048036036101239190810190612a25565b6104a9565b60405161013591906132a4565b60405180910390f35b34801561014a57600080fd5b506101536104e9565b60405161016091906133f0565b60405180910390f35b34801561017557600080fd5b50610190600480360361018b9190810190612611565b6104fc565b005b34801561019e57600080fd5b506101b960048036036101b4919081019061263a565b61062a565b6040516101c79291906132e8565b60405180910390f35b3480156101dc57600080fd5b506101f760048036036101f291908101906126fa565b610882565b6040516102059291906132bf565b60405180910390f35b34801561021a57600080fd5b5061023560048036036102309190810190612611565b610ade565b60405161024291906132a4565b60405180910390f35b34801561025757600080fd5b50610272600480360361026d9190810190612917565b610b38565b60405161027f9190613282565b60405180910390f35b34801561029457600080fd5b5061029d610d8a565b6040516102aa91906132a4565b60405180910390f35b3480156102bf57600080fd5b506102c8610f3a565b6040516102d591906132a4565b60405180910390f35b3480156102ea57600080fd5b506102f36110f8565b60405161030091906132a4565b60405180910390f35b34801561031557600080fd5b50610330600480360361032b91908101906128c8565b611114565b60405161033d91906132a4565b60405180910390f35b34801561035257600080fd5b5061036d60048036036103689190810190612808565b61135c565b60405161037a9190613260565b60405180910390f35b34801561038f57600080fd5b506103aa60048036036103a591908101906127cc565b61172c565b6040516103b791906133d5565b60405180910390f35b3480156103cc57600080fd5b506103d5611973565b6040516103e29190613032565b60405180910390f35b3480156103f757600080fd5b50610400611999565b60405161040d9190613032565b60405180910390f35b34801561042257600080fd5b5061042b6119be565b6040516104389190613032565b60405180910390f35b34801561044d57600080fd5b506104566119e8565b60405161046391906132a4565b60405180910390f35b34801561047857600080fd5b50610493600480360361048e9190810190612a61565b611b4e565b6040516104a0919061323e565b60405180910390f35b600082156104cc576104c5826005611ced90919063ffffffff16565b90506104e3565b6104e0826003611ced90919063ffffffff16565b90505b92915050565b600260149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058490613355565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a350565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106bf939291906131d7565b602060405180830381600087803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061071191908101906129fc565b610759836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b90151561079c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107939190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc2d23368b8b8b8b6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161081a94939291906130bb565b600060405180830381600087803b15801561083457600080fd5b505af1158015610848573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506108719190810190612ad9565b945094505050509550959350505050565b600061088c6120cb565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161091d939291906131d7565b602060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061096f91908101906129fc565b6109b7836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b9015156109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f19190613333565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee379d58c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a7a959493929190613115565b606060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610acc9190810190612a9d565b94509450505050965096945050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bcb939291906131d7565b602060405180830381600087803b158015610be557600080fd5b505af1158015610bf9573d6000803e3d6000fd5b","505050506040513d601f19601f82011682018060405250610c1d91908101906129fc565b610c65836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b901515610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f9190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d8189308a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d269493929190613076565b600060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d7d91908101906129bb565b9350505050949350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e355750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610e76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6d906133b5565b60405180910390fd5b610e7e6110f8565b1515610ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb690613395565b60405180910390fd5b6001600260146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051610f2b9190613318565b60405180910390a26001905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fe55750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101d906133b5565b60405180910390fd5b6001600260149054906101000a900460ff1660ff1614151561107d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107490613395565b60405180910390fd5b6000600260146101000a81548160ff021916908360ff1602179055507f756e667265657a650000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e306040516110e99190613318565b60405180910390a26001905090565b600080600260149054906101000a900460ff1660ff1614905090565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111a7939291906131d7565b602060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111f991908101906129fc565b611241836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b901515611284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127b9190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634c433cab88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112fe929190613215565b602060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061135091908101906129fc565b93505050509392505050565b6060856040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113ef939291906131d7565b602060405180830381600087803b15801561140957600080fd5b505af115801561141d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061144191908101906129fc565b611489836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b9015156114cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c39190613333565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561153157600080fd5b505af1158015611545573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061156991908101906129fc565b1561164957600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115eb949392919061317d565b600060405180830381600087803b15801561160557600080fd5b505af1158015611619573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611642919081019061297a565b9350611720565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116c6949392919061317d565b600060405180830381600087803b1580156116e057600080fd5b505af11580156116f4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061171d919081019061297a565b93505b50505095945050505050565b6000826040805190810160405280600a81526020017f67657442616c616e636500000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117bf939291906131d7565b602060405180830381600087803b1580156117d957600080fd5b505af11580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061181191908101906129fc565b611859836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611e1990919063ffffffff16565b90151561189c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118939190613333565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d87306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161191692919061304d565b602060405180830381600087803b15801561193057600080fd5b505af1158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119689190810190612b2d565b935050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a935750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acb906133b5565b60405180910390fd5b60028060146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051611b3f9190613318565b60405180910390a26001905090565b606060006040805190810160405280601081526020017f6765744163636f756e7441737365747300000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611be2939291906131d7565b602060405180830381600087803b158015611bfc576000","","600181019050612bd5565b5050505050565b6000612c1682613607565b80845260208401935083602082028501612c2f856135b3565b60005b84811015612c68578383038852612c4a838351612e06565b9250612c5582613679565b9150602088019750600181019050612c32565b508196508694505050505092915050565b6000612c8482613612565b808452602084019350612c96836135c0565b60005b82811015612cc857612cac868351612e4b565b612cb582613686565b9150602086019550600181019050612c99565b50849250505092915050565b6000612cdf8261361d565b80845260208401935083602082028501612cf8856135cd565b60005b84811015612d31578383038852612d13838351612e90565b9250612d1e82613693565b9150602088019750600181019050612cfb565b508196508694505050505092915050565b612d4b81613628565b612d54826135da565b60005b82811015612d8657612d6a858351613014565b612d73826136a0565b9150602085019450600181019050612d57565b5050505050565b6000612d9882613633565b808452602084019350612daa836135e4565b60005b82811015612ddc57612dc0868351613014565b612dc9826136ad565b9150602086019550600181019050612dad565b50849250505092915050565b612df1816136da565b82525050565b612e00816136e6565b82525050565b6000612e118261363e565b808452612e2581602086016020860161377c565b612e2e816137af565b602085010191505092915050565b612e458161375b565b82525050565b612e54816136f0565b82525050565b6000612e6582613654565b808452612e7981602086016020860161377c565b612e82816137af565b602085010191505092915050565b6000612e9b82613649565b808452612eaf81602086016020860161377c565b612eb8816137af565b602085010191505092915050565b6000602982527f574542617369634163636f756e743a206f6e6c79206f776e657220697320617560208301527f74686f72697a65642e00000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f416464726573735365743a204b65792063616e6e6f74206265203078300000006020830152604082019050919050565b6000602b82527f426173654163636f756e743a206f6e6c79206163636f756e742073746174757360208301527f206973206e6f726d616c2e0000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f426173654163636f756e743a206f6e6c79206163636f756e74206d616e61676560208301527f722e0000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b61301d816136fa565b82525050565b61302c81613704565b82525050565b60006020820190506130476000830184612b56565b92915050565b60006040820190506130626000830185612b56565b61306f6020830184612b56565b9392505050565b600060808201905061308b6000830187612b56565b6130986020830186612b56565b6130a56040830185613014565b6130b26060830184613014565b95945050505050565b60006080820190506130d06000830187612b56565b81810360208301526130e28186612b65565b905081810360408301526130f68185612d8d565b9050818103606083015261310a8184612c0b565b905095945050505050565b600060a08201905061312a6000830188612b56565b818103602083015261313c8187612b65565b905061314b6040830186613014565b818103606083015261315d8185612c79565b905081810360808301526131718184612c0b565b90509695505050505050565b60006080820190506131926000830187612b56565b81810360208301526131a48186612d8d565b905081810360408301526131b88185612b65565b905081810360608301526131cc8184612c79565b905095945050505050565b600060c0820190506131ec6000830186612b56565b81810360208301526131fe8185612e5a565b905061320d6040830184612bc0565b949350505050565b600060408201905061322a6000830185612b56565b6132376020830184613014565b9392505050565b600060208201905081810360008301526132588184612b65565b905092915050565b6000602082019050818103600083015261327a8184612cd4565b905092915050565b6000602082019050818103600083015261329c8184612d8d565b905092915050565b60006020820190506132b96000830184612de8565b92915050565b60006060820190506132d46000830185612de8565b6132e16020830184612d42565b9392505050565b60006040820190506132fd6000830185612de8565b818103602083015261330f8184612d8d565b90509392505050565b600060208201905061332d6000830184612e3c565b92915050565b6000602082019050818103600083015261334d8184612e5a565b905092915050565b6000602082019050818103600083015261336e81612ec6565b9050919050565b6000602082019050818103600083015261338e81612f23565b9050919050565b600060208201905081810360008301526133ae81612f5a565b9050919050565b600060208201905081810360008301526133ce81612fb7565b9050919050565b60006020820190506133ea6000830184613014565b92915050565b60006020820190506134056000830184613023565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561342e57600080fd5b8060405250919050565b600067ffffffffffffffff82111561344f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561347757600080fd5b602082029050919050565b600067ffffffffffffffff82111561349957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134c157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134e957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561351157600080fd5b602082029050919050565b600067ffffffffffffffff82111561353357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561355b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561358757600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000613766826136ba565b9050919050565b82818337600083830152505050565b60005b8381101561379a57808201518184015260208101905061377f565b838111156137a9576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820635557f6f83de7662dedee6d3fa6184a40d28bd8dee630aae9ba1ddb5903744a6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cfb939291906131d7565b602060405180830381600087803b158015610d1557600080fd5b505af1158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d4d91908101906129fc565b610d95836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611ced90919063ffffffff16565b901515610dd8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610dcf9190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba1d32988b8b8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e5694939291906130bb565b600060405180830381600087803b158015610e7057600080fd5b505af1158015610e84573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ead9190810190612ad9565b945094505050509550959350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f695750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610faa576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610fa190613355565b60405180910390fd5b610fb2610ba0565b1515610ff3576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610fea90613395565b60405180910390fd5b6001600260146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af73060405161105f9190613318565b60405180910390a26001905090565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611101939291906131d7565b602060405180830381600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061115391908101906129fc565b61119b836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611ced90919063ffffffff16565b9015156111de576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016111d59190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c241460689308a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161125c9493929190613076565b600060405180830381600087803b15801561127657600080fd5b505af115801561128a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112b391908101906129bb565b9350505050949350505050565b60006112ca6120cb565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161135b939291906131d7565b602060405180830381600087803b15801561137557600080fd5b505af1158015611389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ad91908101906129fc565b6113f5836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611ced90919063ffffffff16565b901515611438576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161142f9190613333565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a1f84b48c8c8c8c8c6040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114b8959493929190613115565b606060405180830381600087803b1580156114d257600080fd5b505af11580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061150a9190810190612a9d565b94509450505050965096945050505050565b6060856040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115af939291906131d7565b602060405180830381600087803b1580156115c957600080fd5b505af11580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061160191908101906129fc565b611649836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611ced90919063ffffffff16565b90151561168c576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016116839190613333565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116f157600080fd5b505af1158015611705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061172991908101906129fc565b1561180957600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117ab949392919061317d565b600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611802919081019061297a565b93506118e0565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611886949392919061317d565b600060405180830381600087803b1580156118a057600080fd5b505af11580156118b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506118dd919081019061297a565b93505b50505095945050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119975750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156119d8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016119cf90613355565b60405180910390fd5b60028060146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051611a439190613318565b60405180910390a26001905090565b600260149054906101000a900460ff1681565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611af8939291906131d7565b602060405180830381600087803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b4a91908101906129fc565b611b92836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e2000000000815250611ced90919063ffffffff16565b901515611bd5576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611bcc9190613333565b60405180910390fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16","","600181019050612bd5565b5050505050565b6000612c1682613607565b80845260208401935083602082028501612c2f856135b3565b60005b84811015612c68578383038852612c4a838351612e06565b9250612c5582613679565b9150602088019750600181019050612c32565b508196508694505050505092915050565b6000612c8482613612565b808452602084019350612c96836135c0565b60005b82811015612cc857612cac868351612e4b565b612cb582613686565b9150602086019550600181019050612c99565b50849250505092915050565b6000612cdf8261361d565b80845260208401935083602082028501612cf8856135cd565b60005b84811015612d31578383038852612d13838351612e90565b9250612d1e82613693565b9150602088019750600181019050612cfb565b508196508694505050505092915050565b612d4b81613628565b612d54826135da565b60005b82811015612d8657612d6a858351613014565b612d73826136a0565b9150602085019450600181019050612d57565b5050505050565b6000612d9882613633565b808452602084019350612daa836135e4565b60005b82811015612ddc57612dc0868351613014565b612dc9826136ad565b9150602086019550600181019050612dad565b50849250505092915050565b612df1816136da565b82525050565b612e00816136e6565b82525050565b6000612e118261363e565b808452612e2581602086016020860161377c565b612e2e816137af565b602085010191505092915050565b612e458161375b565b82525050565b612e54816136f0565b82525050565b6000612e6582613654565b808452612e7981602086016020860161377c565b612e82816137af565b602085010191505092915050565b6000612e9b82613649565b808452612eaf81602086016020860161377c565b612eb8816137af565b602085010191505092915050565b6000602282527f426173654163636f756e743a206f6e6c79206163636f756e74206d616e61676560208301527f722e0000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f416464726573735365743a204b65792063616e6e6f74206265203078300000006020830152604082019050919050565b6000602b82527f426173654163636f756e743a206f6e6c79206163636f756e742073746174757360208301527f206973206e6f726d616c2e0000000000000000000000000000000000000000006040830152606082019050919050565b6000602982527f574542617369634163636f756e743a206f6e6c79206f776e657220697320617560208301527f74686f72697a65642e00000000000000000000000000000000000000000000006040830152606082019050919050565b61301d816136fa565b82525050565b61302c81613704565b82525050565b60006020820190506130476000830184612b56565b92915050565b60006040820190506130626000830185612b56565b61306f6020830184612b56565b9392505050565b600060808201905061308b6000830187612b56565b6130986020830186612b56565b6130a56040830185613014565b6130b26060830184613014565b95945050505050565b60006080820190506130d06000830187612b56565b81810360208301526130e28186612b65565b905081810360408301526130f68185612d8d565b9050818103606083015261310a8184612c0b565b905095945050505050565b600060a08201905061312a6000830188612b56565b818103602083015261313c8187612b65565b905061314b6040830186613014565b818103606083015261315d8185612c79565b905081810360808301526131718184612c0b565b90509695505050505050565b60006080820190506131926000830187612b56565b81810360208301526131a48186612d8d565b905081810360408301526131b88185612b65565b905081810360608301526131cc8184612c79565b905095945050505050565b600060c0820190506131ec6000830186612b56565b81810360208301526131fe8185612e5a565b905061320d6040830184612bc0565b949350505050565b600060408201905061322a6000830185612b56565b6132376020830184613014565b9392505050565b600060208201905081810360008301526132588184612b65565b905092915050565b6000602082019050818103600083015261327a8184612cd4565b905092915050565b6000602082019050818103600083015261329c8184612d8d565b905092915050565b60006020820190506132b96000830184612de8565b92915050565b60006060820190506132d46000830185612de8565b6132e16020830184612d42565b9392505050565b60006040820190506132fd6000830185612de8565b818103602083015261330f8184612d8d565b90509392505050565b600060208201905061332d6000830184612e3c565b92915050565b6000602082019050818103600083015261334d8184612e5a565b905092915050565b6000602082019050818103600083015261336e81612ec6565b9050919050565b6000602082019050818103600083015261338e81612f23565b9050919050565b600060208201905081810360008301526133ae81612f5a565b9050919050565b600060208201905081810360008301526133ce81612fb7565b9050919050565b60006020820190506133ea6000830184613014565b92915050565b60006020820190506134056000830184613023565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561342e57600080fd5b8060405250919050565b600067ffffffffffffffff82111561344f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561347757600080fd5b602082029050919050565b600067ffffffffffffffff82111561349957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134c157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134e957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561351157600080fd5b602082029050919050565b600067ffffffffffffffff82111561353357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561355b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561358757600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000613766826136ba565b9050919050565b82818337600083830152505050565b60005b8381101561379a57808201518184015260208101905061377f565b838111156137a9576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820735703a43f9e5b641c1a28cb4b27b2690ff96937c914b9385046198259f6e6936c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"noteNos\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"accountHoldNote\",\"outputs\":[{\"name\":\"isContain\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBook\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_accountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_project\",\"type\":\"address\"},{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"accountManager\",\"type\":\"address\"},{\"name\":\"accountAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogBaseAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_ADDASSET = "addAsset";

    public static final String FUNC__STATUS = "_status";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_ISACCOUNTADMIN = "isAccountAdmin";

    public static final String FUNC_GETACCOUNTNOTES = "getAccountNotes";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_UNFREEZE = "unfreeze";

    public static final String FUNC_ISNORMAL = "isNormal";

    public static final String FUNC_ACCOUNTHOLDNOTE = "accountHoldNote";

    public static final String FUNC_QUERYBOOK = "queryBook";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC__ACCOUNTMANAGER = "_accountManager";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_GETACCOUNTADMIN = "getAccountAdmin";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_GETACCOUNTASSETS = "getAccountAssets";

    public static final Event LOGBASEACCOUNT_EVENT = new Event("LogBaseAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Account(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAsset(Boolean isFungible, String asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<Boolean, String> getAddAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger _status() throws ContractException {
        final Function function = new Function(FUNC__STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public Boolean isAccountAdmin(String caller) throws ContractException {
        final Function function = new Function(FUNC_ISACCOUNTADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(caller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getAccountNotes(String asset, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt freeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getFreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getUnfreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt isNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void isNormal(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIsNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getIsNormalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean accountHoldNote(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_ACCOUNTHOLDNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List queryBook(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String _accountManager() throws ContractException {
        final Function function = new Function(FUNC__ACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _owner() throws ContractException {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAccountAdmin(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAccountAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getCancelOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAccountAssets(Boolean isFungible, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List<LogBaseAccountEventResponse> getLogBaseAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBASEACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogBaseAccountEventResponse> responses = new ArrayList<LogBaseAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBaseAccountEventResponse typedResponse = new LogBaseAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventType = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogBaseAccountEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogBaseAccountEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetOwnerEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetOwnerEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Account load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Account(contractAddress, client, credential);
    }

    public static Account deploy(Client client, CryptoKeyPair credential, String _project, String _holder, String accountManager, String accountAdmin) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_project), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_holder), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(accountManager), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(accountAdmin)));
        return deploy(Account.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogBaseAccountEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] eventType;

        public String contractAddress;
    }

    public static class LogSetOwnerEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String contractAddress;
    }
}
