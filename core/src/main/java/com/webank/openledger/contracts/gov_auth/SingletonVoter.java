/*
 *   Copyright (C) @2021 Webank Group Holding Limited
 *   <p>
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at
 *  <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *   <p>
 *   Unless required by applicable law or agreed to in writing, software distributed under the License
 *   is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 *  or implied. See the License for the specific language governing permissions and limitations under
 *  he License.
 *
 */

package com.webank.openledger.contracts.gov_auth;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint16;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class SingletonVoter extends Contract {
    public static final String[] BINARY_ARRAY = {"","73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610e47565b60019150509392505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561115057836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611195565b81846002016001830381548110151561116557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b50505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156111f857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6060808260010183600201818054806020026020016040519081016040528092919081815260200182805480156112b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161126b575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561132f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112f65790505b50505050509050915091509150915600a165627a7a7230582038b6859c32b4e2104f5d843a952fb216d38a51aa1a9acdfed61432f70ddb96430029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526064600081905550610014610112565b604051809103906000f080158015610030573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb77d5ab01b3f7208beac655a12b8bb6cdcfbb1a49eebb865c2e8ccfd7407909430604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2610122565b6040516114308061092083390190565b6107ef806101316000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806378416b911461007d5780637c1a8d95146100d457806387a2fee4146101b3578063881b171c1461020a578063b64f7c3c146102ec578063c77695e414610366575b600080fd5b34801561008957600080fd5b506100926103d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e057600080fd5b506100ff600480360381019080803590602001909291905050506103fa565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b3480156101bf57600080fd5b506101c8610531565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021657600080fd5b50610238600480360381019080803560ff16906020019092919050505061055b565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b3480156102f857600080fd5b50610317600480360381019080803590602001909291905050506105c9565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561037257600080fd5b506103a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106b6565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600080600260008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663227028c46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160e060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d60e08110156104ca57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050975097509750975097509750975050919395979092949650565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080600080600080600360008a60ff1660ff168152602001908152602001600020541415151561058e57600080fd5b6105b0600360008a60ff1660ff168152602001908152602001600020546103fa565b9650965096509650965096509650919395979092949650565b60008060006002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bbbea4c36040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561066757600080fd5b505af115801561067b573d6000803e3d6000fd5b505050506040513d604081101561069157600080fd5b8101908080519060200190929190805190602001909291905050509250925050915091565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c77695e4846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505050506040513d604081101561079f57600080fd5b810190808051906020019092919080519060200190929190505050915091509150915600a165627a7a7230582004bc6c748ff81bfc19be56329aaef1743250b49e22fff7dad7fc57e898c6a6b000296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305282c701461009e57806328e91489146100e157806387a2fee4146101385780638f216097146101fb578063c77695e41461022e578063ca4eadb71461029c578063ea3c170c146102e5578063f910baf9146103b4578063fdc10eed1461044e575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b506100f6610676565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014457600080fd5b5061014d61069b565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101a2578082015181840152602081019050610187565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101e45780820151818401526020810190506101c9565b505050509050019550505050505060405180910390f35b34801561020757600080fd5b506102106106d1565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561023a57600080fd5b5061026f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106e5565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156102a857600080fd5b506102cb600480360381019080803561ffff169060200190929190505050610716565b604051808215151515815260200191505060405180910390f35b3480156102f157600080fd5b5061039a6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610828565b604051808215151515815260200191505060405180910390f35b3480156103c057600080fd5b5061043460048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff169060200190929190505050610b6e565b604051808215151515815260200191505060405180910390f35b34801561045a57600080fd5b5061049d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610e62565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16","73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806060806106ad6001610ff8565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b600460009054906101000a900461ffff1681565b6000806106fc83600161110e90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610802576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610915576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610927575083518551145b151561099b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610b6257600084828151811015156109d657fe5b9060200190602002015161ffff16111515610a59576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610a9d8582815181101515610a6a57fe5b906020019060200201518583815181101515610a8257fe5b90602001906020020151600161119c9092919063ffffffff16565b8481815181101515610aab57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928583815181101515610afa57fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a280806001019150506109bd565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610cd4576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610d50576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610e5657610da88582815181101515610d8c57fe5b9060200190602002015185600161119c9092919063ffffffff16565b8481815181101515610db657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610d72565b60019150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610f648383600161119c9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60608082600101836002018180548060200260200160405190810160405280929190818152602001828054801561108457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161103a575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156110fe57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116110c55790505b5050505050905091509150915091565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150846002016001830381548110151561116b57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156112f457836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611339565b81846002016001830381548110151561130957fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b505050505600a165627a7a72305820b99d42dfe96990bb4a5f25a6b49cd9e1b3201dc515475bc0d98f6e569cbe9a6a0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_voteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestTxType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"getRequestSingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"ApproveSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"DeleteSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteWeight\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetVoteWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"requestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnapprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"requestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogCanCall\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETREQUESTINFO = "getRequestInfo";

    public static final String FUNC__VOTEWEIGHT = "_voteWeight";

    public static final String FUNC_GETWEIGHT = "getWeight";

    public static final String FUNC_GETREQUESTTXTYPE = "getRequestTxType";

    public static final String FUNC_GETVOTEWEIGHT = "getVoteWeight";

    public static final String FUNC_GETREQUESTSINGLE = "getRequestSingle";

    public static final Event APPROVESINGLE_EVENT = new Event("ApproveSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>(true) {}));
    ;

    public static final Event DELETESINGLE_EVENT = new Event("DeleteSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event LOGSETVOTEWEIGHT_EVENT = new Event("LogSetVoteWeight", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGREGISTER_EVENT = new Event("LogRegister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNREGISTER_EVENT = new Event("LogUnregister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Bool>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGAPPROVE_EVENT = new Event("LogApprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNAPPROVE_EVENT = new Event("LogUnapprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGCANCALL_EVENT = new Event("LogCanCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    protected SingletonVoter(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestInfo(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTINFO, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public String _voteWeight() throws ContractException {
        final Function function = new Function(FUNC__VOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<BigInteger, BigInteger> getWeight(String who) throws ContractException {
        final Function function = new Function(FUNC_GETWEIGHT, 
                Arrays.<Type>asList(new Address(who)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public Tuple2<BigInteger, String> getRequestTxType(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTTXTYPE, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public String getVoteWeight() throws ContractException {
        final Function function = new Function(FUNC_GETVOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestSingle(BigInteger txType) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTSINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public List<ApproveSingleEventResponse> getApproveSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVESINGLE_EVENT, transactionReceipt);
        ArrayList<ApproveSingleEventResponse> responses = new ArrayList<ApproveSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveSingleEventResponse typedResponse = new ApproveSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteSingleEventResponse> getDeleteSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETESINGLE_EVENT, transactionReceipt);
        ArrayList<DeleteSingleEventResponse> responses = new ArrayList<DeleteSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteSingleEventResponse typedResponse = new DeleteSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetVoteWeightEventResponse> getLogSetVoteWeightEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETVOTEWEIGHT_EVENT, transactionReceipt);
        ArrayList<LogSetVoteWeightEventResponse> responses = new ArrayList<LogSetVoteWeightEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogSetVoteWeightEventResponse typedResponse = new LogSetVoteWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voteWeight = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetVoteWeightEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetVoteWeightEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogRegisterEventResponse> getLogRegisterEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGREGISTER_EVENT, transactionReceipt);
        ArrayList<LogRegisterEventResponse> responses = new ArrayList<LogRegisterEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogRegisterEventResponse typedResponse = new LogRegisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogRegisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogRegisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnregisterEventResponse> getLogUnregisterEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNREGISTER_EVENT, transactionReceipt);
        ArrayList<LogUnregisterEventResponse> responses = new ArrayList<LogUnregisterEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogUnregisterEventResponse typedResponse = new LogUnregisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.result = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnregisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnregisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogApproveEventResponse> getLogApproveEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogApproveEventResponse> responses = new ArrayList<LogApproveEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogApproveEventResponse typedResponse = new LogApproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogApproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogApproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnapproveEventResponse> getLogUnapproveEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogUnapproveEventResponse> responses = new ArrayList<LogUnapproveEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogUnapproveEventResponse typedResponse = new LogUnapproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnapproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnapproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogCanCallEventResponse> getLogCanCallEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCANCALL_EVENT, transactionReceipt);
        ArrayList<LogCanCallEventResponse> responses = new ArrayList<LogCanCallEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogCanCallEventResponse typedResponse = new LogCanCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogCanCallEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogCanCallEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static SingletonVoter load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new SingletonVoter(contractAddress, client, credential);
    }

    public static SingletonVoter deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(SingletonVoter.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class ApproveSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class DeleteSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class LogSetVoteWeightEventResponse {
        public TransactionReceipt.Logs log;

        public String voteWeight;

        public String contractAddress;
    }

    public static class LogRegisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public BigInteger txType;

        public String requestAddress;

        public BigInteger threshold;

        public String contractAddress;
    }

    public static class LogUnregisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public Boolean result;

        public String contractAddress;
    }

    public static class LogApproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogUnapproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogCanCallEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String requestAddress;

        public String contractAddress;
    }
}
