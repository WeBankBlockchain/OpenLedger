/*
 *   Copyright (C) @2021 Webank Group Holding Limited
 *   <p>
 *   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at
 *  <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *   <p>
 *   Unless required by applicable law or agreed to in writing, software distributed under the License
 *   is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 *  or implied. See the License for the specific language governing permissions and limitations under
 *  he License.
 *
 */

package com.webank.openledger.contracts.gov_auth;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint16;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AuthManager extends Contract {
    public static final String[] BINARY_ARRAY = {"","80601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612e37565b005b3480156109c957600080fd5b506109eb600480360381019080803560ff169060200190929190505050612f0b565b005b3480156109f957600080fd5b50610a2e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f93565b005b348015610a3c57600080fd5b50610afd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613194565b005b348015610b0b57600080fd5b50610b146134fe565b60405180806020018360ff1660ff168152602001828103825284818151815260200191508051906020019080838360005b83811015610b60578082015181840152602081019050610b45565b50505050905090810190601f168015610b8d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610ba857600080fd5b50610bb1613634565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf4578082015181840152602081019050610bd9565b505050509050019250505060405180910390f35b348015610c1457600080fd5b50610c8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613645565b005b348015610c9d57600080fd5b50610ca661392a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d18578082015181840152602081019050610cfd565b50505050905090810190601f168015610d455780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610d6057600080fd5b50610d69613a73565b005b348015610d7757600080fd5b50610d80613c5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dce57600080fd5b50610dd7613c83565b604051808215151515815260200191505060405180910390f35b348015610dfd57600080fd5b50610e78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613d9c565b005b348015610e8657600080fd5b50610ebb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614081565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b348015610f7b57600080fd5b50610f8461416a565b005b348015610f9257600080fd5b50610f9b6143c9565b6040518082815260200191505060405180910390f35b348015610fbd57600080fd5b50610fc66143d3565b005b348015610fd457600080fd5b50610fdd6145a7565b005b348015610feb57600080fd5b50610ff4614950565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561106657808201518184015260208101905061104b565b50505050905090810190601f1680156110935780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156110ae57600080fd5b506110d0600480360381019080803560ff169060200190929190505050614a99565b005b3480156110de57600080fd5b50611159600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614b21565b604051808215151515815260200191505060405180910390f35b34801561117f57600080fd5b506111b4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614be4565b005b3480156111c257600080fd5b5061121d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614e8f565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561125357600080fd5b50611288600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614f2c565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156112c157600080fd5b506112ca615039565b005b3480156112d857600080fd5b50611356600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615220565b604051808215151515815260200191505060405180910390f35b34801561137c57600080fd5b506113f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506153f5565b005b34801561140557600080fd5b5061143a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506154c7565b005b34801561144857600080fd5b5061145161564f565b604051808215151515815260200191505060405180910390f35b34801561147757600080fd5b50611538600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506156a6565b005b34801561154657600080fd5b506115656004803603810190808035906020019092919050505061577a565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156115c057600080fd5b50611628600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050615867565b005b34801561163657600080fd5b506116d16004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050615939565b005b3480156116df57600080fd5b50611714600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615be5565b005b34801561172257600080fd5b5061172b615d7d565b005b34801561173957600080fd5b50611742615fff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561179057600080fd5b506117b2600480360381019080803560ff169060200190929190505050616029565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561187257600080fd5b506118a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050616097565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561196757600080fd5b50611a28600480360381019080803573ffffffffffffff","","","","000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601b808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a8a5780601f10614a5f57610100808354040283529160200191614a8a565b820191906000526020600020905b815481529060010190602001808311614a6d57829003601f168201915b50505050509050915091509091565b614aa1613c83565b1515614b15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b614b1e81618656565b50565b60006011836040518082805190602001908083835b602083101515614b5b5780518252602082019150602081019050602083039250614b36565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000614bee613c83565b1515614c62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515614d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6163636f756e74206e6f7420657869737400000000000000000000000000000081525060200191505060405180910390fd5b614d2681836186df565b614d31600c83617c4b565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560058290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060066001908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff160217905550507f238498021d519fc2d1325fb79524857f9a5c00286a5e71c1541a43561fec98d682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b6000806000806011856040518082805190602001908083835b602083101515614ecd5780518252602082019150602081019050602083039250614ea8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000160009054906101000a900460ff1681600101548260020154935093509350509193909250565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015614feb57600080fd5b505af1158015614fff573d6000803e3d6000fd5b505050506040513d604081101561501557600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b615041613c83565b15156150b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60046000600460008360ff1660ff16815260200190815260200160002054141515156150e057600080fd5b615102600460008360ff1660ff16815260200190815260200160002054617177565b151561510d57600080fd5b6151d3601560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660168054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156151c95780601f1061519e576101008083540402835291602001916151c9565b820191906000526020600020905b8154815290600101906020018083116151ac57829003601f168201915b5050505050618898565b6151f5600460008360ff1660ff168152602001908152602001600020546178a8565b151561520057600080fd5b600460008260ff1660ff1681526020019081526020016000206000905550565b6000806000806000601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020935060118460405180828054600181600116156101000203166002900480156153165780601f106152f4576101008083540402835291820191615316565b820191906000526020600020905b815481529060010190602001808311615302575b50509150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff16141561535157600094506153ea565b8260000160009054906101000a900460ff169150600360ff168260ff16141561537d57600194506153ea565b8260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600160ff168260ff1614156153e5578094506153ea565b801594505b505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156154b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6154c3828261802b565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561558d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f81c40df530c7b3f6fe84403f586f41d461f96342dacbcd44ac6f0eb80f88970460405160405180910390a35050565b60003373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561576a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b615775838383618cd3565b505050565b60008060006003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636900187d6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b15801561581857600080fd5b505af115801561582c573d6000803e3d6000fd5b505050506040513d604081101561584257600080fd5b8101908080519060200190929190805190602001909291905050509250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561592b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b61593582826183d7565b5050565b615941613c83565b15156159b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152","","2001828103825284818151815260200191508051906020019080838360005b838110156169b857808201518184015260208101905061699d565b50505050905090810190601f1680156169e55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b616a02613c83565b1515616a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60016000806000600460008560ff1660ff16815260200190815260200160002054141515616b0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b616b168333616f34565b91509150600081111515616b92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555083600760026101000a81548161ffff021916908361ffff1602179055507fbf78b5f34aec236b9208ca42f92bd676165c68355cef1758e905daf75cce13aa84604051808261ffff1661ffff16815260200191505060405180910390a150505050565b600080600080600080600080339650600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac6c5251886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015616cdd57600080fd5b505af1158015616cf1573d6000803e3d6000fd5b505050506040513d6040811015616d0757600080fd5b81019080805190602001909291908051906020019092919050505095509550600193506000925060008661ffff161415616d445760009350616e9e565b600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff161415616da25760009350616e9d565b8190508073ffffffffffffffffffffffffffffffffffffffff1663e560ca4388886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001925050506040805180830381600087803b158015616e4f57600080fd5b505af1158015616e63573d6000803e3d6000fd5b505050506040513d6040811015616e7957600080fd5b81019080805190602001909291908051906020019092919050505080945081955050505b5b8673ffffffffffffffffffffffffffffffffffffffff16897febe4dc679cdbfe16b4f5276752b8a8394e6eab05e565e44e0815fc8379ad3d37863060405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a383975050505050505050919050565b600080600160008154809291906001019190505550616f566001548585619328565b600154915091509250929050565b60008173ffffffffffffffffffffffffffffffffffffffff1614151515617019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61702382826195f5565b1515156170be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000806000806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156171d65760009250617378565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff16638c542ddf856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561727b57600080fd5b505af115801561728f573d6000803e3d6000fd5b505050506040513d60208110156172a557600080fd5b81019080805190602001909291905050509050600115158115151415617374576003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f410b46f567eb79383667e25a31d877045f2ac0dbd2315b1f6d85afe9455b89e930604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a35b8092505b5050919050565b6000806011836040518082805190602001908083835b6020831015156173ba5780518252602082019150602081019050602083039250617395565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915060008260000160009054906101000a900460ff1660ff161415151561747c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f67726f7570206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b836040518082805190602001908083835b6020831015156174b2578051825260208201915060208101905060208303925061748d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090508160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1615156175f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f66756e6374696f6e206e6f74206578697374000000000000000000000000000081525060200191505060405180910390fd5b60008260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508160020160008154809291906001900391905055506020604051908101604052806000815250601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090805190602001906177639291906196aa565b507f99733eb68fd342df4ae81ac2f9d4b1f5fa20fb9f6f2c398224e3a65726b6d78c858585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156177fe5780820151818401526020810190506177e3565b50505050905090810190601f16801561782b5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015617864578082015181840152602081019050617849565b50505050905090810190601f1680156178915780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b60008060006001915060006003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561790c5760009150617a21565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16632e49d78b60026040518263ffffffff167c01000000000000000000000000000000000000","","525060200191505060405180910390fd5b6011816040518082805190602001908083835b6020831015156189c757805182526020820191506020810190506020830392506189a2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515618abd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6163636f756e7420616c7265616479206164640000000000000000000000000081525060200191505060405180910390fd5b60016011826040518082805190602001908083835b602083101515618af75780518252602082019150602081019050602083039250618ad2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506011816040518082805190602001908083835b602083101515618bb95780518252602082019150602081019050602083039250618b94565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600081548092919060010191905055507f1f4e521a7c2a6c34638ef19b691ef76b750a556070ae4b91b925d3122f8727bd8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015618c94578082015181840152602081019050618c79565b50505050905090810190601f168015618cc15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60008060606011846040518082805190602001908083835b602083101515618d105780518252602082019150602081019050602083039250618ceb565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff1614151515618dd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f67726f7570206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b846040518082805190602001908083835b602083101515618e085780518252602082019150602081019050602083039250618de3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091508260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16151515618f4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f66756e6374696f6e20616c72656164792061646400000000000000000000000081525060200191505060405180910390fd5b601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561906c5780601f106190415761010080835404028352916020019161906c565b820191906000526020600020905b81548152906001019060200180831161904f57829003601f168201915b505050505090506000815114151561908357600080fd5b60018360040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550826002016000815480929190600101919050555083601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090805190602001906191e29291906196aa565b507f19ec4d1efc16f88df62edeaa6cf89b178f2bed446087fa19ab61f2c3a1d927c9868686604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561927d578082015181840152602081019050619262565b50505050905090810190601f1680156192aa5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156192e35780820151818401526020810190506192c8565b50505050905090810190601f1680156193105780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b60008060008060006003600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156193bf576003600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508293506195eb565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f3c81606040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561944557600080fd5b505af1158015619459573d6000803e3d6000fd5b505050506040513d602081101561946f57600080fd5b810190808051906020019092919050505091508686868461948e619920565b808581526020018460ff1660ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001945050505050604051809103906000f080158015619503573d6000803e3d6000fd5b509050806003600089815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168660ff16887f501994f520a3585d1c71ac106183d6fcb8a825b388c60e3ac9ef7ec1e1c866fc8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a48093505b5050509392505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b81548183558181111561966b5781836000526020600020918201910161966a9190619930565b5b505050565b8154818355818111156196a557600f016010900481600f016010900483600052602060002091820191016196a49190619930565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106196eb57805160ff1916838001178555619719565b82800160010185558215619719579182015b828111156197185782518255916020019190600101906196fd565b5b5090506197269190619930565b5090565b60405161143080619c9483390190565b82805482825590600052602060002090810192821561977b5760005260206000209182015b8281111561977a57825482559160010191906001019061975f565b5b5090506197889190619955565b5090565b82805482825590600052602060002090600f016010900481019282156197db57600052602060002091600f016010900482015b828111156197da5782548255916001019190600101906197bf565b5b5090506197e89190619998565b5090565b828054828255906000526020600020908101928215619865579160200282015b828111156198645782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061980c565b5b5090506198729190619955565b5090565b82805482825590600052602060002090600f0160109004810192821561990f5791602002820160005b838211156198df57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261989f565b801561990d5782816101000a81549061ffff02191690556002016020816001010492830192600103026198df565b505b50905061991c9190619998565b5090565b604051610d7a8061b0c483390190565b61995291905b8082111561994e576000816000905550600101619936565b5090565b90565b61999591905b8082111561999157600081816101000a81549073ffffffffffffffffffffffffffffff","ffffffffff02191690555060010161995b565b5090565b90565b6199c691905b808211156199c257600081816101000a81549061ffff02191690555060010161999e565b5090565b90565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f22d9bc58484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b83811015619acc578082015181840152602081019050619ab1565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015619b0e578082015181840152602081019050619af3565b5050505090500195505050505050602060405180830381600087803b158015619b3657600080fd5b505af1158015619b4a573d6000803e3d6000fd5b505050506040513d6020811015619b6057600080fd5b8101908080519060200190929190505050508260059080519060200190619b889291906197ec565b508160069080519060200190619b9f929190619876565b5080600760006101000a81548161ffff021916908361ffff1602179055507f0c27cf921fb08e618d545975960b46fc31890400829313864b4982cc0033ee2d8383836040518080602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b83811015619c36578082015181840152602081019050619c1b565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015619c78578082015181840152602081019050619c5d565b505050509050019550505050505060405180910390a150505056006080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e5780631400a813146100e1578063793e64101461014a5780637f3c816014610193578063ac6c5251146101c6578063b2bdfa7b14610234578063d428cffc1461028b578063d58846371461034e578063f22d9bc5146103e8575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b50610130600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610676565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b50610179600480360381019080803561ffff16906020019092919050505061080c565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a861091e565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101d257600080fd5b50610207600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610932565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561024057600080fd5b50610249610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029757600080fd5b506102a0610988565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102f55780820151818401526020810190506102da565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561033757808201518184015260208101905061031c565b505050509050019550505050505060405180910390f35b34801561035a57600080fd5b506103ce60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff1690602001909291905050506109be565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b5061049d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610cb2565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61077883836001610ff89092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b600460009054906101000a900461ffff1681565b60008061094983600161119b90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060608060608061099a6001611229565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff","167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610e47565b60019150509392505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561115057836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611195565b81846002016001830381548110151561116557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b50505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156111f857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6060808260010183600201818054806020026020016040519081016040528092919081815260200182805480156112b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161126b575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561132f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112f65790505b50505050509050915091509150915600a165627a7a7230582038b6859c32b4e2104f5d843a952fb216d38a51aa1a9acdfed61432f70ddb96430029608060405234801561001057600080fd5b50604051608080610d7a83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a48360018190555080600260006101000a81548161ffff021916908361ffff1602179055506000600460006101000a81548161ffff021916908361ffff1602179055506000600460026101000a81548160ff021916908360ff16021790555082600460036101000a81548160ff021916908360ff160217905550816004806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610bab806101cf6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af40351461009e57806325fee005146100e15780632e49d78b1461013c5780633037b2b01461016c5780636900187d146101c35780638c542ddf14610227578063b2bdfa7b1461026c578063e560ca43146102c3578063f28676f41461033b575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610404565b005b3480156100ed57600080fd5b50610122600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105c3565b604051808215151515815260200191505060405180910390f35b34801561014857600080fd5b5061016a600480360381019080803560ff169060200190929190505050610619565b005b34801561017857600080fd5b50610181610768565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101cf57600080fd5b506101d861078d565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561023357600080fd5b50610252600480360381019080803590602001909291905050506107ca565b604051808215151515815260200191505060405180910390f35b34801561027857600080fd5b506102816107ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cf57600080fd5b50610312600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610824565b60405180831515151581526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561034757600080fd5b50610350610af2565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fe9babf7227595470b3626ae5ccf58b60155b302e762cffc79c52bfd8a800c53c60405160405180910390a450565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e0000000000000000000000000000000000000000","","01807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610ca657610bf88582815181101515610bdc57fe5b90602001906020020151856001610ff89092919063ffffffff16565b8481815181101515610c0657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610bc2565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610db1575083518551145b1515610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610fec5760008482815181101515610e6057fe5b9060200190602002015161ffff16111515610ee3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610f278582815181101515610ef457fe5b906020019060200201518583815181101515610f0c57fe5b906020019060200201516001610ff89092919063ffffffff16565b8481815181101515610f3557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f2c00e0bbfed7415a2cfaabe8c8c0c4e511702b7ede4a3de9ff3e4352ab2b760d8583815181101515610f8457fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610e47565b60019150509392505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561115057836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611195565b81846002016001830381548110151561116557fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b50505050565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915084600201600183038154811015156111f857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b6060808260010183600201818054806020026020016040519081016040528092919081815260200182805480156112b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161126b575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561132f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112f65790505b50505050509050915091509150915600a165627a7a7230582038b6859c32b4e2104f5d843a952fb216d38a51aa1a9acdfed61432f70ddb96430029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","57600080fd5b5061098d612f83565b005b34801561099b57600080fd5b506109f6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613205565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b348015610a2c57600080fd5b50610a356132a2565b604051808215151515815260200191505060405180910390f35b348015610a5b57600080fd5b50610a90600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133bb565b005b348015610a9e57600080fd5b50610aa76135bc565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b19578082015181840152602081019050610afe565b50505050905090810190601f168015610b465780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015610b6157600080fd5b50610b96600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613705565b005b348015610ba457600080fd5b50610bd9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a5d565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b348015610c9957600080fd5b50610ca2613b46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cf057600080fd5b50610db1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613b6f565b005b348015610dbf57600080fd5b50610dc8613c43565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610e3e578082015181840152602081019050610e23565b50505050905090810190601f168015610e6b5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ea4578082015181840152602081019050610e89565b50505050905090810190601f168015610ed15780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b348015610eee57600080fd5b50610ef7613e2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4557600080fd5b50610f6460048036038101908080359060200190929190505050613e54565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561102457600080fd5b50611059600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613f8b565b005b34801561106757600080fd5b50611070614235565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156110be57600080fd5b506110e0600480360381019080803560ff16906020019092919050505061425f565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b3480156111a057600080fd5b506111a96142cd565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156111ec5780820151818401526020810190506111d1565b505050509050019250505060405180910390f35b34801561120c57600080fd5b506112156142de565b005b34801561122357600080fd5b50611245600480360381019080803560ff169060200190929190505050614687565b005b34801561125357600080fd5b506112ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061470f565b005b3480156112dc57600080fd5b506112e56147e1565b005b3480156112f357600080fd5b506112fc6149c8565b005b34801561130a57600080fd5b506113cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614b9c565b005b3480156113d957600080fd5b506114746004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050614f06565b005b34801561148257600080fd5b506114a1600480360381019080803590602001909291905050506151b2565b604051808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b3480156114fc57600080fd5b50611577600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061529f565b005b34801561158557600080fd5b5061158e615584565b005b34801561159c57600080fd5b506115d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615806565b005b3480156115df57600080fd5b506115e8615946565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561165a57808201518184015260208101905061163f565b50505050905090810190601f1680156116875780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156116a257600080fd5b506116d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615a8f565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b34801561171057600080fd5b50611719615b9c565b6040518082815260200191505060405180910390f35b34801561173b57600080fd5b50611770600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050615ba6565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff1661ffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff1661ffff1681526020018360ff1660ff1681526020018260ff1660ff16815260200197505050505050505060405180910390f35b34801561183057600080fd5b50611839615c8f565b604051808215151515815260200191505060405180910390f35b34801561185f57600080fd5b50611882600480360381019080803561ffff169060200190929190505050615ce6565b005b34801561189057600080fd5b5061190b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050615efe565b005b34801561191957600080fd5b50611981600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050615f","d0565b005b34801561198f57600080fd5b50611a50600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050616269565b005b348015611a5e57600080fd5b50611a676165d3565b005b348015611a7557600080fd5b50611add600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050616832565b005b348015611aeb57600080fd5b50611bac600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050616904565b604051808215151515815260200191505060405180910390f35b348015611bd257600080fd5b50611c07600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050616a79565b005b611c116132a2565b1515611c85576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60066000806000600460008560ff1660ff16815260200190815260200160002054141515611d1b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7265717565737420616c7265616479206163746976650000000000000000000081525060200191505060405180910390fd5b611d258333616c11565b91509150600081111515611da1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5265676973746572206964206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b80600460008560ff1660ff1681526020019081526020016000208190555084601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601b9080519060200190611e16929190619643565b507f4f6c679cc7adb2e5f876f3b14d907bd86f65f6a2157f4d4dfaaad2453c54602a8585604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611eac578082015181840152602081019050611e91565b50505050905090810190601f168015611ed95780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b6000606080611efb6132a2565b1515611f6f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660186019818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561202b5780601f106120005761010080835404028352916020019161202b565b820191906000526020600020905b81548152906001019060200180831161200e57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120c75780601f1061209c576101008083540402835291602001916120c7565b820191906000526020600020905b8154815290600101906020018083116120aa57829003601f168201915b50505050509050925092509250909192565b6000806120e46132a2565b1515612158576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b6000600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156121a657600080fd5b6121b2600c6000616c11565b9150915080600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612205600f84616c41565b7f65c9ee8f6e7f364137022369122efbf0b71821e5004b28fa19c7085bb5c2f50183604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612333576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f2c3e4e8028f0b13aaee3d3936311da6537e190be78af2bb673e8989493c89bf960405160405180910390a35050565b6060612401600f616e54565b905090565b6000806000806000601260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020935060118460405180828054600181600116156101000203166002900480156124fc5780601f106124da5761010080835404028352918201916124fc565b820191906000526020600020905b8154815290600101906020018083116124e8575b50509150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff16141561253757600094506125d0565b8260000160009054906101000a900460ff169150600360ff168260ff16141561256357600194506125d0565b8260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600160ff168260ff1614156125cb578094506125d0565b801594505b505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561269f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f596f7520617265206e6f742061646d696e00000000000000000000000000000081525060200191505060405180910390fd5b6126aa838383616f3f565b505050565b6000806126ba6132a2565b151561272e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561277c57600080fd5b612788600b6000616c11565b9150915080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127db600c84616c41565b7f094f6d407e0c3893237774eee826054e1fc5510eee1956e15dd49e67121fa78e8382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b6128536132a2565b15156128c7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b60066000600460008360ff1660ff16815260200190815260200160002054141515156128f257600080fd5b612914600460008360ff1660ff16815260200190815260200160002054617594565b151561291f57600080fd5b6129e5601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460","","","","","ffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836040518082805190602001908083835b6020831015156169e957805182526020820191506020810190506020830392506169c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff1690509392505050565b6000616a836132a2565b1515616af7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520617265206e6f7420676f7665726e6f7273000000000000000000000081525060200191505060405180910390fd5b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515616b4857600080fd5b616b5181617b48565b1515616b5c57600080fd5b616b67600f83618606565b600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090557fa2b82124db502ae22cbe3485f3e7586a86eedf8e44f988169c82f46fd6ce0fea82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600160008154809291906001019190505550616c336001548585619327565b600154915091509250929050565b60008173ffffffffffffffffffffffffffffffffffffffff1614151515616cf6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b616d0082826195f4565b151515616d9b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60608060008360010180549050604051908082528060200260200182016040528015616e8f5781602001602082028038833980820191505090505b5091505b8360010180549050811015616f35578360010181815481101515616eb357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181101515616eec57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050616e93565b8192505050919050565b60008060606011846040518082805190602001908083835b602083101515616f7c5780518252602082019150602081019050602083039250616f57565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020925060008360000160009054906101000a900460ff1660ff161415151561703e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f67726f7570206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b846040518082805190602001908083835b602083101515617074578051825260208201915060208101905060208303925061704f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091508260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff161515156171b6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f66756e6374696f6e20616c72656164792061646400000000000000000000000081525060200191505060405180910390fd5b601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156172d85780601f106172ad576101008083540402835291602001916172d8565b820191906000526020600020905b8154815290600101906020018083116172bb57829003601f168201915b50505050509050600081511415156172ef57600080fd5b60018360040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550826002016000815480929190600101919050555083601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020908051906020019061744e929190619643565b507f72920f24307e6952804d77a359a449e836816f46735327c47c6a76bec5caffcc868686604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156174e95780820151818401526020810190506174ce565b50505050905090810190601f1680156175165780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561754f578082015181840152602081019050617534565b50505050905090810190601f16801561757c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050505050565b6000806000806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156175f35760009250617795565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663e8ffc242856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561769857600080fd5b505af11580156176ac573d6000803e3d6000fd5b505050506040513d60208110156176c257600080fd5b81019080805190602001909291905050509050600115158115151415617791576003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f44e441ea025d9c27af4a8a390a4f8cc60b91f2be08659049e54ab904e342f18c30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a35b8092505b5050919050565b60006011826040518082805190602001908083835b6020831015156177d657805182526020820191506020810190506020830392506177b1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156178cb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6163636f756e74206e6f7420657869737400000000000000000000000000000081525060200191505060405180910390fd5b60006011836040518082805190602001908083835b60208310151561790557805182526020820191506020810190506020830392506178e0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a","81548160ff0219169083151502179055506011826040518082805190602001908083835b6020831015156179c757805182526020820191506020810190506020830392506179a2565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016000815480929190600190039190505550816040518082805190602001908083835b602083101515617a445780518252602082019150602081019050602083039250617a1f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090507fb88fd5b1e0a2f3570ca558ddc95e563eba1eb33f215410ac82b4762405b7a08a8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015617b08578082015181840152602081019050617aed565b50505050905090810190601f168015617b355780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b60008060006001915060006003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415617bac5760009150617cc1565b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e3ccca1560026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050600060405180830381600087803b158015617c5557600080fd5b505af1158015617c69573d6000803e3d6000fd5b5050505060006003600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b811515847f55f34a650247f5482c8d8913747ecdb1d36553fe9b42c414b96cad93d675c51b30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a38192505050919050565b6000600460008360ff1660ff1681526020019081526020016000205414151515617d5b57600080fd5b617d7d600460008360ff1660ff16815260200190815260200160002054617dbb565b1515617d8857600080fd5b8060ff167fe1850379bf4e321a0591a004c069902632706c2d21d1503ecd8aa0354ac87ad360405160405180910390a250565b600080600080600080600080339650600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c77695e4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040805180830381600087803b158015617e8657600080fd5b505af1158015617e9a573d6000803e3d6000fd5b505050506040513d6040811015617eb057600080fd5b81019080805190602001909291908051906020019092919050505095509550600193506000925060008661ffff161415617eed5760009350618047565b600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff161415617f4b5760009350618046565b8190508073ffffffffffffffffffffffffffffffffffffffff1663f61eb27e88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001925050506040805180830381600087803b158015617ff857600080fd5b505af115801561800c573d6000803e3d6000fd5b505050506040513d604081101561802257600080fd5b81019080805190602001909291908051906020019092919050505080945081955050505b5b8673ffffffffffffffffffffffffffffffffffffffff16897fde70b399d7539bc3e7042671a3f047a2c6a8443ef9a2e914de5e1eddbc247e4e863060405180831515151581526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a383975050505050505050919050565b6000806011836040518082805190602001908083835b60208310151561811857805182526020820191506020810190506020830392506180f3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915060008260000160009054906101000a900460ff1660ff16141515156181da576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f67726f7570206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b836040518082805190602001908083835b60208310151561821057805182526020820191506020810190506020830392506181eb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090508160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff161515618351576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f66756e6374696f6e206e6f74206578697374000000000000000000000000000081525060200191505060405180910390fd5b60008260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508160020160008154809291906001900391905055506020604051908101604052806000815250601260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090805190602001906184c1929190619643565b507f5f67318a46f19a1582f641fe5bda42c33716f3f06d5960b5e92efc04c2c4cc50858585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561855c578082015181840152602081019050618541565b50505050905090810190601f1680156185895780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156185c25780820151818401526020810190506185a7565b50505050905090810190601f1680156185ef5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b600080600061861585856195f4565b15156186af576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4c6962416464726573735365743a2076616c756520646f65736e27742065786981526020017f73742e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403925060018560010180549050039150846001018281548110151561871457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080856001018481548110151561875357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558460010180548091906001900361884091906196c3565b505050505050565b8161885281617594565b15156188ec576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdc10eed8360006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffff","ffffffffffffffffffff1681526020018261ffff16815260200192505050602060405180830381600087803b1580156189b657600080fd5b505af11580156189ca573d6000803e3d6000fd5b505050506040513d60208110156189e057600080fd5b8101908080519060200190929190505050506189fb81617b48565b50505050565b81618a0b81617594565b1515618aa5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5745476f7665726e616e63653a2076616c69642072657175657374206661696c81526020017f65642e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdc10eed8360016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff16815260200192505050602060405180830381600087803b158015618b6f57600080fd5b505af1158015618b83573d6000803e3d6000fd5b505050506040513d6020811015618b9957600080fd5b810190808051906020019092919050505050618bb481617b48565b50505050565b6000600460008360ff1660ff1681526020019081526020016000205414151515618be357600080fd5b618c05600460008360ff1660ff16815260200190815260200160002054617b48565b1515618c1057600080fd5b600460008260ff1660ff168152602001908152602001600020600090557fdcbb8f5f566f47c944e930a9ae552f8f8c6f71d65c8e0ca63e5d4650bd16aef081604051808260ff1660ff16815260200191505060405180910390a150565b60006011826040518082805190602001908083835b602083101515618ca75780518252602082019150602081019050602083039250618c82565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900460ff1660ff1614151515618d64576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f67726f7570206e6f74206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b6011816040518082805190602001908083835b602083101515618d9c5780518252602082019150602081019050602083039250618d77565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515618e92576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6163636f756e7420616c7265616479206164640000000000000000000000000081525060200191505060405180910390fd5b60016011826040518082805190602001908083835b602083101515618ecc5780518252602082019150602081019050602083039250618ea7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506011816040518082805190602001908083835b602083101515618f8e5780518252602082019150602081019050602083039250618f69565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600081548092919060010191905055507ff674025878f9905dcf119f8ce7eea809dba2e4aa908dba6b5698785182b0ad688282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561906957808201518184015260208101905061904e565b50505050905090810190601f1680156190965780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b606082905060008151141515156190be57600080fd5b60006011846040518082805190602001908083835b6020831015156190f857805182526020820191506020810190506020830392506190d3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900460ff1660ff161415156191b4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f67726f757020616c72656164792065786973740000000000000000000000000081525060200191505060405180910390fd5b6060604051908101604052808360ff1681526020016000815260200160008152506011846040518082805190602001908083835b60208310151561920d57805182526020820191506020810190506020830392506191e8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010155604082015181600201559050507fcf95dc959312b4904f4de862aad04f847527c51e5b446799603101f19526567f838360405180806020018360ff1660ff168152602001828103825284818151815260200191508051906020019080838360005b838110156192e75780820151818401526020810190506192cc565b50505050905090810190601f1680156193145780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050565b60008060008060006003600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156193be576003600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508293506195ea565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f2160976040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561944457600080fd5b505af1158015619458573d6000803e3d6000fd5b505050506040513d602081101561946e57600080fd5b810190808051906020019092919050505091508686868461948d61991f565b808581526020018460ff1660ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff1661ffff168152602001945050505050604051809103906000f080158015619502573d6000803e3d6000fd5b509050806003600089815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff168660ff16887fe26ea3d3c9637079e1652fb43c524b8420a3a0987e6eecf5607e4b8df20036a98530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a48093505b5050509392505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061968457805160ff19168380011785556196b2565b828001600101855582156196b2579182015b828111156196b1578251825591602001919060010190619696565b5b5090506196bf919061992f565b5090565b8154818355818111156196ea578183600052602060002091820191016196e9919061992f565b5b505050565b81548183558181111561972457600f016010900481600f01601090048360005260206000209182019101619723919061992f565b5b505050565b60405161143080619c9383390190565b82805482825590600052602060002090810192821561977a5760005260206000209182015b8281111561977957825482559160010191906001019061975e565b5b5090506197879190619954565b5090565b82805482825590600052602060002090600f016010900481019282156197da57600052602060002091600f016010900482015b828111156197d95782548255916001019190600101906197be565b5b5090506197e79190619997565b5090565b828054828255906000526020600020908101928215619864579160200282015b828111156198635782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061980b565b5b5090506198719190619954565b5090565b82805482825590600052602060002090600f0160109004810192821561990e5791602002820160005b838211156198de57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261989e565b801561990c5782816101000a81549061ffff02191690556002016020816001010492830192600103026198de565b505b50905061991b9190619997565b5090565b604051610d7a8061b0c383390190565b61995191905b8082111561994d576000816000905550600101619935565b5090565b90565b61999491905b8082111561999057600081816101000a81549073ffffffffffffffffffffffffffffffff","ffffffff02191690555060010161995a565b5090565b90565b6199c591905b808211156199c157600081816101000a81549061ffff02191690555060010161999d565b5090565b90565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea3c170c8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b83811015619acb578082015181840152602081019050619ab0565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015619b0d578082015181840152602081019050619af2565b5050505090500195505050505050602060405180830381600087803b158015619b3557600080fd5b505af1158015619b49573d6000803e3d6000fd5b505050506040513d6020811015619b5f57600080fd5b8101908080519060200190929190505050508260059080519060200190619b879291906197eb565b508160069080519060200190619b9e929190619875565b5080600760006101000a81548161ffff021916908361ffff1602179055507fab88aac081194e202f78b52f9630ee711ed21111fd9c301de2d051725ae4cbab8383836040518080602001806020018461ffff1661ffff168152602001838103835286818151815260200191508051906020019060200280838360005b83811015619c35578082015181840152602081019050619c1a565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015619c77578082015181840152602081019050619c5c565b505050509050019550505050505060405180910390a150505056006080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305282c701461009e57806328e91489146100e157806387a2fee4146101385780638f216097146101fb578063c77695e41461022e578063ca4eadb71461029c578063ea3c170c146102e5578063f910baf9146103b4578063fdc10eed1461044e575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b506100f6610676565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014457600080fd5b5061014d61069b565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101a2578082015181840152602081019050610187565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101e45780820151818401526020810190506101c9565b505050509050019550505050505060405180910390f35b34801561020757600080fd5b506102106106d1565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561023a57600080fd5b5061026f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106e5565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156102a857600080fd5b506102cb600480360381019080803561ffff169060200190929190505050610716565b604051808215151515815260200191505060405180910390f35b3480156102f157600080fd5b5061039a6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610828565b604051808215151515815260200191505060405180910390f35b3480156103c057600080fd5b5061043460048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff169060200190929190505050610b6e565b604051808215151515815260200191505060405180910390f35b34801561045a57600080fd5b5061049d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610e62565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806060806106ad6001610ff8565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b600460009054906101000a900461ffff1681565b6000806106fc83600161110e90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610802576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610915576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610927575083518551145b151561099b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610b6257600084828151811015156109d657fe5b9060200190602002015161ffff16111515610a59576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b610a9d8582815181101515610a6a57fe5b906020019060200201518583815181101515610a8257fe5b90602001906020020151600161119c9092919063ffffffff16565b8481815181101515610aab57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928583815181101515610afa57fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a280806001019150506109bd565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f815260","","1681565b600080600460039054906101000a900460ff166004809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915091509091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610817576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160ff167fbe01663bd17454b73ac522a855cfc1eb2c887f130e9100c94c0dcc3a5704801b60405160405180910390a380600460026101000a81548160ff021916908360ff16021790555050565b6000600260009054906101000a900461ffff1661ffff16600460009054906101000a900461ffff1661ffff1610159050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050600015158115151415610a885783600460009054906101000a900461ffff1601600460006101000a81548161ffff021916908361ffff1602179055506001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610aa4565b6000600460009054906101000a900461ffff1692509250610b77565b8361ffff168573ffffffffffffffffffffffffffffffffffffffff167f7a2721a057622ab3b8b854b33d269dd5f47f7ebae67f5b4e5f94d32c3f2cf03b30604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a3600260009054906101000a900461ffff1661ffff16600460009054906101000a900461ffff1661ffff16101515610b5f57610b5e600161072d565b5b6001600460009054906101000a900461ffff16925092505b5092509290505600a165627a7a72305820b0ad1514b3727bed370f4703ff7de6cd7bdd16a13e051879c4da44392aca05d80029a165627a7a7230582012776cf76784d3390141f54e281efd46f3b8fa0f95cb3bfaa8184518cc8a95ac00296080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a461136b806100c56000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305282c701461009e57806328e91489146100e157806387a2fee4146101385780638f216097146101fb578063c77695e41461022e578063ca4eadb71461029c578063ea3c170c146102e5578063f910baf9146103b4578063fdc10eed1461044e575b600080fd5b3480156100aa57600080fd5b506100df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b7565b005b3480156100ed57600080fd5b506100f6610676565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014457600080fd5b5061014d61069b565b604051808461ffff1661ffff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101a2578082015181840152602081019050610187565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101e45780820151818401526020810190506101c9565b505050509050019550505050505060405180910390f35b34801561020757600080fd5b506102106106d1565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561023a57600080fd5b5061026f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106e5565b604051808361ffff1661ffff1681526020018261ffff1661ffff1681526020019250505060405180910390f35b3480156102a857600080fd5b506102cb600480360381019080803561ffff169060200190929190505050610716565b604051808215151515815260200191505060405180910390f35b3480156102f157600080fd5b5061039a6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190505050610828565b604051808215151515815260200191505060405180910390f35b3480156103c057600080fd5b5061043460048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803561ffff169060200190929190803561ffff169060200190929190505050610b6e565b604051808215151515815260200191505060405180910390f35b34801561045a57600080fd5b5061049d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050610e62565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105a1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4e439af047d8cc4b00af24c9153b5b998673f7f320f5342909b232ce62ec177c60405160405180910390a450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806060806106ad6001610ff8565b91509150600460009054906101000a900461ffff1682829450945094505050909192565b600460009054906101000a900461ffff1681565b6000806106fc83600161110e90919063ffffffff16565b600460009054906101000a900461ffff1691509150915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610802576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600460006101000a81548161ffff021916908361ffff16021790555060019050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610915576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551118015610927575083518551145b151561099b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496c6c6567616c2061727261797300000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610b6257600084828151811015156109d657fe5b9060200190602002015161ffff16111515610a59576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060","405180910390fd5b610a9d8582815181101515610a6a57fe5b906020019060200201518583815181101515610a8257fe5b90602001906020020151600161119c9092919063ffffffff16565b8481815181101515610aab57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928583815181101515610afa57fe5b9060200190602002015130604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a280806001019150506109bd565b60019150509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60008551111515610cd4576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f496c6c6567616c2077686f73000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008461ffff16111515610d50576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496c6c6567616c2077656967687421000000000000000000000000000000000081525060200191505060405180910390fd5b82600460006101000a81548161ffff021916908361ffff160217905550600090505b8451811015610e5657610da88582815181101515610d8c57fe5b9060200190602002015185600161119c9092919063ffffffff16565b8481815181101515610db657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928530604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a28080600101915050610d72565b60019150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f4e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f57454261736963417574683a206f6e6c79206f776e657220697320617574686f81526020017f72697a65642e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610f648383600161119c9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167fc796118e62640058e33e892ff0633d6a0604ff63a13e2d200a0e2fb29a3dac928330604051808361ffff1661ffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a26001905092915050565b60608082600101836002018180548060200260200160405190810160405280929190818152602001828054801561108457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161103a575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156110fe57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116110c55790505b5050505050905091509150915091565b60008060008460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150846002016001830381548110151561116b57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050809250505092915050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156112f457836001018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508360020182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff1602179055505083600101805490508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611339565b81846002016001830381548110151561130957fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505b505050505600a165627a7a72305820b99d42dfe96990bb4a5f25a6b49cd9e1b3201dc515475bc0d98f6e569cbe9a6a0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requestAddGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeRemoveFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRemoveFunctionToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovs\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint16[]\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAddFunctionToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"approveAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"executeRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"}],\"name\":\"containsFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_voteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"removeFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"deleteSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deleteAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestRemoveFunctionFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewCreateGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernorsToRemove\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestRemoveAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAddAccountToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeRemoveAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inGovs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestAddAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRemoveGovRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeSetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeCreateGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeResetGovernAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRemoveAccountToGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"approveSingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"containsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"executeAddGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeAddAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"},{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"canCallFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"removeAccountFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"transferAdminAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"addFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRequestTxType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"createGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"functio","n\"},{\"constant\":false,\"inputs\":[{\"name\":\"governors\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint16[]\"}],\"name\":\"requestResetGovernors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deleteRemoveGovernorReq\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeAddFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"getRequestSingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAddGovRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"func\",\"type\":\"string\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"requestAddFunctionToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"string\"}],\"name\":\"addAccountToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requestRemoveGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernorsToAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"string\"},{\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"requestCreateGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newThreshold\",\"type\":\"uint16\"}],\"name\":\"requestSetThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mode\",\"type\":\"uint256\"},{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint16[]\"},{\"name\":\"threshold\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"RequestCreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestAddAccountToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestAddFunctionToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestRemoveAccountFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RequestRemoveFunctionFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"AddAccountToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"AddFunctionToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RemoveAccountFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"string\"}],\"name\":\"RemoveFunctionFromGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"weights\",\"type\":\"uint16[]\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"InitWeightData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"RequestSetThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExecuteSetThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"governors\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"weights\",\"type\":\"uint16[]\"}],\"name\":\"RequestResetGovernors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExecuteResetGovernAccounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reqId\",\"type\":\"uint256\"}],\"name\":\"RequestAddGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeleteAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproveAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecuteAddGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RequestRemoveGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeleteRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ApproveRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExecuteRemoveGovernorReq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"ApproveSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txType\",\"type\":\"uint8\"}],\"name\":\"DeleteSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteWeight\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetVoteWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"txType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"requestAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"threshold\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogUnapprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"requestAddress","\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogCanCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminAuth\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_APPROVEREMOVEGOVERNORREQ = "approveRemoveGovernorReq";

    public static final String FUNC_REQUESTADDGOVERNOR = "requestAddGovernor";

    public static final String FUNC_GETREQUESTINFO = "getRequestInfo";

    public static final String FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP = "executeRemoveFunctionFromGroup";

    public static final String FUNC_VIEWREMOVEFUNCTIONTOGROUP = "viewRemoveFunctionToGroup";

    public static final String FUNC_GETGOVS = "getGovs";

    public static final String FUNC_VIEWADDFUNCTIONTOGROUP = "viewAddFunctionToGroup";

    public static final String FUNC_APPROVEADDGOVERNORREQ = "approveAddGovernorReq";

    public static final String FUNC_EXECUTEREMOVEGOVERNORREQ = "executeRemoveGovernorReq";

    public static final String FUNC_CONTAINSFUNCTION = "containsFunction";

    public static final String FUNC__VOTEWEIGHT = "_voteWeight";

    public static final String FUNC_REMOVEFUNCTIONFROMGROUP = "removeFunctionFromGroup";

    public static final String FUNC_DELETESINGLE = "deleteSingle";

    public static final String FUNC_DELETEADDGOVERNORREQ = "deleteAddGovernorReq";

    public static final String FUNC_REQUESTREMOVEFUNCTIONFROMGROUP = "requestRemoveFunctionFromGroup";

    public static final String FUNC_VIEWCREATEGROUP = "viewCreateGroup";

    public static final String FUNC_GETGOVERNORSTOREMOVE = "getGovernorsToRemove";

    public static final String FUNC_REQUESTREMOVEACCOUNTFROMGROUP = "requestRemoveAccountFromGroup";

    public static final String FUNC_VIEWADDACCOUNTTOGROUP = "viewAddAccountToGroup";

    public static final String FUNC_EXECUTEREMOVEACCOUNTFROMGROUP = "executeRemoveAccountFromGroup";

    public static final String FUNC_GETADMIN = "getAdmin";

    public static final String FUNC_INGOVS = "inGovs";

    public static final String FUNC_REQUESTADDACCOUNTTOGROUP = "requestAddAccountToGroup";

    public static final String FUNC_GETREMOVEGOVREQUEST = "getRemoveGovRequest";

    public static final String FUNC_EXECUTESETTHRESHOLD = "executeSetThreshold";

    public static final String FUNC_OPMODE = "opMode";

    public static final String FUNC_EXECUTECREATEGROUP = "executeCreateGroup";

    public static final String FUNC_EXECUTERESETGOVERNACCOUNTS = "executeResetGovernAccounts";

    public static final String FUNC_VIEWREMOVEACCOUNTTOGROUP = "viewRemoveAccountToGroup";

    public static final String FUNC_APPROVESINGLE = "approveSingle";

    public static final String FUNC_CONTAINSACCOUNT = "containsAccount";

    public static final String FUNC_EXECUTEADDGOVERNORREQ = "executeAddGovernorReq";

    public static final String FUNC_GETGROUP = "getGroup";

    public static final String FUNC_GETWEIGHT = "getWeight";

    public static final String FUNC_EXECUTEADDACCOUNTTOGROUP = "executeAddAccountToGroup";

    public static final String FUNC_CANCALLFUNCTION = "canCallFunction";

    public static final String FUNC_REMOVEACCOUNTFROMGROUP = "removeAccountFromGroup";

    public static final String FUNC_TRANSFERADMINAUTH = "transferAdminAuth";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ADDFUNCTIONTOGROUP = "addFunctionToGroup";

    public static final String FUNC_GETREQUESTTXTYPE = "getRequestTxType";

    public static final String FUNC_CREATEGROUP = "createGroup";

    public static final String FUNC_REQUESTRESETGOVERNORS = "requestResetGovernors";

    public static final String FUNC_DELETEREMOVEGOVERNORREQ = "deleteRemoveGovernorReq";

    public static final String FUNC_EXECUTEADDFUNCTIONTOGROUP = "executeAddFunctionToGroup";

    public static final String FUNC_GETVOTEWEIGHT = "getVoteWeight";

    public static final String FUNC_GETREQUESTSINGLE = "getRequestSingle";

    public static final String FUNC_GETADDGOVREQUEST = "getAddGovRequest";

    public static final String FUNC_REQUESTADDFUNCTIONTOGROUP = "requestAddFunctionToGroup";

    public static final String FUNC_ADDACCOUNTTOGROUP = "addAccountToGroup";

    public static final String FUNC_REQUESTREMOVEGOVERNOR = "requestRemoveGovernor";

    public static final String FUNC_GETGOVERNORSTOADD = "getGovernorsToAdd";

    public static final String FUNC_REQUESTCREATEGROUP = "requestCreateGroup";

    public static final String FUNC_REQUESTSETTHRESHOLD = "requestSetThreshold";

    public static final Event REQUESTCREATEGROUP_EVENT = new Event("RequestCreateGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event REQUESTADDACCOUNTTOGROUP_EVENT = new Event("RequestAddAccountToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTADDFUNCTIONTOGROUP_EVENT = new Event("RequestAddFunctionToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTREMOVEACCOUNTFROMGROUP_EVENT = new Event("RequestRemoveAccountFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTREMOVEFUNCTIONFROMGROUP_EVENT = new Event("RequestRemoveFunctionFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEGROUP_EVENT = new Event("CreateGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ADDACCOUNTTOGROUP_EVENT = new Event("AddAccountToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ADDFUNCTIONTOGROUP_EVENT = new Event("AddFunctionToGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEACCOUNTFROMGROUP_EVENT = new Event("RemoveAccountFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEFUNCTIONFROMGROUP_EVENT = new Event("RemoveFunctionFromGroup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INITWEIGHTDATA_EVENT = new Event("InitWeightData", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<Uint16>() {}));
    ;

    public static final Event REQUESTSETTHRESHOLD_EVENT = new Event("RequestSetThreshold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
    ;

    public static final Event EXECUTESETTHRESHOLD_EVENT = new Event("ExecuteSetThreshold", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event REQUESTRESETGOVERNORS_EVENT = new Event("RequestResetGovernors", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event EXECUTERESETGOVERNACCOUNTS_EVENT = new Event("ExecuteResetGovernAccounts", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event REQUESTADDGOVERNOR_EVENT = new Event("RequestAddGovernor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DELETEADDGOVERNORREQ_EVENT = new Event("DeleteAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEADDGOVERNORREQ_EVENT = new Event("ApproveAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event EXECUTEADDGOVERNORREQ_EVENT = new Event("ExecuteAddGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTREMOVEGOVERNOR_EVENT = new Event("RequestRemoveGovernor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DELETEREMOVEGOVERNORREQ_EVENT = new Event("DeleteRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEREMOVEGOVERNORREQ_EVENT = new Event("ApproveRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event EXECUTEREMOVEGOVERNORREQ_EVENT = new Event("ExecuteRemoveGovernorReq", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event APPROVESINGLE_EVENT = new Event("ApproveSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>(true) {}));
    ;

    public static final Event DELETESINGLE_EVENT = new Event("DeleteSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event LOGSETVOTEWEIGHT_EVENT = new Event("LogSetVoteWeight", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGREGISTER_EVENT = new Event("LogRegister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNREGISTER_EVENT = new Event("LogUnregister", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Bool>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGAPPROVE_EVENT = new Event("LogApprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGUNAPPROVE_EVENT = new Event("LogUnapprove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGCANCALL_EVENT = new Event("LogCanCall", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFERADMINAUTH_EVENT = new Event("TransferAdminAuth", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected AuthManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt approveRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getApproveRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt requestAddGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddGovernor(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRequestAddGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestInfo(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTINFO, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt executeRemoveFunctionFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveFunctionFromGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveFunctionFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> viewRemoveFunctionToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWREMOVEFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public Tuple3<List<String>, List<BigInteger>, BigInteger> getGovs() throws ContractException {
        final Function function = new Function(FUNC_GETGOVS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint16>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple3<String, String, String> viewAddFunctionToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public TransactionReceipt approveAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getApproveAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt executeRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExecuteRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean containsFunction(String group, String contractAddr, String func) throws ContractException {
        final Function function = new Function(FUNC_CONTAINSFUNCTION, 
                Arrays.<Type>asList(new Utf8String(group),
                new Address(contractAddr),
                new Utf8String(func)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String _voteWeight() throws ContractException {
        final Function function = new Function(FUNC__VOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeFunctionFromGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveFunctionFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt deleteSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteSingle(BigInteger txType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_DELETESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteSingleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETESINGLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt requestRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveFunctionFromGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveFunctionFromGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRequestRemoveFunctionFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEFUNCTIONFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<String, BigInteger> viewCreateGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWCREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public List getGovernorsToRemove() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNORSTOREMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt requestRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveAccountFromGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRequestRemoveAccountFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<String, String> viewAddAccountToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt executeRemoveAccountFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeRemoveAccountFromGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteRemoveAccountFromGroup() {
        final Function function = new Function(
                FUNC_EXECUTEREMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAdmin() throws ContractException {
        final Function function = new Function(FUNC_GETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean inGovs() throws ContractException {
        final Function function = new Function(FUNC_INGOVS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt requestAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddAccountToGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRequestAddAccountToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRemoveGovRequest(String account) throws ContractException {
        final Function function = new Function(FUNC_GETREMOVEGOVREQUEST, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt executeSetThreshold() {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeSetThreshold(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteSetThreshold() {
        final Function function = new Function(
                FUNC_EXECUTESETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger opMode() throws ContractException {
        final Function function = new Function(FUNC_OPMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt executeCreateGroup() {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeCreateGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteCreateGroup() {
        final Function function = new Function(
                FUNC_EXECUTECREATEGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt executeResetGovernAccounts() {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeResetGovernAccounts(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteResetGovernAccounts() {
        final Function function = new Function(
                FUNC_EXECUTERESETGOVERNACCOUNTS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> viewRemoveAccountToGroup() throws ContractException {
        final Function function = new Function(FUNC_VIEWREMOVEACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt approveSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveSingle(BigInteger txType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveSingle(BigInteger txType) {
        final Function function = new Function(
                FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getApproveSingleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVESINGLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean containsAccount(String group, String account) throws ContractException {
        final Function function = new Function(FUNC_CONTAINSACCOUNT, 
                Arrays.<Type>asList(new Utf8String(group),
                new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt executeAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddGovernorReq(String account) {
        final Function function = new Function(
                FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExecuteAddGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTEADDGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getGroup(String group) throws ContractException {
        final Function function = new Function(FUNC_GETGROUP, 
                Arrays.<Type>asList(new Utf8String(group)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple2<BigInteger, BigInteger> getWeight(String who) throws ContractException {
        final Function function = new Function(FUNC_GETWEIGHT, 
                Arrays.<Type>asList(new Address(who)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt executeAddAccountToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddAccountToGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddAccountToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Boolean canCallFunction(String contractAddr, byte[] sig, String caller) throws ContractException {
        final Function function = new Function(FUNC_CANCALLFUNCTION, 
                Arrays.<Type>asList(new Address(contractAddr),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(sig), 
                new Address(caller)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt removeAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeAccountFromGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveAccountFromGroup(String account, String group) {
        final Function function = new Function(
                FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveAccountFromGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEACCOUNTFROMGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt transferAdminAuth(String newAdminAddr) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new Address(newAdminAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferAdminAuth(String newAdminAddr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new Address(newAdminAddr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferAdminAuth(String newAdminAddr) {
        final Function function = new Function(
                FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(new Address(newAdminAddr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getTransferAdminAuthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERADMINAUTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean isAdmin() throws ContractException {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addFunctionToGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getAddFunctionToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<BigInteger, String> getRequestTxType(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTTXTYPE, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt createGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createGroup(String group, BigInteger mode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_CREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCreateGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestResetGovernors(List<String> governors, List<BigInteger> weights) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, Address.class)),
                weights.isEmpty()? DynamicArray.empty("uint16[]"):new DynamicArray<Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, Uint16.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestResetGovernors(List<String> governors, List<BigInteger> weights, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, Address.class)),
                weights.isEmpty()? DynamicArray.empty("uint16[]"):new DynamicArray<Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, Uint16.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestResetGovernors(List<String> governors, List<BigInteger> weights) {
        final Function function = new Function(
                FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(governors.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governors, Address.class)),
                weights.isEmpty()? DynamicArray.empty("uint16[]"):new DynamicArray<Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, Uint16.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, List<BigInteger>> getRequestResetGovernorsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTRESETGOVERNORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, List<BigInteger>>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint16>) results.get(1).getValue())
                );
    }

    public TransactionReceipt deleteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteRemoveGovernorReq(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteRemoveGovernorReq(String account) {
        final Function function = new Function(
                FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteRemoveGovernorReqInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEREMOVEGOVERNORREQ, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt executeAddFunctionToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void executeAddFunctionToGroup(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExecuteAddFunctionToGroup() {
        final Function function = new Function(
                FUNC_EXECUTEADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getVoteWeight() throws ContractException {
        final Function function = new Function(FUNC_GETVOTEWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getRequestSingle(BigInteger txType) throws ContractException {
        final Function function = new Function(FUNC_GETREQUESTSINGLE, 
                Arrays.<Type>asList(new Uint8(txType)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger> getAddGovRequest(String account) throws ContractException {
        final Function function = new Function(FUNC_GETADDGOVREQUEST, 
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt requestAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestAddFunctionToGroup(String contractAddr, String func, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestAddFunctionToGroup(String contractAddr, String func, String group) {
        final Function function = new Function(
                FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(new Address(contractAddr),
                new Utf8String(func),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRequestAddFunctionToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTADDFUNCTIONTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt addAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAccountToGroup(String account, String group, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAccountToGroup(String account, String group) {
        final Function function = new Function(
                FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(new Address(account),
                new Utf8String(group)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddAccountToGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDACCOUNTTOGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestRemoveGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestRemoveGovernor(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestRemoveGovernor(String account) {
        final Function function = new Function(
                FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(new Address(account)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRequestRemoveGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTREMOVEGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getGovernorsToAdd() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNORSTOADD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt requestCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestCreateGroup(String group, BigInteger mode, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestCreateGroup(String group, BigInteger mode) {
        final Function function = new Function(
                FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(new Utf8String(group),
                new Uint8(mode)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRequestCreateGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTCREATEGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestSetThreshold(BigInteger newThreshold) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new Uint16(newThreshold)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestSetThreshold(BigInteger newThreshold, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new Uint16(newThreshold)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestSetThreshold(BigInteger newThreshold) {
        final Function function = new Function(
                FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(new Uint16(newThreshold)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRequestSetThresholdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTSETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<RequestCreateGroupEventResponse> getRequestCreateGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTCREATEGROUP_EVENT, transactionReceipt);
        ArrayList<RequestCreateGroupEventResponse> responses = new ArrayList<RequestCreateGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestCreateGroupEventResponse typedResponse = new RequestCreateGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestCreateGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTCREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestCreateGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTCREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddAccountToGroupEventResponse> getRequestAddAccountToGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDACCOUNTTOGROUP_EVENT, transactionReceipt);
        ArrayList<RequestAddAccountToGroupEventResponse> responses = new ArrayList<RequestAddAccountToGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestAddAccountToGroupEventResponse typedResponse = new RequestAddAccountToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddAccountToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddAccountToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddFunctionToGroupEventResponse> getRequestAddFunctionToGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDFUNCTIONTOGROUP_EVENT, transactionReceipt);
        ArrayList<RequestAddFunctionToGroupEventResponse> responses = new ArrayList<RequestAddFunctionToGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestAddFunctionToGroupEventResponse typedResponse = new RequestAddFunctionToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddFunctionToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddFunctionToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveAccountFromGroupEventResponse> getRequestRemoveAccountFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEACCOUNTFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RequestRemoveAccountFromGroupEventResponse> responses = new ArrayList<RequestRemoveAccountFromGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestRemoveAccountFromGroupEventResponse typedResponse = new RequestRemoveAccountFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveAccountFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveAccountFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveFunctionFromGroupEventResponse> getRequestRemoveFunctionFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RequestRemoveFunctionFromGroupEventResponse> responses = new ArrayList<RequestRemoveFunctionFromGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestRemoveFunctionFromGroupEventResponse typedResponse = new RequestRemoveFunctionFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveFunctionFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveFunctionFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateGroupEventResponse> getCreateGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEGROUP_EVENT, transactionReceipt);
        ArrayList<CreateGroupEventResponse> responses = new ArrayList<CreateGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateGroupEventResponse typedResponse = new CreateGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddAccountToGroupEventResponse> getAddAccountToGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDACCOUNTTOGROUP_EVENT, transactionReceipt);
        ArrayList<AddAccountToGroupEventResponse> responses = new ArrayList<AddAccountToGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddAccountToGroupEventResponse typedResponse = new AddAccountToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddAccountToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddAccountToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDACCOUNTTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddFunctionToGroupEventResponse> getAddFunctionToGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDFUNCTIONTOGROUP_EVENT, transactionReceipt);
        ArrayList<AddFunctionToGroupEventResponse> responses = new ArrayList<AddFunctionToGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddFunctionToGroupEventResponse typedResponse = new AddFunctionToGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddFunctionToGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddFunctionToGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDFUNCTIONTOGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveAccountFromGroupEventResponse> getRemoveAccountFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEACCOUNTFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RemoveAccountFromGroupEventResponse> responses = new ArrayList<RemoveAccountFromGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveAccountFromGroupEventResponse typedResponse = new RemoveAccountFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveAccountFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveAccountFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEACCOUNTFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveFunctionFromGroupEventResponse> getRemoveFunctionFromGroupEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEFUNCTIONFROMGROUP_EVENT, transactionReceipt);
        ArrayList<RemoveFunctionFromGroupEventResponse> responses = new ArrayList<RemoveFunctionFromGroupEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveFunctionFromGroupEventResponse typedResponse = new RemoveFunctionFromGroupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractAddr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.func = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.group = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveFunctionFromGroupEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveFunctionFromGroupEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEFUNCTIONFROMGROUP_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InitWeightDataEventResponse> getInitWeightDataEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INITWEIGHTDATA_EVENT, transactionReceipt);
        ArrayList<InitWeightDataEventResponse> responses = new ArrayList<InitWeightDataEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InitWeightDataEventResponse typedResponse = new InitWeightDataEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.accounts = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInitWeightDataEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INITWEIGHTDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInitWeightDataEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INITWEIGHTDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestSetThresholdEventResponse> getRequestSetThresholdEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTSETTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<RequestSetThresholdEventResponse> responses = new ArrayList<RequestSetThresholdEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestSetThresholdEventResponse typedResponse = new RequestSetThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestSetThresholdEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTSETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestSetThresholdEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTSETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteSetThresholdEventResponse> getExecuteSetThresholdEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTESETTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<ExecuteSetThresholdEventResponse> responses = new ArrayList<ExecuteSetThresholdEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteSetThresholdEventResponse typedResponse = new ExecuteSetThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteSetThresholdEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTESETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteSetThresholdEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTESETTHRESHOLD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestResetGovernorsEventResponse> getRequestResetGovernorsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTRESETGOVERNORS_EVENT, transactionReceipt);
        ArrayList<RequestResetGovernorsEventResponse> responses = new ArrayList<RequestResetGovernorsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestResetGovernorsEventResponse typedResponse = new RequestResetGovernorsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.governors = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestResetGovernorsEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTRESETGOVERNORS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestResetGovernorsEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTRESETGOVERNORS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteResetGovernAccountsEventResponse> getExecuteResetGovernAccountsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTERESETGOVERNACCOUNTS_EVENT, transactionReceipt);
        ArrayList<ExecuteResetGovernAccountsEventResponse> responses = new ArrayList<ExecuteResetGovernAccountsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteResetGovernAccountsEventResponse typedResponse = new ExecuteResetGovernAccountsEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteResetGovernAccountsEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTERESETGOVERNACCOUNTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteResetGovernAccountsEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTERESETGOVERNACCOUNTS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddGovernorEventResponse> getRequestAddGovernorEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDGOVERNOR_EVENT, transactionReceipt);
        ArrayList<RequestAddGovernorEventResponse> responses = new ArrayList<RequestAddGovernorEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestAddGovernorEventResponse typedResponse = new RequestAddGovernorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reqId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddGovernorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddGovernorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteAddGovernorReqEventResponse> getDeleteAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<DeleteAddGovernorReqEventResponse> responses = new ArrayList<DeleteAddGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteAddGovernorReqEventResponse typedResponse = new DeleteAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveAddGovernorReqEventResponse> getApproveAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ApproveAddGovernorReqEventResponse> responses = new ArrayList<ApproveAddGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveAddGovernorReqEventResponse typedResponse = new ApproveAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteAddGovernorReqEventResponse> getExecuteAddGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEADDGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ExecuteAddGovernorReqEventResponse> responses = new ArrayList<ExecuteAddGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteAddGovernorReqEventResponse typedResponse = new ExecuteAddGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteAddGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteAddGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEADDGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestRemoveGovernorEventResponse> getRequestRemoveGovernorEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTREMOVEGOVERNOR_EVENT, transactionReceipt);
        ArrayList<RequestRemoveGovernorEventResponse> responses = new ArrayList<RequestRemoveGovernorEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestRemoveGovernorEventResponse typedResponse = new RequestRemoveGovernorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestRemoveGovernorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestRemoveGovernorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTREMOVEGOVERNOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteRemoveGovernorReqEventResponse> getDeleteRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<DeleteRemoveGovernorReqEventResponse> responses = new ArrayList<DeleteRemoveGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteRemoveGovernorReqEventResponse typedResponse = new DeleteRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveRemoveGovernorReqEventResponse> getApproveRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ApproveRemoveGovernorReqEventResponse> responses = new ArrayList<ApproveRemoveGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveRemoveGovernorReqEventResponse typedResponse = new ApproveRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ExecuteRemoveGovernorReqEventResponse> getExecuteRemoveGovernorReqEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTEREMOVEGOVERNORREQ_EVENT, transactionReceipt);
        ArrayList<ExecuteRemoveGovernorReqEventResponse> responses = new ArrayList<ExecuteRemoveGovernorReqEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecuteRemoveGovernorReqEventResponse typedResponse = new ExecuteRemoveGovernorReqEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeExecuteRemoveGovernorReqEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeExecuteRemoveGovernorReqEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EXECUTEREMOVEGOVERNORREQ_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApproveSingleEventResponse> getApproveSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVESINGLE_EVENT, transactionReceipt);
        ArrayList<ApproveSingleEventResponse> responses = new ArrayList<ApproveSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveSingleEventResponse typedResponse = new ApproveSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApproveSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApproveSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteSingleEventResponse> getDeleteSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELETESINGLE_EVENT, transactionReceipt);
        ArrayList<DeleteSingleEventResponse> responses = new ArrayList<DeleteSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeleteSingleEventResponse typedResponse = new DeleteSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETESINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetVoteWeightEventResponse> getLogSetVoteWeightEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETVOTEWEIGHT_EVENT, transactionReceipt);
        ArrayList<LogSetVoteWeightEventResponse> responses = new ArrayList<LogSetVoteWeightEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogSetVoteWeightEventResponse typedResponse = new LogSetVoteWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voteWeight = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetVoteWeightEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetVoteWeightEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVOTEWEIGHT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogRegisterEventResponse> getLogRegisterEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGREGISTER_EVENT, transactionReceipt);
        ArrayList<LogRegisterEventResponse> responses = new ArrayList<LogRegisterEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogRegisterEventResponse typedResponse = new LogRegisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.txType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogRegisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogRegisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnregisterEventResponse> getLogUnregisterEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNREGISTER_EVENT, transactionReceipt);
        ArrayList<LogUnregisterEventResponse> responses = new ArrayList<LogUnregisterEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogUnregisterEventResponse typedResponse = new LogUnregisterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.result = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnregisterEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnregisterEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNREGISTER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogApproveEventResponse> getLogApproveEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogApproveEventResponse> responses = new ArrayList<LogApproveEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogApproveEventResponse typedResponse = new LogApproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogApproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogApproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogUnapproveEventResponse> getLogUnapproveEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNAPPROVE_EVENT, transactionReceipt);
        ArrayList<LogUnapproveEventResponse> responses = new ArrayList<LogUnapproveEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogUnapproveEventResponse typedResponse = new LogUnapproveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.who = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.b = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogUnapproveEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogUnapproveEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGUNAPPROVE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogCanCallEventResponse> getLogCanCallEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCANCALL_EVENT, transactionReceipt);
        ArrayList<LogCanCallEventResponse> responses = new ArrayList<LogCanCallEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogCanCallEventResponse typedResponse = new LogCanCallEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.requestAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogCanCallEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogCanCallEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGCANCALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferAdminAuthEventResponse> getTransferAdminAuthEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERADMINAUTH_EVENT, transactionReceipt);
        ArrayList<TransferAdminAuthEventResponse> responses = new ArrayList<TransferAdminAuthEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferAdminAuthEventResponse typedResponse = new TransferAdminAuthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferAdminAuthEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERADMINAUTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferAdminAuthEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERADMINAUTH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AuthManager load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AuthManager(contractAddress, client, credential);
    }

    public static AuthManager deploy(Client client, CryptoKeyPair credential, BigInteger mode, List<String> accounts, List<BigInteger> weights, BigInteger threshold) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Uint256(mode),
                accounts.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(accounts, Address.class)),
                weights.isEmpty()? DynamicArray.empty("uint16[]"):new DynamicArray<Uint16>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weights, Uint16.class)),
                new Uint16(threshold)));
        return deploy(AuthManager.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class RequestCreateGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String group;

        public BigInteger mode;
    }

    public static class RequestAddAccountToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RequestAddFunctionToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class RequestRemoveAccountFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RequestRemoveFunctionFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class CreateGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String group;

        public BigInteger mode;
    }

    public static class AddAccountToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class AddFunctionToGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class RemoveAccountFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String group;
    }

    public static class RemoveFunctionFromGroupEventResponse {
        public TransactionReceipt.Logs log;

        public String contractAddr;

        public String func;

        public String group;
    }

    public static class InitWeightDataEventResponse {
        public TransactionReceipt.Logs log;

        public List<String> accounts;

        public List<BigInteger> weights;

        public BigInteger threshold;
    }

    public static class RequestSetThresholdEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger threshold;
    }

    public static class ExecuteSetThresholdEventResponse {
        public TransactionReceipt.Logs log;
    }

    public static class RequestResetGovernorsEventResponse {
        public TransactionReceipt.Logs log;

        public List<String> governors;

        public List<BigInteger> weights;
    }

    public static class ExecuteResetGovernAccountsEventResponse {
        public TransactionReceipt.Logs log;
    }

    public static class RequestAddGovernorEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public BigInteger reqId;
    }

    public static class DeleteAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ExecuteAddGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class RequestRemoveGovernorEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class DeleteRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ExecuteRemoveGovernorReqEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ApproveSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class DeleteSingleEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger txType;
    }

    public static class LogSetVoteWeightEventResponse {
        public TransactionReceipt.Logs log;

        public String voteWeight;

        public String contractAddress;
    }

    public static class LogRegisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public BigInteger txType;

        public String requestAddress;

        public BigInteger threshold;

        public String contractAddress;
    }

    public static class LogUnregisterEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public Boolean result;

        public String contractAddress;
    }

    public static class LogApproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogUnapproveEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String who;

        public Boolean b;

        public String contractAddress;
    }

    public static class LogCanCallEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String requestAddress;

        public String contractAddress;
    }

    public static class TransferAdminAuthEventResponse {
        public TransactionReceipt.Logs log;

        public String oldAdmin;

        public String newAdmin;
    }
}
