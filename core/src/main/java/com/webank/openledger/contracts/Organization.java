package com.webank.openledger.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.webank.openledger.core.common.BaseCustody;
import com.webank.openledger.core.common.BaseHolder;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Organization extends Contract implements BaseCustody, BaseHolder {
    public static final String[] BINARY_ARRAY = {"","","5180910390f35b348015610ebe57600080fd5b50610ec7617752565b604051610ed4919061d686565b60405180910390f35b348015610ee957600080fd5b50610ef2617778565b604051610eff919061d686565b60405180910390f35b348015610f1457600080fd5b50610f2f6004803603610f2a919081019061cbbc565b61779e565b005b348015610f3d57600080fd5b50610f586004803603610f53919081019061c4dd565b617d61565b604051610f65919061dfb7565b60405180910390f35b348015610f7a57600080fd5b50610f956004803603610f90919081019061cb55565b617f5d565b604051610fa2919061dc95565b60405180910390f35b348015610fb757600080fd5b50610fd26004803603610fcd919081019061bfbf565b6183b9565b604051610fdf919061dfb7565b60405180910390f35b348015610ff457600080fd5b5061100f600480360361100a919081019061c086565b6185b5565b60405161101e9392919061dfd2565b60405180910390f35b34801561103357600080fd5b5061104e6004803603611049919081019061c4dd565b6187c5565b60405161105b919061dc95565b60405180910390f35b34801561107057600080fd5b5061108b6004803603611086919081019061cc8f565b6189c1565b60405161109992919061d95c565b60405180910390f35b3480156110ae57600080fd5b506110b7618c5d565b6040516110c4919061d686565b60405180910390f35b3480156110d957600080fd5b506110f460048036036110ef919081019061c44a565b618c87565b604051611101919061dc95565b60405180910390f35b34801561111657600080fd5b50611131600480360361112c919081019061bf6d565b618f60565b60405161113e919061dc95565b60405180910390f35b34801561115357600080fd5b5061116e6004803603611169919081019061c218565b618fba565b60405161117b919061dc95565b60405180910390f35b34801561119057600080fd5b506111ab60048036036111a6919081019061c4dd565b619206565b6040516111bb949392919061dadd565b60405180910390f35b3480156111d057600080fd5b506111eb60048036036111e6919081019061c254565b619414565b6040516111f8919061dfb7565b60405180910390f35b34801561120d57600080fd5b5061121661960d565b604051611223919061dc95565b60405180910390f35b34801561123857600080fd5b50611253600480360361124e919081019061c637565b619774565b604051611260919061dc95565b60405180910390f35b34801561127557600080fd5b50611290600480360361128b919081019061c146565b619976565b60405161129e92919061dcd9565b60405180910390f35b3480156112b357600080fd5b506112ce60048036036112c9919081019061ce20565b619b86565b6040516112db919061d686565b60405180910390f35b3480156112f057600080fd5b5061130b6004803603611306919081019061ccf6565b619e3c565b604051611318919061dc95565b60405180910390f35b34801561132d57600080fd5b506113486004803603611343919081019061c218565b61a131565b604051611355919061dc95565b60405180910390f35b34801561136a57600080fd5b506113856004803603611380919081019061ca48565b61a1a3565b604051611392919061dabb565b60405180910390f35b6000816040805190810160405280600781526020017f616464426f6f6b000000000000000000000000000000000000000000000000008152506113f38573ffffffffffffffffffffffffffffffffffffffff1661a342565b611434836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b61147c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b9015156114bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b6919061dd92565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561152457600080fd5b505af1158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061155c919081019061c9a7565b1561163157600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631484861e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115d8919061d686565b602060405180830381600087803b1580156115f257600080fd5b505af1158015611606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061162a919081019061ce9f565b93506116fd565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631484861e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116a8919061d686565b602060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116fa919081019061ce9f565b93505b50505092915050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561178f57600080fd5b505af11580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117c7919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161181b919061d686565b602060405180830381600087803b15801561183557600080fd5b505af1158015611849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061186d919081019061bf96565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061de37565b60405180910390fd5b6119466040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250858560048060200260405190810160405280929190826004602002808284378201915050505050617f5d565b50600191505092915050565b600082156119755761196e82601561aa7a90919063ffffffff16565b905061198c565b61198982601361aa7a90919063ffffffff16565b90505b92915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000816040805190810160405280601081526020017f676574546f74616c4e6f746553697a6500000000000000000000000000000000815250611a148673ffffffffffffffffffffffffffffffffffffffff1661a342565b611a55836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b611a9d836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad7919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd28baf588886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b5a92919061d9c3565b602060405180830381600087803b158015611b7457600080fd5b505af1158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bac919081019061c9a7565b93505050509392505050565b601260149054906101000a900460ff1681565b6060816040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250611c238873ffffffffffffffffffffffffffffffffffffffff1661a342565b611c64836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b611cac836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515611cef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce6919061dd92565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8c919081019061c9a7565b15611e6c57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e0e949392919061d902565b600060405180830381600087803b158015611e2857600080fd5b505af1158015611e3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611e65919081019061c890565b9350611f43565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a","","ffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee379d58c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f1795949392919061d89a565b606060405180830381600087803b158015612f3157600080fd5b505af1158015612f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f69919081019061ca84565b94509450505050965096945050505050565b6000612f8561b66c565b826040805190810160405280600a81526020017f7769746864726177616c00000000000000000000000000000000000000000000815250612fdb8a73ffffffffffffffffffffffffffffffffffffffff1661a342565b61301c836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b613064836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b9015156130a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309e919061dd92565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bc015308c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161312795949392919061d89a565b606060405180830381600087803b15801561314157600080fd5b505af1158015613155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613179919081019061ca84565b94509450505050965096945050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156131d6576131cf83858361aba6565b9150613202565b6131ff83856131fa8873ffffffffffffffffffffffffffffffffffffffff1661a342565b61aba6565b91505b509392505050565b6000816040805190810160405280600b81526020017f6f70656e4163636f756e740000000000000000000000000000000000000000008152506132628673ffffffffffffffffffffffffffffffffffffffff1661a342565b6132a3836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6132eb836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561332e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613325919061dd92565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561339357600080fd5b505af11580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133cb919081019061c9a7565b156134a257600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371fe98bc88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161344992919061d6a1565b602060405180830381600087803b15801561346357600080fd5b505af1158015613477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061349b919081019061c9a7565b9350613570565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa15b38988886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161351b92919061d6a1565b602060405180830381600087803b15801561353557600080fd5b505af1158015613549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061356d919081019061c9a7565b93505b5050509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f74657300000000000000000000000000000000000000008152506135d28573ffffffffffffffffffffffffffffffffffffffff1661a342565b613613836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b61365b836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561369e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613695919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d070b15876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613716919061d686565b600060405180830381600087803b15801561373057600080fd5b505af1158015613744573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061376d919081019061c8d1565b935050505092915050565b60006137df6040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250848460048060200260405190810160405280929190826004602002808284378201915050505050617231565b506001905092915050565b606080826040805190810160405280601181526020017f6765744e6f746550726f706572746965730000000000000000000000000000008152506138438773ffffffffffffffffffffffffffffffffffffffff1661a342565b613884836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6138cc836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561390f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613906919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395e2847889896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161398992919061d9c3565b600060405180830381600087803b1580156139a357600080fd5b505af11580156139b7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506139e0919081019061c824565b94509450505050935093915050565b6000613abb86600480602002604051908101604052809291908260046020028082843782019150505050506040805190810160405280600681526020017f4d454d424552000000000000000000000000000000000000000000000000000081525087878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505086868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061a421565b905095945050505050565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613bb39392919061d985565b602060405180830381600087803b158015613bcd57600080fd5b505af1158015613be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613c05919081019061c9a7565b613c4d836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a8a990919063ffffffff16565b901515613c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c87919061dd92565b60405180910390fd5b50601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d8189308a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d0e949392919061d7fb565b600060405180830381600087803b158015613d2857600080fd5b505af1158015613d3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613d65919081019061c8d1565b9350505050949350505050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015613e205750600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515613e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e589061df57565b60405180910390fd5b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c01","00000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613ee757600080fd5b505af1158015613efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613f1f919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f73919061d686565b602060405180830381600087803b158015613f8d57600080fd5b505af1158015613fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fc5919081019061bf96565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515614039576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140309061de37565b60405180910390fd5b6140428161af56565b80915050919050565b6000816040805190810160405280600881526020017f73657450726963650000000000000000000000000000000000000000000000008152506140a38673ffffffffffffffffffffffffffffffffffffffff1661a342565b6140e4836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b61412c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561416f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614166919061dd92565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156141d457600080fd5b505af11580156141e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061420c919081019061c9a7565b156142e257600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161428992919061d9c3565b602060405180830381600087803b1580156142a357600080fd5b505af11580156142b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506142db919081019061ce9f565b93506143af565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161435a92919061d9c3565b602060405180830381600087803b15801561437457600080fd5b505af1158015614388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506143ac919081019061ce9f565b93505b5050509392505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806144645750601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156144a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161449c9061df97565b60405180910390fd5b6144ad61540a565b15156144ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016144e59061df77565b60405180910390fd5b6001601260146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e3060405161455a919061dd77565b60405180910390a26001905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156145fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016145f59061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b60208310151561464e5780518252602082019150602081019050602083039250614629565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156146fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146f29061de57565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6d729ea600a876040518082805190602001908083835b602083101515614771578051825260208201915060208101905060208303925061474c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161480595949392919061d799565b602060405180830381600087803b15801561481f57600080fd5b505af1158015614833573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614857919081019061c9a7565b9050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156148f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148ed9061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156149465780518252602082019150602081019050602083039250614921565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156149f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149ea9061de57565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf09f8c9600a876040518082805190602001908083835b602083101515614a695780518252602082019150602081019050602083039250614a44565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614afd95949392919061d799565b602060405180830381600087803b158015614b1757600080fd5b505af1158015614b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614b4f919081019061c9a7565b9050949350505050565b60608115614b7257614b6b600261afe7565b9050614b7f565b614b7c600061afe7565b90505b919050565b6000816040805190810160405280600681526020017f667265657a650000000000000000000000000000000000000000000000000000815250614bdc8573ffffffffffffffffffffffffffffffffffffffff1661a342565b614c1d836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b614c65836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515614ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c9f919061dd92565b60405180910390fd5b50600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638428f258876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d20919061d686565b602060405180830381600087803b158015614d3a57600080fd5b505af1158015614d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d72919081019061c9a7565b935050505092915050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480614e285750601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515614e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614e609061df97565b60405180910390fd5b6001601260149054906101000a900460ff1660ff16141515614ec0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152","600401614eb79061df77565b60405180910390fd5b6000601260146101000a81548160ff021916908360ff1602179055507f756e667265657a650000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051614f2c919061dd77565b60405180910390a26001905090565b6000816040805190810160405280600b81526020017f656e61626c654261746368000000000000000000000000000000000000000000815250614f938673ffffffffffffffffffffffffffffffffffffffff1661a342565b614fd4836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b61501c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561505f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615056919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae70aa3f88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016150d992919061d9c3565b602060405180830381600087803b1580156150f357600080fd5b505af1158015615107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061512b919081019061c9a7565b93505050509392505050565b600061520386600480602002604051908101604052809291908260046020028082843782019150505050506040805190810160405280600581526020017f41444d494e00000000000000000000000000000000000000000000000000000081525087878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505086868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061a421565b905095945050505050565b6000816040805190810160405280601281526020017f6765744163636f756e744e6f746553697a6500000000000000000000000000008152506152668673ffffffffffffffffffffffffffffffffffffffff1661a342565b6152a7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6152ef836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515615332576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615329919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633dcb991a88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153ac92919061d6a1565b602060405180830381600087803b1580156153c657600080fd5b505af11580156153da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506153fe919081019061ce9f565b93505050509392505050565b600080601260149054906101000a900460ff1660ff1614905090565b606080826040805190810160405280601481526020017f7570646174654e6f746550726f7065727469657300000000000000000000000081525061547f8973ffffffffffffffffffffffffffffffffffffffff1661a342565b6154c0836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b615508836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561554b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615542919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663513014b78b8b8b8b6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155c9949392919061d9ec565b600060405180830381600087803b1580156155e357600080fd5b505af11580156155f7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250615620919081019061c824565b945094505050509550959350505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156156c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016156bf9061de77565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561574e57600080fd5b505af1158015615762573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615786919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016157da919061d686565b602060405180830381600087803b1580156157f457600080fd5b505af1158015615808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061582c919081019061bf96565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fc326ff30838888886040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016158ad95949392919061d799565b602060405180830381600087803b1580156158c757600080fd5b505af11580156158db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506158ff919081019061c9a7565b915050949350505050565b6000816040805190810160405280601081526020017f676574546f74616c4e6f746553697a65000000000000000000000000000000008152506159628573ffffffffffffffffffffffffffffffffffffffff1661a342565b6159a3836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6159eb836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515615a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615a25919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bfe0e71d876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615aa6919061d686565b602060405180830381600087803b158015615ac057600080fd5b505af1158015615ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615af8919081019061ce9f565b935050505092915050565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615b969392919061d985565b602060405180830381600087803b158015615bb057600080fd5b505af1158015615bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615be8919081019061c9a7565b615c30836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a8a990919063ffffffff16565b901515615c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615c6a919061dd92565b60405180910390fd5b50601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634c433cab88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615ced92919061d9c3565b602060405180830381600087803b158015615d0757600080fd5b505af1158015615d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615d3f919081019061c9a7565b93505050509392505050565b6000816040805190810160405280600c81526020017f7570646174654e6f74654e6f0000000000000000000000000000000000000000815250615da38773ffffffffffffffffffffffffffffffffffffffff1661a342565b615de4836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b615e2c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515615e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615e66919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6","","6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616ed8919081019061ca0c565b8096508197505050600d8590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001859750975050505050505094509492505050565b60606004805480602002602001604051908101604052809291908181526020018280548015616fe057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311616f96575b5050505050905090565b6000826040805190810160405280600a81526020017f67657442616c616e636500000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161707d9392919061d985565b602060405180830381600087803b15801561709757600080fd5b505af11580156170ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506170cf919081019061c9a7565b617117836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a8a990919063ffffffff16565b90151561715a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617151919061dd92565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d87306040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016171d492919061d6a1565b602060405180830381600087803b1580156171ee57600080fd5b505af1158015617202573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617226919081019061ce9f565b935050505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156172c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016172bf9061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b60208310151561731857805182526020820191506020810190506020830392506172f3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156173c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016173bc9061de57565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561744b57600080fd5b505af115801561745f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617483919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016174d7919061d686565b602060405180830381600087803b1580156174f157600080fd5b505af1158015617505573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617529919081019061bf96565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fce41caf826009886040518082805190602001908083835b6020831015156175a2578051825260208201915060208101905060208303925061757d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016176319392919061d6ca565b602060405180830381600087803b15801561764b57600080fd5b505af115801561765f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617683919081019061c9a7565b9150509392505050565b6000601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663124b65b46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561771557600080fd5b505af1158015617729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061774d919081019061bf96565b905090565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161782c9061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b6020831015156178855780518252602082019150602081019050602083039250617860565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515617931576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016179289061df37565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8a0be656179a06179913073ffffffffffffffffffffffffffffffffffffffff1661b079565b8761a8a990919063ffffffff16565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016179da92919061ddb4565b602060405180830381600087803b1580156179f457600080fd5b505af1158015617a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617a2c919081019061bf96565b9150816009856040518082805190602001908083835b602083101515617a675780518252602082019150602081019050602083039250617a42565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636138685f846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617b4f919061db83565b602060405180830381600087803b158015617b6957600080fd5b505af1158015617b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617ba1919081019061bf96565b905080600a856040518082805190602001908083835b602083101515617bdc5780518252602082019150602081019050602083039250617bb7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663578933378383866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617cc89392919061d6ca565b602060405180830381600087803b158015617ce257600080fd5b505af1158015617cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617d1a919081019061c9a7565b1515617d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617d529061deb7565b60405180910390fd5b50505050565b6000816040805190810160405280600781526020017f7365745261746500000000000000000000000000000000000000000000000000815250617db98673ffffffffffffffffffffffffffffffffffffffff1661a342565b617dfa836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b617e42836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515617e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617e7c919061dd92565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ff","ffffffffffffffffffffffffffffffffffffff16632bdb709788886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617eff92919061d9c3565b602060405180830381600087803b158015617f1957600080fd5b505af1158015617f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617f51919081019061ce9f565b93505050509392505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617ff4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617feb9061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515618044578051825260208201915060208101905060208303925061801f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156180f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016180e89061de57565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561817757600080fd5b505af115801561818b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506181af919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618203919061d686565b602060405180830381600087803b15801561821d57600080fd5b505af1158015618231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618255919081019061bf96565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635270933d826009886040518082805190602001908083835b6020831015156182ce57805182526020820191506020810190506020830392506182a9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161835d9392919061d6ca565b602060405180830381600087803b15801561837757600080fd5b505af115801561838b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506183af919081019061c9a7565b9150509392505050565b6000816040805190810160405280600a81526020017f67657442616c616e6365000000000000000000000000000000000000000000008152506184118673ffffffffffffffffffffffffffffffffffffffff1661a342565b618452836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b61849a836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b9015156184dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016184d4919061dd92565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161855792919061d6a1565b602060405180830381600087803b15801561857157600080fd5b505af1158015618585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506185a9919081019061ce9f565b93505050509392505050565b6000606080836040805190810160405280600581526020017f69737375650000000000000000000000000000000000000000000000000000008152506186108a73ffffffffffffffffffffffffffffffffffffffff1661a342565b618651836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b618699836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b9015156186dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016186d3919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574eb5668c8c8c8c6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161875a949392919061d840565b600060405180830381600087803b15801561877457600080fd5b505af1158015618788573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506187b1919081019061cec8565b955095509550505050955095509592505050565b6000816040805190810160405280600a81526020017f667265657a654e6f74650000000000000000000000000000000000000000000081525061881d8673ffffffffffffffffffffffffffffffffffffffff1661a342565b61885e836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6188a6836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b9015156188e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016188e0919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a2637ff588886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161896392919061d9c3565b602060405180830381600087803b15801561897d57600080fd5b505af1158015618991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506189b5919081019061c9a7565b93505050509392505050565b600080600080846040805190810160405280600c81526020017f757067726164654173736574000000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff166348955e8d8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618a599392919061db9e565b602060405180830381600087803b158015618a7357600080fd5b505af1158015618a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618aab919081019061c9a7565b618af3836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061a8a990919063ffffffff16565b901515618b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401618b2d919061dd92565b60405180910390fd5b5088151515618b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401618b719061de97565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303dc6ac88b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618bf1919061dd92565b6040805180830381600087803b158015618c0a57600080fd5b505af1158015618c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618c42919081019061ca0c565b80955081965050508385965096505050505050935093915050565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401618d159061de77565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015618da457600080fd5b505af1158015618db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618ddc919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618e30919061d686565b602060405180830381600087803b158015618e4a57600080fd5b505af1158015618e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618e82919081019061bf96565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffff","ffffffffffffffffffffffffffffffffff16637739de4430838888886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618f0395949392919061d799565b602060405180830381600087803b158015618f1d57600080fd5b505af1158015618f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618f55919081019061c9a7565b915050949350505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561904357600080fd5b505af1158015619057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061907b919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016190cf919061d686565b602060405180830381600087803b1580156190e957600080fd5b505af11580156190fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619121919081019061bf96565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515619195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161918c9061de37565b60405180910390fd5b6191fa6040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250858560048060200260405190810160405280929190826004602002808284378201915050505050617f5d565b50600191505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c000000000000000000000000000000000000008152506192638973ffffffffffffffffffffffffffffffffffffffff1661a342565b6192a4836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6192ec836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b90151561932f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619326919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36ea8e68b8b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016193a992919061d9c3565b600060405180830381600087803b1580156193c357600080fd5b505af11580156193d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250619400919081019061c6f0565b965096509650965050505093509350935093565b6000816040805190810160405280600f81526020017f676574546f74616c42616c616e6365000000000000000000000000000000000081525061946c8573ffffffffffffffffffffffffffffffffffffffff1661a342565b6194ad836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b6194f5836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515619538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161952f919061dd92565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3d38193876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016195b0919061d686565b602060405180830381600087803b1580156195ca57600080fd5b505af11580156195de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619602919081019061ce9f565b935050505092915050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806196b85750601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156196f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016196f09061df97565b60405180910390fd5b6002601260146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051619765919061dd77565b60405180910390a26001905090565b6000816040805190810160405280600f81526020017f7570646174654e6f7465426174636800000000000000000000000000000000008152506197cc8873ffffffffffffffffffffffffffffffffffffffff1661a342565b61980d836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b619855836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515619898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161988f919061dd92565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce4929a58a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619916949392919061da76565b602060405180830381600087803b15801561993057600080fd5b505af1158015619944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619968919081019061c9a7565b935050505095945050505050565b600061998061b66c565b826040805190810160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152506199d68a73ffffffffffffffffffffffffffffffffffffffff1661a342565b619a17836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a421565b619a5f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a8a990919063ffffffff16565b901515619aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619a99919061dd92565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bc015308c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619b2295949392919061d89a565b606060405180830381600087803b158015619b3c57600080fd5b505af1158015619b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619b74919081019061ca84565b94509450505050965096945050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a3298946040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015619c0f57600080fd5b505af1158015619c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619c47919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff1663c47bad2d868686306040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619ca1949392919061dde4565b602060405180830381600087803b158015619cbb57600080fd5b505af1158015619ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619cf3919081019061bf96565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515619d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619d5e9061ded7565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f84c391826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619dde919061d686565b602060405180830381600087803b158015619df857600080fd5b505af1158015619e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619e30919081019061c9a7565b50809150509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619ed1576040517f08c379a000000000000000000000000000","0000000000000000000000000000008152600401619ec89061de77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b602083101515619f215780518252602082019150602081019050602083039250619efc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619fc59061de57565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c28dee7c600a866040518082805190602001908083835b60208310151561a044578051825260208201915060208101905060208303925061a01f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a0d6949392919061d74d565b602060405180830381600087803b15801561a0f057600080fd5b505af115801561a104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a128919081019061c9a7565b90509392505050565b600061a1986040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848460048060200260405190810160405280929190826004602002808284378201915050505050617231565b506001905092915050565b606060006040805190810160405280601081526020017f6765744163636f756e7441737365747300000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a2379392919061d985565b602060405180830381600087803b15801561a25157600080fd5b505af115801561a265573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a289919081019061c9a7565b61a2d1836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a8a990919063ffffffff16565b90151561a314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a30b919061dd92565b60405180910390fd5b50851561a32c5761a325601561afe7565b935061a339565b61a336601361afe7565b93505b50505092915050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561a38d5781602001602082028038833980820191505090505b509250600090505b601481101561a41a57818160148110151561a3ac57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561a3dd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a395565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561a4bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a4b39061de77565b60405180910390fd5b61a4c58861b1ed565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a54d57600080fd5b505af115801561a561573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a585919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a5d9919061d686565b602060405180830381600087803b15801561a5f357600080fd5b505af115801561a607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a62b919081019061bf96565b9150600360405190808252806020026020018201604052801561a65d5781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561a698578051825260208201915060208101905060208303925061a673565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561a6fb57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561a74757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561a79357fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330c3c98b8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a84a9392919061db37565b602060405180830381600087803b15801561a86457600080fd5b505af115801561a878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a89c919081019061c9a7565b9350505050949350505050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561a8f15781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561a9b357858181518110151561a91757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561a97657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a900565b600090505b845181101561aa6b57848181518110151561a9cf57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561aa2e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a9b8565b83965050505050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff161415151561aad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161aace9061df17565b60405180910390fd5b61aae1838361b2ba565b1561aaef576001905061aba0565b826001018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b92915050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561ac41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161ac389061de77565b60405180910390fd5b61ac4a8761b1ed565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561acd257600080fd5b505af115801561ace6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ad0a919081019061bf96565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ad5e919061d686565b602060405180830381600087803b15801561ad7857600080fd5b505af115801561ad8c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061adb0919081019061bf96565b9150600260405190808252806020026020018201604052801561ade25781602001602082028038833980820191505090505b5090503081600081518110151561adf557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110151561ae4157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffff","","","57600080fd5b600061cebf8482850161bf31565b91505092915050565b60008060006060848603121561cedd57600080fd5b600061ceeb8682870161bf31565b935050602084015167ffffffffffffffff81111561cf0857600080fd5b61cf148682870161bbac565b925050604084015167ffffffffffffffff81111561cf3157600080fd5b61cf3d8682870161bbac565b9150509250925092565b60006020828403121561cf5957600080fd5b600061cf678482850161bf59565b91505092915050565b61cf798161e344565b82525050565b600061cf8a8261e270565b80845260208401935061cf9c8361e21b565b60005b8281101561cfce5761cfb286835161cf70565b61cfbb8261e2e9565b915060208601955060018101905061cf9f565b50849250505092915050565b61cfe38161e27b565b61cfec8261e228565b60005b8281101561d01e5761d00285835161d211565b61d00b8261e2f6565b915060208501945060018101905061cfef565b5050505050565b600061d0308261e286565b8084526020840193508360208202850161d0498561e232565b60005b8481101561d08257838303885261d06483835161d256565b925061d06f8261e303565b915060208801975060018101905061d04c565b508196508694505050505092915050565b600061d09e8261e291565b80845260208401935061d0b08361e23f565b60005b8281101561d0e25761d0c686835161d29b565b61d0cf8261e310565b915060208601955060018101905061d0b3565b50849250505092915050565b600061d0f98261e29c565b8084526020840193508360208202850161d1128561e24c565b60005b8481101561d14b57838303885261d12d83835161d2e0565b925061d1388261e31d565b915060208801975060018101905061d115565b508196508694505050505092915050565b61d1658161e2a7565b61d16e8261e259565b60005b8281101561d1a05761d18485835161d668565b61d18d8261e32a565b915060208501945060018101905061d171565b5050505050565b600061d1b28261e2b2565b80845260208401935061d1c48361e263565b60005b8281101561d1f65761d1da86835161d668565b61d1e38261e337565b915060208601955060018101905061d1c7565b50849250505092915050565b61d20b8161e364565b82525050565b61d21a8161e370565b82525050565b600061d22b8261e2c8565b80845261d23f81602086016020860161e413565b61d2488161e446565b602085010191505092915050565b600061d2618261e2bd565b80845261d27581602086016020860161e413565b61d27e8161e446565b602085010191505092915050565b61d2958161e3f2565b82525050565b61d2a48161e37a565b82525050565b600061d2b58261e2de565b80845261d2c981602086016020860161e413565b61d2d28161e446565b602085010191505092915050565b600061d2eb8261e2d3565b80845261d2ff81602086016020860161e413565b61d3088161e446565b602085010191505092915050565b6000601d82527f426173654f726741646d696e3a6372656174654964206661696c6564210000006020830152604082019050919050565b6000601982527f726f6c6520686173206e6f7420206265656e20637265617465000000000000006020830152604082019050919050565b6000601c82527f426173655265736f757263653a686f6c646572206973206e756c6c21000000006020830152604082019050919050565b6000602182527f75706772616465206e6f7420737570706f72742066756e6769626c654173736560208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527f63726561746520726f6c65206661696c656400000000000000000000000000006020830152604082019050919050565b6000601482527f6372656174652063757272656e6379206661696c0000000000000000000000006020830152604082019050919050565b6000602982527f574542617369634163636f756e743a206f6e6c79206f776e657220697320617560208301527f74686f72697a65642e00000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f416464726573735365743a204b65792063616e6e6f74206265203078300000006020830152604082019050919050565b6000601482527f726f6c6520686173206265656e206372656174650000000000000000000000006020830152604082019050919050565b6000602982527f426173654163636f756e74486f6c6465723a72657175697265642070726f6a6560208301527f63742063616c6c212000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602b82527f426173654163636f756e743a206f6e6c79206163636f756e742073746174757360208301527f206973206e6f726d616c2e0000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f426173654163636f756e743a206f6e6c79206163636f756e74206d616e61676560208301527f722e0000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b61d6718161e384565b82525050565b61d6808161e38e565b82525050565b600060208201905061d69b600083018461cf70565b92915050565b600060408201905061d6b6600083018561cf70565b61d6c3602083018461cf70565b9392505050565b600060c08201905061d6df600083018661cf70565b61d6ec602083018561cf70565b61d6f9604083018461cfda565b949350505050565b600060e08201905061d716600083018761cf70565b61d723602083018661cf70565b818103604083015261d735818561d0ee565b905061d744606083018461cfda565b95945050505050565b600060e08201905061d762600083018761cf70565b61d76f602083018661cf70565b818103604083015261d781818561d2aa565b905061d790606083018461cfda565b95945050505050565b60006101008201905061d7af600083018861cf70565b61d7bc602083018761cf70565b818103604083015261d7ce818661d2aa565b9050818103606083015261d7e2818561d220565b905061d7f1608083018461cfda565b9695505050505050565b600060808201905061d810600083018761cf70565b61d81d602083018661cf70565b61d82a604083018561d668565b61d837606083018461d668565b95945050505050565b600060808201905061d855600083018761cf70565b818103602083015261d867818661cf7f565b9050818103604083015261d87b818561d1a7565b9050818103606083015261d88f818461d025565b905095945050505050565b600060a08201905061d8af600083018861cf70565b818103602083015261d8c1818761cf7f565b905061d8d0604083018661d668565b818103606083015261d8e2818561d093565b9050818103608083015261d8f6818461d025565b90509695505050505050565b600060808201905061d917600083018761cf70565b818103602083015261d929818661d1a7565b9050818103604083015261d93d818561cf7f565b9050818103606083015261d951818461d093565b905095945050505050565b600060408201905061d971600083018561cf70565b61d97e602083018461d202565b9392505050565b600060c08201905061d99a600083018661cf70565b818103602083015261d9ac818561d2aa565b905061d9bb604083018461cfda565b949350505050565b600060408201905061d9d8600083018561cf70565b61d9e5602083018461d668565b9392505050565b600060808201905061da01600083018761cf70565b61da0e602083018661d668565b818103604083015261da20818561d025565b9050818103606083015261da34818461d025565b905095945050505050565b600060608201905061da54600083018661cf70565b61da61602083018561d668565b61da6e604083018461d668565b949350505050565b600060808201905061da8b600083018761cf70565b61da98602083018661d668565b61daa5604083018561d668565b61dab2606083018461d202565b95945050505050565b6000602082019050818103600083015261dad5818461cf7f565b905092915050565b6000608082019050818103600083015261daf7818761cf7f565b9050818103602083015261db0b818661d1a7565b9050818103604083015261db1f818561d1a7565b905061db2e606083018461d677565b95945050505050565b6000606082019050818103600083015261db51818661cf7f565b9050818103602083015261db65818561d2aa565b9050818103604083015261db79818461d220565b9050949350505050565b600060808201905061db98600083018461cfda565b92915050565b600060c08201905061dbb3600083018661cfda565b818103608083015261dbc5818561d2aa565b905081810360a083015261dbd9818461d220565b9050949350505050565b6000604082019050818103600083015261dbfd818561d025565b9050818103602083015261dc11818461d025565b90509392505050565b6000602082019050818103600083015261dc34818461d0ee565b905092915050565b6000602082019050818103600083015261dc56818461d1a7565b905092915050565b6000604082019050818103600083015261dc78818561d1a7565b9050818103602083015261dc8c818461cf7f565b90509392505050565b600060208201905061dcaa600083018461d202565b92915050565b600060408201905061dcc5600083018561d202565b61dcd2602083018461cf70565b9392505050565b600060608201905061dcee600083018561d202565b61dcfb602083018461d15c565b9392505050565b600060408201905061dd17600083018561d202565b818103602083015261dd29818461d1a7565b90509392505050565b600060808201905061dd47600083018761d211565b61dd54602083018661d677565b61dd61604083018561d211565b61dd6e606083018461d211565b95945050505050565b600060208201905061dd8c600083018461d28c565b92915050565b6000602082019050818103600083015261ddac818461d2aa565b905092915050565b600060a082019050818103600083015261ddce818561d2aa565b905061dddd602083018461cfda565b9392505050565b6000608082019050818103600083015261ddfe818761d2aa565b9050818103602083015261de12818661d2aa565b905061de21604083018561d677565b61de2e606083018461cf70565b95945050505050565b6000602082019050818103600083015261de508161d316565b9050919050565b6000602082019050818103600083015261de708161d34d565b9050919050565b6000602082019050818103600083015261de908161d384565b9050919050565b6000602082019050818103600083015261deb081","61d3bb565b9050919050565b6000602082019050818103600083015261ded08161d418565b9050919050565b6000602082019050818103600083015261def08161d44f565b9050919050565b6000602082019050818103600083015261df108161d486565b9050919050565b6000602082019050818103600083015261df308161d4e3565b9050919050565b6000602082019050818103600083015261df508161d51a565b9050919050565b6000602082019050818103600083015261df708161d551565b9050919050565b6000602082019050818103600083015261df908161d5ae565b9050919050565b6000602082019050818103600083015261dfb08161d60b565b9050919050565b600060208201905061dfcc600083018461d668565b92915050565b600060608201905061dfe7600083018661d668565b818103602083015261dff9818561d1a7565b9050818103604083015261e00d818461d1a7565b9050949350505050565b600060208201905061e02c600083018461d677565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561e05557600080fd5b8060405250919050565b600067ffffffffffffffff82111561e07657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e09e57600080fd5b602082029050919050565b600067ffffffffffffffff82111561e0c057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e0e857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e11057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e13857600080fd5b602082029050919050565b600067ffffffffffffffff82111561e15a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e18257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e1ae57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e1da57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e20657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600061e3fd8261e344565b9050919050565b82818337600083830152505050565b60005b8381101561e43157808201518184015260208101905061e416565b8381111561e440576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058200cc6709df386399be5b6388a2d5b26751630a00c941dc04316246ae667e9a5f36c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405260408051908101604052806040805190810160405280600581526020017f6772616e7400000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600681526020017f7265766f6b650000000000000000000000000000000000000000000000000000815250815250600b9060026200009592919062000e92565b506103c0604051908101604052806040805190810160405280600d81526020017f726567697374657241737365740000000000000000000000000000000000000081525081526020016040805190810160405280600c81526020017f757067726164654173736574000000000000000000000000000000000000000081525081526020016040805190810160405280600881526020017f736574507269636500000000000000000000000000000000000000000000000081525081526020016040805190810160405280600781526020017f6465706f7369740000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600781526020017f736574526174650000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600a81526020017f676574486f6c646572730000000000000000000000000000000000000000000081525081526020016040805190810160405280600b81526020017f6f70656e4163636f756e7400000000000000000000000000000000000000000081525081526020016040805190810160405280600781526020017f616464426f6f6b0000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600781526020017f6465706f7369740000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600981526020017f77697468647261776c000000000000000000000000000000000000000000000081525081526020016040805190810160405280600f81526020017f676574546f74616c42616c616e6365000000000000000000000000000000000081525081526020016040805190810160405280600981526020017f7175657279426f6f6b000000000000000000000000000000000000000000000081525081526020016040805190810160405280600581526020017f697373756500000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600d81526020017f6765744e6f746544657461696c0000000000000000000000000000000000000081525081526020016040805190810160405280601281526020017f6765744163636f756e744e6f746553697a65000000000000000000000000000081525081526020016040805190810160405280600c81526020017f7570646174654e6f74654e6f000000000000000000000000000000000000000081525081526020016040805190810160405280601481526020017f7570646174654e6f746550726f7065727469657300000000000000000000000081525081526020016040805190810160405280601181526020017f6765744e6f746550726f7065727469657300000000000000000000000000000081525081526020016040805190810160405280600f81526020017f7570646174654e6f74654261746368000000000000000000000000000000000081525081526020016040805190810160405280600a81526020017f667265657a654e6f74650000000000000000000000000000000000000000000081525081526020016040805190810160405280600c81526020017f756e667265657a654e6f7465000000000000000000000000000000000000000081525081526020016040805190810160405280601081526020017f676574546f74616c4e6f746553697a650000000000000000000000000000000081525081526020016040805190810160405280601081526020017f676574546f74616c4e6f746553697a650000000000000000000000000000000081525081526020016040805190810160405280600c81526020017f676574546561724e6f746573000000000000000000000000000000000000000081525081526020016040805190810160405280600b81526020017f656e61626c65426174636800000000000000000000000000000000000000000081525081526020016040805190810160405280600a81526020017f67657442616c616e63650000000000000000000000000000000000000000000081525081526020016040805190810160405280600681526020017f63616e63656c000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600681526020017f667265657a65000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600881526020017f756e667265657a6500000000000000000000000000000000000000000000000081525081526020016040805190810160405280600d81526020017f6372656174654163636f756e7400000000000000000000000000000000000000815250815250600c90601e6200079d92919062000ef9565b506000601260146101000a81548160ff021916908360ff160217905550348015620007c757600080fd5b506040516060806200f5e88339810180604052620007e99190810190620010ce565b828183338181878780808c8073ffffffffffffffffffffffffffffffffffffffff16639b3cd8cc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200085957600080fd5b505af11580156200086e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620008949190810190620010a2565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663059b6ea66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200093957600080fd5b505af11580156200094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009749190810190620010a2565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e92139da6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000ac057600080fd5b505af115801562000ad5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000afb9190810190620010a2565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505033601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508373ffffffffffffffffffffffffffffffffffffffff16639b3cd8cc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000ca857600080fd5b505af115801562000cbd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000ce39190810190620010a2565b601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663059b6ea66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801562000d8857600080fd5b505af115801562000d9d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000dc39190810190620010a2565b601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505082601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062001144565b82805482825590600052602060002090810192821562000ee6579160200282015b8281111562000ee557825182908051906020019062000ed492919062000f60565b509160200191906001019062000eb3565b5b50905062000ef5919062000fe7565b5090565b82805482825590600052602060002090810192821562000f4d579160200282015b8281111562000f4c57825182908051906020019062000f3b92919062000f60565b509160200191906001019062000f1a565b5b50905062000f5c919062000fe7565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000fa357805160ff191683800117855562000fd4565b8280016001018555821562000fd4579182015b8281111562000fd357825182559160200191906001019062000fb6565b5b50905062000fe3919062001018565b5090565b6200101591905b8082111562001011576000818162001007","","","","ffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612f39576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612f309061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515612f895780518252602082019150602081019050602083039250612f64565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613036576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161302d9061df3a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1ef34c0600a876040518082805190602001908083835b6020831015156130ac5780518252602082019150602081019050602083039250613087565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161314095949392919061d79c565b602060405180830381600087803b15801561315a57600080fd5b505af115801561316e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613192919081019061c9aa565b9050949350505050565b600080600080846040805190810160405280600d81526020017f726567697374657241737365740000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff1663118ca9718484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132349392919061dba1565b602060405180830381600087803b15801561324e57600080fd5b505af1158015613262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613286919081019061c9aa565b6132ce836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061a34590919063ffffffff16565b901515613311576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613308919061dd95565b60405180910390fd5b50881561340957600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161338f919061dd95565b6040805180830381600087803b1580156133a857600080fd5b505af11580156133bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133e0919081019061ca0f565b809650819550505083156134045761340285600261aebf90919063ffffffff16565b505b6134f6565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613480919061dd95565b6040805180830381600087803b15801561349957600080fd5b505af11580156134ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134d1919081019061ca0f565b809650819550505083156134f5576134f385600061aebf90919063ffffffff16565b505b5b8484965096505050505050935093915050565b6000816040805190810160405280600b81526020017f656e61626c6542617463680000000000000000000000000000000000000000008152506135618673ffffffffffffffffffffffffffffffffffffffff1661a5a8565b6135a2836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b6135ea836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b90151561362d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613624919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a50ab50988886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016136a792919061d9c6565b602060405180830381600087803b1580156136c157600080fd5b505af11580156136d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136f9919081019061c9aa565b93505050509392505050565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561381e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138159061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b60208310151561386e5780518252602082019150602081019050602083039250613849565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561391b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016139129061df3a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361c1af59600a866040518082805190602001908083835b602083101515613991578051825260208201915060208101905060208303925061396c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a23949392919061d750565b602060405180830381600087803b158015613a3d57600080fd5b505af1158015613a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613a75919081019061c9aa565b90509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f7465730000000000000000000000000000000000000000815250613ad68573ffffffffffffffffffffffffffffffffffffffff1661a5a8565b613b17836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b613b5f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515613ba2576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613b99919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcbfde4b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c1a919061d689565b600060405180830381600087803b158015613c3457600080fd5b505af1158015613c48573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613c71919081019061c8d4565b935050505092915050565b6000601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bf727356040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613d0457600080fd5b505af1158015613d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d3c919081019061bf99565b905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613dd8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613dcf9061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515613e285780518252602082019150602081019050602083039250613e03565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613ed5576040517fc703cb12000000000000000000","","6d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515614f16576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614f0d919061dd95565b60405180910390fd5b50601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614f9d57600080fd5b505af1158015614fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614fd5919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff16637138972d8d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615029919061d689565b602060405180830381600087803b15801561504357600080fd5b505af1158015615057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061507b919081019061bf99565b9350600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbe09bdc601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161511892919061d6a4565b6040805180830381600087803b15801561513157600080fd5b505af1158015615145573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615169919081019061ca0f565b8096508197505050600d8590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001859750975050505050505094509492505050565b6060816040805190810160405280600981526020017f7175657279426f6f6b00000000000000000000000000000000000000000000008152506152458873ffffffffffffffffffffffffffffffffffffffff1661a5a8565b615286836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b6152ce836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515615311576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615308919061dd95565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561537657600080fd5b505af115801561538a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506153ae919081019061c9aa565b1561548e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615430949392919061d905565b600060405180830381600087803b15801561544a57600080fd5b505af115801561545e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250615487919081019061c893565b9350615565565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161550b949392919061d905565b600060405180830381600087803b15801561552557600080fd5b505af1158015615539573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250615562919081019061c893565b93505b50505095945050505050565b600061557b61b66f565b826040805190810160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152506155d18a73ffffffffffffffffffffffffffffffffffffffff1661a5a8565b615612836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b61565a836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b90151561569d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615694919061dd95565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa112a708c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161571d95949392919061d89d565b606060405180830381600087803b15801561573757600080fd5b505af115801561574b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061576f919081019061ca87565b94509450505050965096945050505050565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016158169392919061d988565b602060405180830381600087803b15801561583057600080fd5b505af1158015615844573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615868919081019061c9aa565b6158b0836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a34590919063ffffffff16565b9015156158f3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016158ea919061dd95565b60405180910390fd5b50601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba1d32988b8b8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615971949392919061d843565b600060405180830381600087803b15801561598b57600080fd5b505af115801561599f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506159c8919081019061cac3565b945094505050509550959350505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480615a845750601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515615ac5576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615abc9061de5a565b60405180910390fd5b615acd612e62565b1515615b0e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615b059061deba565b60405180910390fd5b6001601260146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051615b7a919061dd7a565b60405180910390a26001905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515615c20576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615c179061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b602083101515615c705780518252602082019150602081019050602083039250615c4b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515615d1c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615d139061df5a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639011ca8a615d8b615d7c3073ffffffffffffffffffffffffffffffffffffffff1661afeb565b8761a34590919063ffffffff16565b856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615dc592919061ddb7565b602060405180830381600087803b158015615ddf57600080fd5b505af1158015615df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615e17919081019061bf99565b9150816009856040518082805190602001908083835b602083101515615e525780518252602082019150602081019050602083039250615e2d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffff","ffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1180e1846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615f3a919061db86565b602060405180830381600087803b158015615f5457600080fd5b505af1158015615f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615f8c919081019061bf99565b905080600a856040518082805190602001908083835b602083101515615fc75780518252602082019150602081019050602083039250615fa2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d243a43e8383866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016160b39392919061d6cd565b602060405180830381600087803b1580156160cd57600080fd5b505af11580156160e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616105919081019061c9aa565b1515616146576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161613d9061df9a565b60405180910390fd5b50505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156161e3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016161da9061deda565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561626957600080fd5b505af115801561627d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506162a1919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff166330769859876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016162f5919061d689565b602060405180830381600087803b15801561630f57600080fd5b505af1158015616323573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616347919081019061bf99565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a6c11e530838888886040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016163c895949392919061d79c565b602060405180830381600087803b1580156163e257600080fd5b505af11580156163f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061641a919081019061c9aa565b915050949350505050565b6000816040805190810160405280600681526020017f63616e63656c000000000000000000000000000000000000000000000000000081525061647d8573ffffffffffffffffffffffffffffffffffffffff1661a5a8565b6164be836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b616506836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515616549576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616540919061dd95565b60405180910390fd5b50600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de1ed235876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016165c1919061d689565b602060405180830381600087803b1580156165db57600080fd5b505af11580156165ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616613919081019061c9aa565b935050505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c0000000000000000000000000000000000000081525061667b8973ffffffffffffffffffffffffffffffffffffffff1661a5a8565b6166bc836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b616704836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515616747576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161673e919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c04b99a8b8b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016167c192919061d9c6565b600060405180830381600087803b1580156167db57600080fd5b505af11580156167ef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250616818919081019061c6f3565b965096509650965050505093509350935093565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156168b557600080fd5b505af11580156168c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506168ed919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff16637138972d856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616941919061d689565b602060405180830381600087803b15801561695b57600080fd5b505af115801561696f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616993919081019061bf99565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515616a07576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016169fe9061de3a565b60405180910390fd5b616a6c6040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250858560048060200260405190810160405280929190826004602002808284378201915050505050617d6b565b50600191505092915050565b6000816040805190810160405280600881526020017f7365745072696365000000000000000000000000000000000000000000000000815250616ad08673ffffffffffffffffffffffffffffffffffffffff1661a5a8565b616b11836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b616b59836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515616b9c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616b93919061dd95565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015616c0157600080fd5b505af1158015616c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616c39919081019061c9aa565b15616d1057600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638689c8b088886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616cb792919061d9c6565b602060405180830381600087803b158015616cd157600080fd5b505af1158015616ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616d09919081019061cea2565b9350616dde565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638689c8b088886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616d8992919061d9c6565b602060405180830381600087803b158015616da357600080fd5b505af1158015616db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616ddb919081019061cea2565b93505b5050509392505050565b6000816040805190810160405280600a81526020017f667265657a654e6f746500000000000000000000000000000000000000000000815250616e408673ffffffffffffffffffffffffffffffffffffffff1661a5a8565b616e81836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b616ec9836040805190810160405280601781526020017f426173654f726741646d696e3a466f72626269","64656e2000000000000000000081525061a34590919063ffffffff16565b901515616f0c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616f03919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663abf1390788886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616f8692919061d9c6565b602060405180830381600087803b158015616fa057600080fd5b505af1158015616fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616fd8919081019061c9aa565b93505050509392505050565b606080826040805190810160405280601181526020017f6765744e6f746550726f7065727469657300000000000000000000000000000081525061703d8773ffffffffffffffffffffffffffffffffffffffff1661a5a8565b61707e836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b6170c6836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515617109576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617100919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc95896289896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161718392919061d9c6565b600060405180830381600087803b15801561719d57600080fd5b505af11580156171b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506171da919081019061c827565b94509450505050935093915050565b6000816040805190810160405280600c81526020017f7570646174654e6f74654e6f00000000000000000000000000000000000000008152506172418773ffffffffffffffffffffffffffffffffffffffff1661a5a8565b617282836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b6172ca836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b90151561730d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617304919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9c420758989896040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016173899392919061da42565b602060405180830381600087803b1580156173a357600080fd5b505af11580156173b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506173db919081019061c9aa565b9350505050949350505050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161747b9392919061d988565b602060405180830381600087803b15801561749557600080fd5b505af11580156174a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506174cd919081019061c9aa565b617515836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a34590919063ffffffff16565b901515617558576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161754f919061dd95565b60405180910390fd5b50601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c241460689308a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016175d6949392919061d7fe565b600060405180830381600087803b1580156175f057600080fd5b505af1158015617604573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061762d919081019061c8d4565b9350505050949350505050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156176e85750600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515617729576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016177209061defa565b60405180910390fd5b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156177af57600080fd5b505af11580156177c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506177e7919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff16637138972d846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161783b919061d689565b602060405180830381600087803b15801561785557600080fd5b505af1158015617869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061788d919081019061bf99565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515617901576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016178f89061de3a565b60405180910390fd5b61790a8161b15f565b80915050919050565b6000816040805190810160405280601281526020017f6765744163636f756e744e6f746553697a65000000000000000000000000000081525061796b8673ffffffffffffffffffffffffffffffffffffffff1661a5a8565b6179ac836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b6179f4836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515617a37576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617a2e919061dd95565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec0c712488886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617ab192919061d6a4565b602060405180830381600087803b158015617acb57600080fd5b505af1158015617adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617b03919081019061cea2565b93505050509392505050565b6000617b1961b66f565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617baa9392919061d988565b602060405180830381600087803b158015617bc457600080fd5b505af1158015617bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617bfc919081019061c9aa565b617c44836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a34590919063ffffffff16565b901515617c87576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617c7e919061dd95565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a1f84b48c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617d0795949392919061d89d565b606060405180830381600087803b158015617d2157600080fd5b505af1158015617d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617d59919081019061ca87565b94509450505050965096945050505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617e02576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617df99061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515617e525780518252602082019150602081019050602083039250617e2d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffff","ffffffffffffffffffffffffffffffff1614151515617eff576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617ef69061df3a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015617f8557600080fd5b505af1158015617f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617fbd919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff166330769859856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618011919061d689565b602060405180830381600087803b15801561802b57600080fd5b505af115801561803f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618063919081019061bf99565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c11cdc6826009886040518082805190602001908083835b6020831015156180dc57805182526020820191506020810190506020830392506180b7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161816b9392919061d6cd565b602060405180830381600087803b15801561818557600080fd5b505af1158015618199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506181bd919081019061c9aa565b9150509392505050565b606080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c74f495c846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618241919061dd95565b600060405180830381600087803b15801561825b57600080fd5b505af115801561826f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618298919081019061c915565b91509150915091565b6060856040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016183349392919061d988565b602060405180830381600087803b15801561834e57600080fd5b505af1158015618362573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618386919081019061c9aa565b6183ce836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a34590919063ffffffff16565b901515618411576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618408919061dd95565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561847657600080fd5b505af115801561848a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506184ae919081019061c9aa565b1561858e57601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618530949392919061d905565b600060405180830381600087803b15801561854a57600080fd5b505af115801561855e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618587919081019061c893565b9350618665565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161860b949392919061d905565b600060405180830381600087803b15801561862557600080fd5b505af1158015618639573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618662919081019061c893565b93505b50505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618706576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016186fd9061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b6020831015156187565780518252602082019150602081019050602083039250618731565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618803576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016187fa9061df3a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366cd861e600a866040518082805190602001908083835b6020831015156188795780518252602082019150602081019050602083039250618854565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161890b949392919061d704565b602060405180830381600087803b15801561892557600080fd5b505af1158015618939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061895d919081019061c9aa565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156189fb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016189f29061deda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515618a4b5780518252602082019150602081019050602083039250618a26565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618af8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618aef9061df3a565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663127a21eb600a876040518082805190602001908083835b602083101515618b6e5780518252602082019150602081019050602083039250618b49565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618c0295949392919061d79c565b602060405180830381600087803b158015618c1c57600080fd5b505af1158015618c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618c54919081019061c9aa565b9050949350505050565b6000816040805190810160405280600781526020017f7365745261746500000000000000000000000000000000000000000000000000815250618cb68673ffffffffffffffffffffffffffffffffffffffff1661a5a8565b618cf7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a687565b618d3f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a34590919063ffffffff16565b901515618d82576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618d79919061dd95565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344b8f03d88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618dfc92919061d9c6565b602060405180830381600087803b158015618e1657600080fd5b505af1158015618e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618e4e919081019061cea2565b93505050509392505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff","","0a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663317fd6fb88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619f1a92919061d6a4565b602060405180830381600087803b158015619f3457600080fd5b505af1158015619f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619f6c919081019061c9aa565b935061a041565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306e608de88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619fec92919061d6a4565b602060405180830381600087803b15801561a00657600080fd5b505af115801561a01a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a03e919081019061c9aa565b93505b5050509392505050565b600061a0b26040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848460048060200260405190810160405280929190826004602002808284378201915050505050613d41565b506001905092915050565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a1509392919061d988565b602060405180830381600087803b15801561a16a57600080fd5b505af115801561a17e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a1a2919081019061c9aa565b61a1ea836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a34590919063ffffffff16565b90151561a22d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a224919061dd95565b60405180910390fd5b50601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663403dad7588886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a2a792919061d9c6565b602060405180830381600087803b15801561a2c157600080fd5b505af115801561a2d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a2f9919081019061c9aa565b93505050509392505050565b6000821561a3285761a32182601561aebf90919063ffffffff16565b905061a33f565b61a33c82601361aebf90919063ffffffff16565b90505b92915050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561a38d5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561a44f57858181518110151561a3b357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561a41257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a39c565b600090505b845181101561a50757848181518110151561a46b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561a4ca57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a454565b83965050505050505092915050565b60608160010180548060200260200160405190810160405280929190818152602001828054801561a59c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161a552575b50505050509050919050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561a5f35781602001602082028038833980820191505090505b509250600090505b601481101561a68057818160148110151561a61257fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561a64357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a5fb565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561a722576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a7199061deda565b60405180910390fd5b61a72b8861b1f0565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a7b357600080fd5b505af115801561a7c7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a7eb919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff166330769859846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a83f919061d689565b602060405180830381600087803b15801561a85957600080fd5b505af115801561a86d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a891919081019061bf99565b9150600360405190808252806020026020018201604052801561a8c35781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561a8fe578051825260208201915060208101905060208303925061a8d9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561a96157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561a9ad57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561a9f957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6cf431a8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161aab09392919061db3a565b602060405180830381600087803b15801561aaca57600080fd5b505af115801561aade573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ab02919081019061c9aa565b9350505050949350505050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561abaa576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161aba19061deda565b60405180910390fd5b61abb38761b1f0565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561ac3b57600080fd5b505af115801561ac4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ac73919081019061bf99565b73ffffffffffffffffffffffffffffffffffffffff166330769859846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161acc7919061d689565b602060405180830381600087803b15801561ace157600080fd5b505af115801561acf5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ad19919081019061bf99565b9150600260405190808252806020026020018201604052801561ad4b5781602001602082028038833980820191505090505b5090503081600081518110151561ad5e57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110151561adaa57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6cf431a8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ae619392919061db3a565b602060405180830381600087803b15801561ae7b57600080fd5b505af115801561ae8f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aeb39190","","","","deb38161d3e4565b9050919050565b6000602082019050818103600083015261ded38161d41b565b9050919050565b6000602082019050818103600083015261def38161d478565b9050919050565b6000602082019050818103600083015261df138161d4af565b9050919050565b6000602082019050818103600083015261df338161d50c565b9050919050565b6000602082019050818103600083015261df538161d569565b9050919050565b6000602082019050818103600083015261df738161d5a0565b9050919050565b6000602082019050818103600083015261df938161d5d7565b9050919050565b6000602082019050818103600083015261dfb38161d634565b9050919050565b600060208201905061dfcf600083018461d66b565b92915050565b600060608201905061dfea600083018661d66b565b818103602083015261dffc818561d1aa565b9050818103604083015261e010818461d1aa565b9050949350505050565b600060208201905061e02f600083018461d67a565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561e05857600080fd5b8060405250919050565b600067ffffffffffffffff82111561e07957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e0a157600080fd5b602082029050919050565b600067ffffffffffffffff82111561e0c357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e0eb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e11357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e13b57600080fd5b602082029050919050565b600067ffffffffffffffff82111561e15d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e18557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e1b157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e1dd57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e20957600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600061e4008261e347565b9050919050565b82818337600083830152505050565b60005b8381101561e43457808201518184015260208101905061e419565b8381111561e443576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820cbde9556b0ba3cd198b1a8fbb000299b85d41b1461278f6183071da03c01b0106c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"tearNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"}],\"name\":\"listAssetVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"noteNos\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"res\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"checkHolderByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"openAccountByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTearNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"}],\"name\":\"createHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"priceVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addDetailToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"}],\"name\":\"getAllAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"enableBatch\",\"outputs\":[{\"name\":\"isEffective\",\"type\":\"bool\"","}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"bytes[]\"},{\"name\":\"values\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"accountHoldNote\",\"outputs\":[{\"name\":\"isContain\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"oldNoteNo\",\"type\":\"uint256\"},{\"name\":\"newNoteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteNo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operations\",\"type\":\"string[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addOperationToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBook\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"keyList\",\"type\":\"bytes[]\"},{\"name\":\"valueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAssetPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revokeId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_accountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"rateVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grantId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"uint256Args\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"upgradeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"revokeExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getNoteDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"","type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"isEffectiveDate\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currencyName\",\"type\":\"string\"},{\"name\":\"currencySymbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_project\",\"type\":\"address\"},{\"name\":\"_accountManager\",\"type\":\"address\"},{\"name\":\"_holderId\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogBaseAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_ADDBOOKBYCUSTODY = "addBookByCustody";

    public static final String FUNC_REGISTERMEMBER = "registerMember";

    public static final String FUNC_ADDASSET = "addAsset";

    public static final String FUNC_GETHOLDER = "getHolder";

    public static final String FUNC_TEARNOTE = "tearNote";

    public static final String FUNC__STATUS = "_status";

    public static final String FUNC_QUERYBOOKBYCUSTODY = "queryBookByCustody";

    public static final String FUNC_GETHOLDERS = "getHolders";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETACCOUNTNOTES = "getAccountNotes";

    public static final String FUNC_LISTASSETVERSION = "listAssetVersion";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_UNFREEZE = "unfreeze";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_WITHDRAWAL = "withdrawal";

    public static final String FUNC_CHECKHOLDERBYADDRESS = "checkHolderByAddress";

    public static final String FUNC_OPENACCOUNTBYCUSTODY = "openAccountByCustody";

    public static final String FUNC_GETTEARNOTES = "getTearNotes";

    public static final String FUNC_UNREGISTERADMIN = "unregisterAdmin";

    public static final String FUNC_GETNOTEPROPERTIES = "getNoteProperties";

    public static final String FUNC_ISMEMBER = "isMember";

    public static final String FUNC_ISACCOUNTADMIN = "isAccountAdmin";

    public static final String FUNC_CREATEHOLDER = "createHolder";

    public static final String FUNC_SETPRICE = "setPrice";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_REMOVEDETAIL = "removeDetail";

    public static final String FUNC_ADDDETAILTORESGROUP = "addDetailToResGroup";

    public static final String FUNC_GETALLASSETS = "getAllAssets";

    public static final String FUNC_ENABLEBATCH = "enableBatch";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_GETACCOUNTNOTESIZE = "getAccountNoteSize";

    public static final String FUNC_ISNORMAL = "isNormal";

    public static final String FUNC_UPDATENOTEPROPERTIES = "updateNoteProperties";

    public static final String FUNC_GRANT = "grant";

    public static final String FUNC_GETTOTALNOTESIZE = "getTotalNoteSize";

    public static final String FUNC_ACCOUNTHOLDNOTE = "accountHoldNote";

    public static final String FUNC_UPDATENOTENO = "updateNoteNo";

    public static final String FUNC_UNFREEZENOTE = "unfreezeNote";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_ADDOPERATIONTORESGROUP = "addOperationToResGroup";

    public static final String FUNC_QUERYBOOK = "queryBook";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_GETASSETPOOLS = "getAssetPools";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REVOKEID = "revokeId";

    public static final String FUNC_GETPROJECTTERM = "getProjectTerm";

    public static final String FUNC__ACCOUNTMANAGER = "_accountManager";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_CREATEROLE = "createRole";

    public static final String FUNC_SETRATE = "setRate";

    public static final String FUNC_GRANTID = "grantId";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_FREEZENOTE = "freezeNote";

    public static final String FUNC_UPGRADEASSET = "upgradeAsset";

    public static final String FUNC_GETACCOUNTADMIN = "getAccountAdmin";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_ISHOLDER = "isHolder";

    public static final String FUNC_REGISTERADMIN = "registerAdmin";

    public static final String FUNC_GETNOTEDETAIL = "getNoteDetail";

    public static final String FUNC_GETTOTALBALANCE = "getTotalBalance";

    public static final String FUNC_UPDATENOTEBATCH = "updateNoteBatch";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CREATECURRENCY = "createCurrency";

    public static final String FUNC_REMOVEOPERATION = "removeOperation";

    public static final String FUNC_UNREGISTERMEMBER = "unregisterMember";

    public static final String FUNC_GETACCOUNTASSETS = "getAccountAssets";

    public static final Event LOGBASEACCOUNT_EVENT = new Event("LogBaseAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Organization(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addBookByCustody(String asset, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getAddBookByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<BigInteger> getAddBookByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAsset(Boolean isFungible, String asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<Boolean, String> getAddAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getHolder() throws ContractException {
        final Function function = new Function(FUNC_GETHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt tearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void tearNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getTearNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getTearNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger _status() throws ContractException {
        final Function function = new Function(FUNC__STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List queryBookByCustody(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getHolders(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETHOLDERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAccountNotes(String asset, String account, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<BigInteger>, List<String>> listAssetVersion(String assetName) throws ContractException {
        final Function function = new Function(FUNC_LISTASSETVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Address>) results.get(1).getValue()));
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt unfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnfreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnfreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCancelAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getCancelAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getWithdrawalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getWithdrawalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt checkHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkHolderByAddress(String res, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getCheckHolderByAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getCheckHolderByAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt openAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void openAccountByCustody(String asset, String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOpenAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getOpenAccountByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getOpenAccountByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getTearNotes(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTEARNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt unregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getNoteProperties(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, List<byte[]>>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()));
    }

    public Boolean isMember(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isAccountAdmin(String caller) throws ContractException {
        final Function function = new Function(FUNC_ISACCOUNTADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(caller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getAccountNotes(String asset, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createHolder(String adminExternal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCreateHolderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getCreateHolderOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setPrice(String asset, BigInteger priceVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetPriceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetPriceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getFreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRemoveDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getAddDetailToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getAddDetailToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAllAssets(Boolean isFungible) throws ContractException {
        final Function function = new Function(FUNC_GETALLASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt freeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getFreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getUnfreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt enableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableBatch(String asset, BigInteger batchNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getEnableBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getEnableBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isAdmin(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getAccountNoteSize(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt isNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void isNormal(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIsNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getIsNormalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>> getUpdateNotePropertiesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getUpdateNotePropertiesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<byte[]>, List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue())
                );
    }

    public TransactionReceipt grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getGrantInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getGrantOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getTotalNoteSize(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean accountHoldNote(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_ACCOUNTHOLDNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, List<byte[]>> getUpdateNoteNoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteNoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getUnfreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getUnfreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getRegisterAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<byte[]>> getAddOperationToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getAddOperationToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List queryBook(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>> getCreateAccountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple2<Boolean, String> getCreateAccountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAssetPools(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getGetAssetPoolsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public BigInteger getBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt revokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revokeId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRevokeIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getProjectTerm() throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTTERM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _accountManager() throws ContractException {
        final Function function = new Function(FUNC__ACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _owner() throws ContractException {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createRole(String roleName, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCreateRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public TransactionReceipt setRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setRate(String asset, BigInteger rateVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetRateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetRateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt grantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grantId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getGrantIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getGrantIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getBalance(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getIssueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple3<BigInteger, List<BigInteger>, List<BigInteger>> getIssueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, List<BigInteger>, List<BigInteger>>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue())
                );
    }

    public TransactionReceipt freezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getFreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getUpgradeAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getUpgradeAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAccountAdmin(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAccountAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRevokeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isHolder(String account) throws ContractException {
        final Function function = new Function(FUNC_ISHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt registerAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger> getNoteDetail(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                (BigInteger) results.get(3).getValue());
    }

    public BigInteger getTotalBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt cancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getCancelOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>> getUpdateNoteBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getDepositInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getDepositOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt createCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createCurrency(String currencyName, String currencySymbol, BigInteger decimals, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getCreateCurrencyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<String> getCreateCurrencyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeOperation(String roleName, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRemoveOperationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveOperationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAccountAssets(Boolean isFungible, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List<LogBaseAccountEventResponse> getLogBaseAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBASEACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogBaseAccountEventResponse> responses = new ArrayList<LogBaseAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBaseAccountEventResponse typedResponse = new LogBaseAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventType = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogBaseAccountEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogBaseAccountEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetOwnerEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetOwnerEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Organization load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Organization(contractAddress, client, credential);
    }

    public static Organization deploy(Client client, CryptoKeyPair credential, String _project, String _accountManager, String _holderId) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_project), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_accountManager), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_holderId)));
        return deploy(Organization.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogBaseAccountEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] eventType;

        public String contractAddress;
    }

    public static class LogSetOwnerEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String contractAddress;
    }
}
