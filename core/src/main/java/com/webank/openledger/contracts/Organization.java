package com.webank.openledger.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Organization extends Contract {
    public static final String[] BINARY_ARRAY = {"","600090555060010162000ff3565b5090565b90565b50805460018160011615610100020316600290046000825580601f106200103c57506200105d565b601f0160209004906000526020600020908101906200105c919062000fec565b5b50565b60006200106e8251620010e3565b905092915050565b6000602082840312156200108957600080fd5b6000620010998482850162001060565b91505092915050565b60008060408385031215620010b657600080fd5b6000620010c68582860162001060565b9250506020620010d98582860162001060565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61e5c280620011136000396000f300608060405260043610610363576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806207db501461036857806309f4d56c146103a55780630a25d46a146103e25780630c05b3c51461041f5780630f1447b31461044a5780630fb3844c14610487578063100db3d5146104b257806313387c9f146104ef57806313af40351461052c578063145583e6146105555780631a71d6b8146105925780631e191eb4146105d0578063209be0b41461060e578063274b9c451461064b578063281b3acf146106885780632836b355146106c6578063344f24a014610704578063353bc6a2146107415780633ef268931461077e57806346567680146107bb57806347afccd2146107f857806348955e8d146108365780634da90f34146108735780634e55d03c146108b057806351e8054c146108ed578063521fc9f51461092a578063599db3ff1461096757806362a5af3b146109a4578063645788c2146109cf57806364efc16214610a0c5780636709ecba14610a495780636930dc0314610a86578063693d867614610ac35780636a28f00014610b00578063710a393614610b2b5780637a4b236714610b68578063862d7dbc14610ba55780638866eaec14610be2578063897fb89a14610c0d5780638bcf496514610c4b5780638f4cc37914610c8857806392ad4c5614610cc5578063934876be14610d025780639364d6a314610d3f57806394bb402614610d7c57806396defd5b14610dba5780639864804314610df7578063989d345f14610e345780639b0eb12c14610e72578063a0997a5814610e9d578063ae0f8e1e14610eda578063af06802014610f17578063b2623cb014610f42578063b2bdfa7b14610f6d578063b8a0be6514610f98578063ba22717514610fd5578063c91a93ae14611012578063cbc9a34e1461104f578063cdce7acb1461108c578063ce4d18a4146110cb578063d0dfcd4414611108578063d195143c14611146578063d2645a5614611171578063d4d7b19a146111ae578063d9b9a05d146111eb578063dc0fd2a214611228578063ded378f514611268578063ea8a1af0146112a5578063eb6bfd9a146112d0578063edcaf88c1461130d578063f27b9b431461134b578063f2fd0e1a14611388578063f6216624146113c5578063fd36fe4314611402575b600080fd5b34801561037457600080fd5b5061038f600480360361038a919081019061c256565b61143f565b60405161039c919061e0e8565b60405180910390f35b3480156103b157600080fd5b506103cc60048036036103c7919081019061c21a565b6117aa565b6040516103d9919061dd96565b60405180910390f35b3480156103ee57600080fd5b506104096004803603610404919081019061c9fb565b6119f6565b604051610416919061dd96565b60405180910390f35b34801561042b57600080fd5b50610434611a36565b604051610441919061d7a2565b60405180910390f35b34801561045657600080fd5b50610471600480360361046c919081019061c4df565b611a60565b60405161047e919061dd96565b60405180910390f35b34801561049357600080fd5b5061049c611c5c565b6040516104a9919061e148565b60405180910390f35b3480156104be57600080fd5b506104d960048036036104d4919081019061c325565b611c6f565b6040516104e6919061dd1b565b60405180910390f35b3480156104fb57600080fd5b506105166004803603610511919081019061c256565b611ff3565b604051610523919061dbd7565b60405180910390f35b34801561053857600080fd5b50610553600480360361054e919081019061bf6f565b612368565b005b34801561056157600080fd5b5061057c6004803603610577919081019061c010565b612498565b604051610589919061dd3d565b60405180910390f35b34801561059e57600080fd5b506105b960048036036105b4919081019061cb3f565b61269f565b6040516105c792919061dd5f565b60405180910390f35b3480156105dc57600080fd5b506105f760048036036105f2919081019061c088565b612779565b60405161060592919061de03565b60405180910390f35b34801561061a57600080fd5b506106356004803603610630919081019061c256565b6129d1565b604051610642919061dd96565b60405180910390f35b34801561065757600080fd5b50610672600480360361066d919081019061c256565b612bca565b60405161067f919061dd96565b60405180910390f35b34801561069457600080fd5b506106af60048036036106aa919081019061c148565b612dc3565b6040516106bd92919061ddda565b60405180910390f35b3480156106d257600080fd5b506106ed60048036036106e8919081019061c148565b61301f565b6040516106fb92919061ddda565b60405180910390f35b34801561071057600080fd5b5061072b6004803603610726919081019061c3e5565b61322f565b604051610738919061dd96565b60405180910390f35b34801561074d57600080fd5b506107686004803603610763919081019061bfc1565b6132ae565b604051610775919061dd96565b60405180910390f35b34801561078a57600080fd5b506107a560048036036107a0919081019061c256565b61361e565b6040516107b2919061dd3d565b60405180910390f35b3480156107c757600080fd5b506107e260048036036107dd919081019061c21a565b61381c565b6040516107ef919061dd96565b60405180910390f35b34801561080457600080fd5b5061081f600480360361081a919081019061c4df565b61388e565b60405161082d92919061dce4565b60405180910390f35b34801561084257600080fd5b5061085d6004803603610858919081019061c79d565b613a93565b60405161086a919061dd96565b60405180910390f35b34801561087f57600080fd5b5061089a6004803603610895919081019061bf6f565b613b6a565b6040516108a7919061dd96565b60405180910390f35b3480156108bc57600080fd5b506108d760048036036108d2919081019061c5d6565b613bc4565b6040516108e4919061dd3d565b60405180910390f35b3480156108f957600080fd5b50610914600480360361090f919081019061bf6f565b613e16565b604051610921919061d7a2565b60405180910390f35b34801561093657600080fd5b50610951600480360361094c919081019061c4df565b614095565b60405161095e919061e0e8565b60405180910390f35b34801561097357600080fd5b5061098e6004803603610989919081019061c826565b614403565b60405161099b919061dd96565b60405180910390f35b3480156109b057600080fd5b506109b9614520565b6040516109c6919061dd96565b60405180910390f35b3480156109db57600080fd5b506109f660048036036109f1919081019061cda0565b6146d0565b604051610a03919061dd96565b60405180910390f35b348015610a1857600080fd5b50610a336004803603610a2e919081019061cda0565b6149c8565b604051610a40919061dd96565b60405180910390f35b348015610a5557600080fd5b50610a706004803603610a6b919081019061c9a9565b614cc0565b604051610a7d919061dbd7565b60405180910390f35b348015610a9257600080fd5b50610aad6004803603610aa8919081019061c826565b614ceb565b604051610aba919061dd96565b60405180910390f35b348015610acf57600080fd5b50610aea6004803603610ae5919081019061c256565b61504c565b604051610af7919061dd96565b60405180910390f35b348015610b0c57600080fd5b50610b15615245565b604051610b22919061dd96565b60405180910390f35b348015610b3757600080fd5b50610b526004803603610b4d919081019061c4df565b615403565b604051610b5f919061dd96565b60405180910390f35b348015610b7457600080fd5b50610b8f6004803603610b8a919081019061c79d565b6155ff565b604051610b9c919061dd96565b60405180910390f35b348015610bb157600080fd5b50610bcc6004803603610bc7919081019061bfc1565b6156d6565b604051610bd9919061e0e8565b60405180910390f35b348015610bee57600080fd5b50610bf76158d2565b604051610c04919061dd96565b60405180910390f35b348015610c1957600080fd5b50610c346004803603610c2f919081019061c52e565b6158ee565b604051610c4292919061dce4565b60405180910390f35b348015610c5757600080fd5b50610c726004803603610c6d919081019061c44c565b615af9565b604051610c7f919061dd96565b60405180910390f35b348015610c9457600080fd5b50610caf6004803603610caa919081019061c256565b615dd2565b604051610cbc919061e0e8565b60405180910390f35b348015610cd157600080fd5b50610cec6004803603610ce7919081019061c4df565b615fcb565b604051610cf9919061dd96565b60405180910390f35b348015610d0e57600080fd5b50610d296004803603610d24919081019061c5d6565b616213565b604051610d36919061dd96565b60405180910390f35b348015610d4b57600080fd5b50610d666004803603610d61919081019061c4df565b616412565b604051610d73919061e148565b60405180910390f35b348015610d8857600080fd5b50610da36004803603610d9e919081019061ccba565b61660e565b604051610db192919061da78565b60405180910390f35b348015610dc657600080fd5b50610de16004803603610ddc919081019061cc3b565b61697b565b604051610dee919061dd96565b60405180910390f35b348015610e0357600080fd5b50610e1e6004803603610e19919081019061c325565b616c70565b604051610e2b919061dd1b565b60405180910390f35b348015610e4057600080fd5b50610e5b6004803603610e56919081019061c292565b617040565b604051610e6992919061ddb1565b60405180910390f35b348015610e7e57600080fd5b50610e87617424565b604051610e94919061dbd7565b60405180910390f35b348015610ea957600080fd5b50610ec46004803603610ebf919081019061c256565b6174b2565b604051610ed1919061e0e8565b60405180910390f35b348015610ee657600080fd5b50610f016004","","3d601f19601f82011682018060405250611f09919081019061c8bb565b9350611fe7565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f8d949392919061da1e565b600060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611fe4919081019061c8bb565b93505b50505095945050505050565b6060816040805190810160405280600a81526020017f676574486f6c646572730000000000000000000000000000000000000000000081525061204b8573ffffffffffffffffffffffffffffffffffffffff1661a7d2565b61208c836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b6120d4836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b901515612117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210e919061de93565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561217c57600080fd5b505af1158015612190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121b4919081019061c9d2565b1561228e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cac9ba876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612230919061d7a2565b600060405180830381600087803b15801561224a57600080fd5b505af115801561225e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612287919081019061c6b1565b935061235f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cac9ba876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612305919061d7a2565b600060405180830381600087803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061235c919081019061c6b1565b93505b50505092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f19061dfe8565b60405180910390fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a350565b6060816040805190810160405280600f81526020017f6765744163636f756e744e6f74657300000000000000000000000000000000008152506124f08873ffffffffffffffffffffffffffffffffffffffff1661a7d2565b612531836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b612579836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156125bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b3919061de93565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d818a8a8a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161263a949392919061d917565b600060405180830381600087803b15801561265457600080fd5b505af1158015612668573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612691919081019061c8fc565b935050505095945050505050565b606080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a71d6b8846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612719919061de93565b600060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612770919081019061c93d565b91509150915091565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161280e9392919061daa1565b602060405180830381600087803b15801561282857600080fd5b505af115801561283c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612860919081019061c9d2565b6128a8836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061ad3990919063ffffffff16565b9015156128eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e2919061de93565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc2d23368b8b8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612969949392919061d95c565b600060405180830381600087803b15801561298357600080fd5b505af1158015612997573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506129c0919081019061caeb565b945094505050509550959350505050565b6000816040805190810160405280600881526020017f756e667265657a65000000000000000000000000000000000000000000000000815250612a298573ffffffffffffffffffffffffffffffffffffffff1661a7d2565b612a6a836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b612ab2836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b901515612af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aec919061de93565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663789a0ed5876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b6d919061d7a2565b602060405180830381600087803b158015612b8757600080fd5b505af1158015612b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bbf919081019061c9d2565b935050505092915050565b6000816040805190810160405280600681526020017f63616e63656c0000000000000000000000000000000000000000000000000000815250612c228573ffffffffffffffffffffffffffffffffffffffff1661a7d2565b612c63836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b612cab836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b901515612cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ce5919061de93565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec17d025876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d66919061d7a2565b602060405180830381600087803b158015612d8057600080fd5b505af1158015612d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612db8919081019061c9d2565b935050505092915050565b6000612dcd61b66e565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e5e9392919061daa1565b602060405180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612eb0919081019061c9d2565b612ef8836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061ad","3990919063ffffffff16565b901515612f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f32919061de93565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee379d58c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612fbb95949392919061d9b6565b606060405180830381600087803b158015612fd557600080fd5b505af1158015612fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061300d919081019061caaf565b94509450505050965096945050505050565b600061302961b66e565b826040805190810160405280600a81526020017f7769746864726177616c0000000000000000000000000000000000000000000081525061307f8a73ffffffffffffffffffffffffffffffffffffffff1661a7d2565b6130c0836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b613108836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b90151561314b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613142919061de93565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bc015308c8c8c8c8c6040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131cb95949392919061d9b6565b606060405180830381600087803b1580156131e557600080fd5b505af11580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061321d919081019061caaf565b94509450505050965096945050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141561327a5761327383858361b036565b91506132a6565b6132a3838561329e8873ffffffffffffffffffffffffffffffffffffffff1661a7d2565b61b036565b91505b509392505050565b6000816040805190810160405280600b81526020017f6f70656e4163636f756e740000000000000000000000000000000000000000008152506133068673ffffffffffffffffffffffffffffffffffffffff1661a7d2565b613347836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b61338f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156133d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133c9919061de93565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561343757600080fd5b505af115801561344b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061346f919081019061c9d2565b1561354657600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371fe98bc88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016134ed92919061d7bd565b602060405180830381600087803b15801561350757600080fd5b505af115801561351b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061353f919081019061c9d2565b9350613614565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa15b38988886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135bf92919061d7bd565b602060405180830381600087803b1580156135d957600080fd5b505af11580156135ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613611919081019061c9d2565b93505b5050509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f74657300000000000000000000000000000000000000008152506136768573ffffffffffffffffffffffffffffffffffffffff1661a7d2565b6136b7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b6136ff836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b901515613742576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613739919061de93565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d070b15876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016137ba919061d7a2565b600060405180830381600087803b1580156137d457600080fd5b505af11580156137e8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613811919081019061c8fc565b935050505092915050565b60006138836040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508484600480602002604051908101604052809291908260046020028082843782019150505050506176f9565b506001905092915050565b606080826040805190810160405280601181526020017f6765744e6f746550726f706572746965730000000000000000000000000000008152506138e78773ffffffffffffffffffffffffffffffffffffffff1661a7d2565b613928836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b613970836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156139b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139aa919061de93565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395e2847889896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a2d92919061dadf565b600060405180830381600087803b158015613a4757600080fd5b505af1158015613a5b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613a84919081019061c84f565b94509450505050935093915050565b6000613b5f86600480602002604051908101604052809291908260046020028082843782019150505050506040805190810160405280600681526020017f4d454d424552000000000000000000000000000000000000000000000000000081525087878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505086868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061a8b1565b905095945050505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c579392919061daa1565b602060405180830381600087803b158015613c7157600080fd5b505af1158015613c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613ca9919081019061c9d2565b613cf1836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061ad3990919063ffffffff16565b901515613d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d2b919061de93565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d8189308a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613db2949392919061d917565b600060405180830381600087803b158015613dcc57600080fd5b505af1158015613de0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613e09919081019061c8fc565b9350505050949350505050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ea29061df28565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c2604051","8163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613f3157600080fd5b505af1158015613f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613f69919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613fbd919061d7a2565b602060405180830381600087803b158015613fd757600080fd5b505af1158015613feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061400f919081019061bf98565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515614083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161407a9061df08565b60405180910390fd5b61408c8161b3e6565b80915050919050565b6000816040805190810160405280600881526020017f73657450726963650000000000000000000000000000000000000000000000008152506140ed8673ffffffffffffffffffffffffffffffffffffffff1661a7d2565b61412e836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b614176836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156141b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141b0919061de93565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561421e57600080fd5b505af1158015614232573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614256919081019061c9d2565b1561432c57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016142d392919061dadf565b602060405180830381600087803b1580156142ed57600080fd5b505af1158015614301573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614325919081019061ceca565b93506143f9565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016143a492919061dadf565b602060405180830381600087803b1580156143be57600080fd5b505af11580156143d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506143f6919081019061ceca565b93505b5050509392505050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161448e9061df28565b60405180910390fd5b6144d66040805190810160405280600581526020017f41444d494e00000000000000000000000000000000000000000000000000000081525083617c66565b1515614517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161450e9061e028565b60405180910390fd5b60019050919050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806145cb5750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561460c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146039061e0c8565b60405180910390fd5b6146146158d2565b1515614655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161464c9061e0a8565b60405180910390fd5b6001601160146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e306040516146c1919061de78565b60405180910390a26001905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161475c9061df68565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156147b55780518252602082019150602081019050602083039250614790565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614862576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148599061df48565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6d729ea600a876040518082805190602001908083835b6020831015156148d857805182526020820191506020810190506020830392506148b3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161496c95949392919061d8b5565b602060405180830381600087803b15801561498657600080fd5b505af115801561499a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506149be919081019061c9d2565b9050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614a549061df68565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515614aad5780518252602082019150602081019050602083039250614a88565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614b519061df48565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf09f8c9600a876040518082805190602001908083835b602083101515614bd05780518252602082019150602081019050602083039250614bab565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614c6495949392919061d8b5565b602060405180830381600087803b158015614c7e57600080fd5b505af1158015614c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614cb6919081019061c9d2565b9050949350505050565b60608115614cd957614cd2600261b42a565b9050614ce6565b614ce3600061b42a565b90505b919050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614d769061df28565b60405180910390fd5b614ea06040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250600b805480602002602001604051908101604052809291908181526020016000905b82821015614e96578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614e825780601f10614e5757610100808354040283529160200191614e82565b820191906000526020600020905b815481529060010190602001808311614e6557829003601f168201915b505050505081526020019060010190614dda565b505050508461697b565b1515614ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ed89061e088565b60405180910390fd5b6150026040805190810160","","","028152600401616eff949392919061da1e565b600060405180830381600087803b158015616f1957600080fd5b505af1158015616f2d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250616f56919081019061c8bb565b9350617034565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616fda949392919061da1e565b600060405180830381600087803b158015616ff457600080fd5b505af1158015617008573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250617031919081019061c8bb565b93505b50505095945050505050565b6000806000806000856040805190810160405280600d81526020017f6372656174654163636f756e740000000000000000000000000000000000000081525060606170c2836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b61710a836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b90151561714d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617144919061de93565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156171d457600080fd5b505af11580156171e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061720c919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa28d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617260919061d7a2565b602060405180830381600087803b15801561727a57600080fd5b505af115801561728e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506172b2919081019061bf98565b9350601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358293035600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161734f92919061d7bd565b6040805180830381600087803b15801561736857600080fd5b505af115801561737c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506173a0919081019061ca37565b8096508197505050600d8590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001859750975050505050505094509492505050565b606060048054806020026020016040519081016040528092919081815260200182805480156174a857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161745e575b5050505050905090565b6000826040805190810160405280600a81526020017f67657442616c616e636500000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016175459392919061daa1565b602060405180830381600087803b15801561755f57600080fd5b505af1158015617573573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617597919081019061c9d2565b6175df836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061ad3990919063ffffffff16565b901515617622576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617619919061de93565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d87306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161769c92919061d7bd565b602060405180830381600087803b1580156176b657600080fd5b505af11580156176ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506176ee919081019061ceca565b935050505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617790576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016177879061df68565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156177e057805182526020820191506020810190506020830392506177bb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561788d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016178849061df48565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561791357600080fd5b505af1158015617927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061794b919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161799f919061d7a2565b602060405180830381600087803b1580156179b957600080fd5b505af11580156179cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506179f1919081019061bf98565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fce41caf826009886040518082805190602001908083835b602083101515617a6a5780518252602082019150602081019050602083039250617a45565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617af99392919061d7e6565b602060405180830381600087803b158015617b1357600080fd5b505af1158015617b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617b4b919081019061c9d2565b9150509392505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663124b65b46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015617bdd57600080fd5b505af1158015617bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617c15919081019061bf98565b905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617cf59061df68565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515617d4e5780518252602082019150602081019050602083039250617d29565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515617dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617df19061e068565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af17d38a866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617e71919061de93565b602060405180830381600087803b158015617e8b57600080fd5b505af1158015617e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617ec3919081019061bf98565b9150816009866040518082805190602001908083835b602083101515617efe57805182526020820191","","405180830381600087803b158015618f0357600080fd5b505af1158015618f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618f3b919081019061c9d2565b618f83836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061ad3990919063ffffffff16565b901515618fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401618fbd919061de93565b60405180910390fd5b508815151561900a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016190019061df88565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303dc6ac88b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619081919061de93565b6040805180830381600087803b15801561909a57600080fd5b505af11580156190ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506190d2919081019061ca37565b80955081965050508385965096505050505050935093915050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156191ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016191a59061df68565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561923457600080fd5b505af1158015619248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061926c919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016192c0919061d7a2565b602060405180830381600087803b1580156192da57600080fd5b505af11580156192ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619312919081019061bf98565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637739de4430838888886040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161939395949392919061d8b5565b602060405180830381600087803b1580156193ad57600080fd5b505af11580156193c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506193e5919081019061c9d2565b915050949350505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156194d357600080fd5b505af11580156194e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061950b919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161955f919061d7a2565b602060405180830381600087803b15801561957957600080fd5b505af115801561958d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506195b1919081019061bf98565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515619625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161961c9061df08565b60405180910390fd5b61968a6040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508585600480602002604051908101604052809291908260046020028082843782019150505050506183ed565b50600191505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c000000000000000000000000000000000000008152506196f38973ffffffffffffffffffffffffffffffffffffffff1661a7d2565b619734836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b61977c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156197bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016197b6919061de93565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36ea8e68b8b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161983992919061dadf565b600060405180830381600087803b15801561985357600080fd5b505af1158015619867573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250619890919081019061c6f2565b965096509650965050505093509350935093565b6000816040805190810160405280600f81526020017f676574546f74616c42616c616e636500000000000000000000000000000000008152506198fc8573ffffffffffffffffffffffffffffffffffffffff1661a7d2565b61993d836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b619985836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b9015156199c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016199bf919061de93565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3d38193876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619a40919061d7a2565b602060405180830381600087803b158015619a5a57600080fd5b505af1158015619a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619a92919081019061ceca565b935050505092915050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480619b485750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515619b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619b809061e0c8565b60405180910390fd5b6002601160146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051619bf5919061de78565b60405180910390a26001905090565b6000816040805190810160405280600f81526020017f7570646174654e6f746542617463680000000000000000000000000000000000815250619c5c8873ffffffffffffffffffffffffffffffffffffffff1661a7d2565b619c9d836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b619ce5836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff16565b901515619d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619d1f919061de93565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce4929a58a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619da6949392919061db92565b602060405180830381600087803b158015619dc057600080fd5b505af1158015619dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619df8919081019061c9d2565b935050505095945050505050565b6000619e1061b66e565b826040805190810160405280600781526020017f6465706f73697400000000000000000000000000000000000000000000000000815250619e668a73ffffffffffffffffffffffffffffffffffffffff1661a7d2565b619ea7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461a8b1565b619eef836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061ad3990919063ffffffff","16565b901515619f32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619f29919061de93565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bc015308c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619fb295949392919061d9b6565b606060405180830381600087803b158015619fcc57600080fd5b505af1158015619fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a004919081019061caaf565b94509450505050965096945050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a3298946040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a09f57600080fd5b505af115801561a0b3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a0d7919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff1663c47bad2d868686306040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a131949392919061deb5565b602060405180830381600087803b15801561a14b57600080fd5b505af115801561a15f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a183919081019061bf98565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561a1f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a1ee9061dfc8565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f84c391826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a26e919061d7a2565b602060405180830381600087803b15801561a28857600080fd5b505af115801561a29c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a2c0919081019061c9d2565b50809150509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561a361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a3589061df68565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b60208310151561a3b1578051825260208201915060208101905060208303925061a38c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561a45e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a4559061df48565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c28dee7c600a866040518082805190602001908083835b60208310151561a4d4578051825260208201915060208101905060208303925061a4af565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a566949392919061d869565b602060405180830381600087803b15801561a58057600080fd5b505af115801561a594573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a5b8919081019061c9d2565b90509392505050565b600061a6286040805190810160405280600681526020017f4d454d42455200000000000000000000000000000000000000000000000000008152508484600480602002604051908101604052809291908260046020028082843782019150505050506176f9565b506001905092915050565b606060006040805190810160405280601081526020017f6765744163636f756e7441737365747300000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a6c79392919061daa1565b602060405180830381600087803b15801561a6e157600080fd5b505af115801561a6f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a719919081019061c9d2565b61a761836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061ad3990919063ffffffff16565b90151561a7a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a79b919061de93565b60405180910390fd5b50851561a7bc5761a7b5601461b42a565b935061a7c9565b61a7c6601261b42a565b93505b50505092915050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561a81d5781602001602082028038833980820191505090505b509250600090505b601481101561a8aa57818160148110151561a83c57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561a86d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a825565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561a94c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a9439061df68565b60405180910390fd5b61a9558861b4bc565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a9dd57600080fd5b505af115801561a9f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aa15919081019061bf98565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161aa69919061d7a2565b602060405180830381600087803b15801561aa8357600080fd5b505af115801561aa97573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aabb919081019061bf98565b9150600360405190808252806020026020018201604052801561aaed5781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561ab28578051825260208201915060208101905060208303925061ab03565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561ab8b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561abd757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561ac2357fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330c3c98b8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161acda9392919061dc53565b602060405180830381600087803b15801561acf457600080fd5b505af115801561ad08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ad2c919081019061c9d2565b9350505050949350505050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561ad815781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561ae4357858181518110151561ada757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561ae0657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061ad90565b600090505b845181101561aefb57848181518110151561ae5f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561aebe57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90","","","","8561d793565b61deff606083018461cf9b565b95945050505050565b6000602082019050818103600083015261df218161d341565b9050919050565b6000602082019050818103600083015261df418161d378565b9050919050565b6000602082019050818103600083015261df618161d3d5565b9050919050565b6000602082019050818103600083015261df818161d40c565b9050919050565b6000602082019050818103600083015261dfa18161d443565b9050919050565b6000602082019050818103600083015261dfc18161d4a0565b9050919050565b6000602082019050818103600083015261dfe18161d4d7565b9050919050565b6000602082019050818103600083015261e0018161d50e565b9050919050565b6000602082019050818103600083015261e0218161d56b565b9050919050565b6000602082019050818103600083015261e0418161d5a2565b9050919050565b6000602082019050818103600083015261e0618161d5d9565b9050919050565b6000602082019050818103600083015261e0818161d636565b9050919050565b6000602082019050818103600083015261e0a18161d66d565b9050919050565b6000602082019050818103600083015261e0c18161d6ca565b9050919050565b6000602082019050818103600083015261e0e18161d727565b9050919050565b600060208201905061e0fd600083018461d784565b92915050565b600060608201905061e118600083018661d784565b818103602083015261e12a818561d1d2565b9050818103604083015261e13e818461d1d2565b9050949350505050565b600060208201905061e15d600083018461d793565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561e18657600080fd5b8060405250919050565b600067ffffffffffffffff82111561e1a757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e1cf57600080fd5b602082029050919050565b600067ffffffffffffffff82111561e1f157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e21957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e24157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e26957600080fd5b602082029050919050565b600067ffffffffffffffff82111561e28b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e2b357600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e2df57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e30b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e33757600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600061e52e8261e475565b9050919050565b82818337600083830152505050565b60005b8381101561e56257808201518184015260208101905061e547565b8381111561e571576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820664d430ad418b44a189cd9a652a27a58bc66a50b51ce0ca070547578f4d4de196c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","600080fd5b50610f0c6004803603610f07919081019061c5d9565b6178d2565b604051610f19919061dd40565b60405180910390f35b348015610f2e57600080fd5b50610f496004803603610f44919081019061bf72565b617b24565b604051610f56919061d7a5565b60405180910390f35b348015610f6b57600080fd5b50610f866004803603610f81919081019061bfc4565b617da3565b604051610f93919061e0eb565b60405180910390f35b348015610fa857600080fd5b50610fc36004803603610fbe919081019061c14b565b617f9f565b604051610fd192919061dddd565b60405180910390f35b348015610fe657600080fd5b506110016004803603610ffc919081019061cb83565b6181fb565b60405161100e919061dd99565b60405180910390f35b34801561102357600080fd5b5061103e6004803603611039919081019061cb42565b618657565b60405161104c92919061dd62565b60405180910390f35b34801561106157600080fd5b5061107c6004803603611077919081019061c328565b618731565b604051611089919061dd1e565b60405180910390f35b34801561109e57600080fd5b506110b960048036036110b4919081019061cc3e565b618b01565b6040516110c6919061dd99565b60405180910390f35b3480156110db57600080fd5b506110f660048036036110f1919081019061cda3565b618df6565b604051611103919061dd99565b60405180910390f35b34801561111857600080fd5b50611133600480360361112e919081019061c4e2565b6190ee565b604051611140919061e0eb565b60405180910390f35b34801561115557600080fd5b5061115e6192ea565b60405161116b919061dd99565b60405180910390f35b34801561118057600080fd5b5061119b6004803603611196919081019061c013565b619451565b6040516111a8919061dd40565b60405180910390f35b3480156111bd57600080fd5b506111d860048036036111d3919081019061c259565b619658565b6040516111e5919061dbda565b60405180910390f35b3480156111fa57600080fd5b506112156004803603611210919081019061ce4e565b6199cd565b604051611222919061d7a5565b60405180910390f35b34801561123757600080fd5b50611252600480360361124d919081019061c08b565b619c83565b6040516112619392919061e106565b60405180910390f35b34801561127657600080fd5b50611291600480360361128c919081019061c21d565b619e93565b60405161129e919061dd99565b60405180910390f35b3480156112b357600080fd5b506112ce60048036036112c9919081019061bf72565b619f05565b6040516112db919061dd99565b60405180910390f35b3480156112f057600080fd5b506112f9619f5f565b604051611306919061e14b565b60405180910390f35b34801561131b57600080fd5b506113366004803603611331919081019061c259565b619f72565b604051611343919061e0eb565b60405180910390f35b34801561135857600080fd5b50611373600480360361136e919081019061bfc4565b61a16b565b604051611380919061dd99565b60405180910390f35b34801561139557600080fd5b506113b060048036036113ab919081019061c21d565b61a4db565b6040516113bd919061dd99565b60405180910390f35b3480156113d257600080fd5b506113ed60048036036113e8919081019061c4e2565b61a54d565b6040516113fa919061dd99565b60405180910390f35b34801561140f57600080fd5b5061142a6004803603611425919081019061c9fe565b61a795565b604051611437919061dd99565b60405180910390f35b606060006040805190810160405280601081526020017f6765744163636f756e7441737365747300000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114d49392919061daa4565b602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611526919081019061c9d5565b61156e836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b9015156115b1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016115a8919061de96565b60405180910390fd5b5085156115c9576115c2601461a9a6565b93506115d6565b6115d3601261a9a6565b93505b50505092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611671576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016116689061e08b565b60405180910390fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f480107a875206c9f5ec6e8b65d989106e27d0fc8b130625b25997540ddfc334a60405160405180910390a350565b6000816040805190810160405280600681526020017f667265657a6500000000000000000000000000000000000000000000000000008152506117678573ffffffffffffffffffffffffffffffffffffffff1661aa38565b6117a8836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6117f0836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515611833576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161182a919061de96565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b9b8e5c876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118ab919061d7a5565b602060405180830381600087803b1580156118c557600080fd5b505af11580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118fd919081019061c9d5565b935050505092915050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119b35750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156119f4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016119eb9061df4b565b60405180910390fd5b6001601160149054906101000a900460ff1660ff16141515611a4b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a429061dfcb565b60405180910390fd5b6000601160146101000a81548160ff021916908360ff1602179055507f756e667265657a650000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051611ab7919061de7b565b60405180910390a26001905090565b600080600080846040805190810160405280600c81526020017f757067726164654173736574000000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff1663118ca9718484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b5e9392919061dca2565b602060405180830381600087803b158015611b7857600080fd5b505af1158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bb0919081019061c9d5565b611bf8836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061a7d590919063ffffffff16565b901515611c3b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611c32919061de96565b60405180910390fd5b5088151515611c7f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611c769061e02b565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a1bd096d8b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cf6919061de96565b6040805180830381600087803b158015611d0f57600080fd5b505af1158015611d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d47919081019061ca3a565b80955081965050508385965096505050505050935093915050565b6000611e2e86600480602002604051908101604052809291908260046020028082843782019150505050506040805190810160405280600681526020017f4d454d424552000000000000000000000000000000000000000000000000000081525087878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505086868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061ab17565b905095945050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415611e8457611e7d83858361af9f565b9150611eb0565b611ead8385611ea88873ffffffffffffffffffffffffffffffffffffffff1661aa38565b61af9f565b91505b509392505050565b6000816040805190810160405280600781526020017f616464426f6f6b0000000000000000000000000000000000000000000000","","6020019060010190808311612eb2575b5050505050905090565b600080601160149054906101000a900460ff1660ff1614905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612fdd576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612fd49061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b60208310151561302d5780518252602082019150602081019050602083039250613008565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156130da576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016130d19061e04b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1ef34c0600a876040518082805190602001908083835b602083101515613150578051825260208201915060208101905060208303925061312b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131e495949392919061d8b8565b602060405180830381600087803b1580156131fe57600080fd5b505af1158015613212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613236919081019061c9d5565b9050949350505050565b600080600080846040805190810160405280600d81526020017f726567697374657241737365740000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff1663118ca9718484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132d89392919061dca2565b602060405180830381600087803b1580156132f257600080fd5b505af1158015613306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061332a919081019061c9d5565b613372836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061a7d590919063ffffffff16565b9015156133b5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016133ac919061de96565b60405180910390fd5b5088156134ad57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613433919061de96565b6040805180830381600087803b15801561344c57600080fd5b505af1158015613460573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613484919081019061ca3a565b809650819550505083156134a8576134a685600261b34f90919063ffffffff16565b505b61359a565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613524919061de96565b6040805180830381600087803b15801561353d57600080fd5b505af1158015613551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613575919081019061ca3a565b809650819550505083156135995761359785600061b34f90919063ffffffff16565b505b5b8484965096505050505050935093915050565b6000816040805190810160405280600b81526020017f656e61626c6542617463680000000000000000000000000000000000000000008152506136058673ffffffffffffffffffffffffffffffffffffffff1661aa38565b613646836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b61368e836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b9015156136d1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016136c8919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a50ab50988886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161374b92919061dae2565b602060405180830381600087803b15801561376557600080fd5b505af1158015613779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061379d919081019061c9d5565b93505050509392505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156138c2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138b99061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b60208310151561391257805182526020820191506020810190506020830392506138ed565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156139bf576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016139b69061e04b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361c1af59600a866040518082805190602001908083835b602083101515613a355780518252602082019150602081019050602083039250613a10565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ac7949392919061d86c565b602060405180830381600087803b158015613ae157600080fd5b505af1158015613af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613b19919081019061c9d5565b90509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f7465730000000000000000000000000000000000000000815250613b7a8573ffffffffffffffffffffffffffffffffffffffff1661aa38565b613bbb836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b613c03836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515613c46576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613c3d919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcbfde4b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613cbe919061d7a5565b600060405180830381600087803b158015613cd857600080fd5b505af1158015613cec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613d15919081019061c8ff565b935050505092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bf727356040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613da857600080fd5b505af1158015613dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613de0919081019061bf9b565b905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613e7c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613e739061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515613ecc5780518252602082019150602081019050602083039250613ea7565b6001836020036101000a03801982511681845116808217855250505050505090","","0560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399a1ca3988886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614f6492919061dae2565b602060405180830381600087803b158015614f7e57600080fd5b505af1158015614f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614fb6919081019061c9d5565b93505050509392505050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561504b57600080fd5b505af115801561505f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615083919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff16637138972d856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016150d7919061d7a5565b602060405180830381600087803b1580156150f157600080fd5b505af1158015615105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615129919081019061bf9b565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561519d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016151949061df0b565b60405180910390fd5b6152026040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508585600480602002604051908101604052809291908260046020028082843782019150505050506181fb565b50600191505092915050565b6000806000806000856040805190810160405280600d81526020017f6372656174654163636f756e74000000000000000000000000000000000000008152506060615290836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6152d8836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b90151561531b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615312919061de96565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156153a257600080fd5b505af11580156153b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506153da919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff16637138972d8d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161542e919061d7a5565b602060405180830381600087803b15801561544857600080fd5b505af115801561545c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615480919081019061bf9b565b9350601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbe09bdc600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161551d92919061d7c0565b6040805180830381600087803b15801561553657600080fd5b505af115801561554a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061556e919081019061ca3a565b8096508197505050600d8590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001859750975050505050505094509492505050565b6060816040805190810160405280600981526020017f7175657279426f6f6b000000000000000000000000000000000000000000000081525061564a8873ffffffffffffffffffffffffffffffffffffffff1661aa38565b61568b836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6156d3836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515615716576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161570d919061de96565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561577b57600080fd5b505af115801561578f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506157b3919081019061c9d5565b1561589357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615835949392919061da21565b600060405180830381600087803b15801561584f57600080fd5b505af1158015615863573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061588c919081019061c8be565b935061596a565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615910949392919061da21565b600060405180830381600087803b15801561592a57600080fd5b505af115801561593e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250615967919081019061c8be565b93505b50505095945050505050565b600061598061b671565b826040805190810160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152506159d68a73ffffffffffffffffffffffffffffffffffffffff1661aa38565b615a17836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b615a5f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515615aa2576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615a99919061de96565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa112a708c8c8c8c8c6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615b2295949392919061d9b9565b606060405180830381600087803b158015615b3c57600080fd5b505af1158015615b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615b74919081019061cab2565b94509450505050965096945050505050565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615c1b9392919061daa4565b602060405180830381600087803b158015615c3557600080fd5b505af1158015615c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615c6d919081019061c9d5565b615cb5836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b901515615cf8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615cef919061de96565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba1d32988b8b8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615d76949392919061d95f565b600060405180830381600087803b158015615d9057600080fd5b505af1158015615da4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250615dcd919081019061caee565b945094505050509550959350505050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480615e895750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515615eca576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615ec19061df4b565b60405180910390fd5b615ed2612f06565b1515615f13576040517fc703cb12000000000000000000000000","000000000000000000000000000000008152600401615f0a9061dfcb565b60405180910390fd5b6001601160146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051615f7f919061de7b565b60405180910390a26001905090565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515616022576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016160199061e0ab565b60405180910390fd5b6160616040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250836160ab565b15156160a2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016160999061df2b565b60405180910390fd5b60019050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515616143576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161613a9061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515616193578051825260208201915060208101905060208303925061616e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561623f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016162369061e06b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930f4f2d866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016162b6919061de96565b602060405180830381600087803b1580156162d057600080fd5b505af11580156162e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616308919081019061bf9b565b9150816009866040518082805190602001908083835b602083101515616343578051825260208201915060208101905060208303925061631e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f30b339b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561643a57600080fd5b505af115801561644e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616472919081019061bf9b565b905080600a866040518082805190602001908083835b6020831015156164ad5780518252602082019150602081019050602083039250616488565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b46c706783836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161659792919061d7c0565b602060405180830381600087803b1580156165b157600080fd5b505af11580156165c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506165e9919081019061c9d5565b151561662a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016166219061e0cb565b60405180910390fd5b60019250505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156166cd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016166c49061dfeb565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561675357600080fd5b505af1158015616767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061678b919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff166330769859876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016167df919061d7a5565b602060405180830381600087803b1580156167f957600080fd5b505af115801561680d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616831919081019061bf9b565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a6c11e530838888886040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016168b295949392919061d8b8565b602060405180830381600087803b1580156168cc57600080fd5b505af11580156168e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616904919081019061c9d5565b915050949350505050565b6000816040805190810160405280600681526020017f63616e63656c00000000000000000000000000000000000000000000000000008152506169678573ffffffffffffffffffffffffffffffffffffffff1661aa38565b6169a8836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6169f0836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515616a33576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616a2a919061de96565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de1ed235876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616aab919061d7a5565b602060405180830381600087803b158015616ac557600080fd5b505af1158015616ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616afd919081019061c9d5565b935050505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c00000000000000000000000000000000000000815250616b658973ffffffffffffffffffffffffffffffffffffffff1661aa38565b616ba6836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b616bee836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515616c31576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616c28919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c04b99a8b8b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616cab92919061dae2565b600060405180830381600087803b158015616cc557600080fd5b505af1158015616cd9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250616d02919081019061c6f5565b965096509650965050505093509350935093565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015616d9f57600080fd5b505af1158015616db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616dd7919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff16637138972d856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616e2b919061d7a5565b602060405180830381600087803b158015616e4557600080fd5b505af1158015616e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616e7d919081019061bf9b565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515616ef1576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616ee89061df0b565b60405180","910390fd5b616f566040805190810160405280600681526020017f4d454d42455200000000000000000000000000000000000000000000000000008152508585600480602002604051908101604052809291908260046020028082843782019150505050506181fb565b50600191505092915050565b6000816040805190810160405280600881526020017f7365745072696365000000000000000000000000000000000000000000000000815250616fba8673ffffffffffffffffffffffffffffffffffffffff1661aa38565b616ffb836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b617043836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515617086576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161707d919061de96565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156170eb57600080fd5b505af11580156170ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617123919081019061c9d5565b156171fa57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638689c8b088886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016171a192919061dae2565b602060405180830381600087803b1580156171bb57600080fd5b505af11580156171cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506171f3919081019061cecd565b93506172c8565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638689c8b088886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161727392919061dae2565b602060405180830381600087803b15801561728d57600080fd5b505af11580156172a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506172c5919081019061cecd565b93505b5050509392505050565b6000816040805190810160405280600a81526020017f667265657a654e6f74650000000000000000000000000000000000000000000081525061732a8673ffffffffffffffffffffffffffffffffffffffff1661aa38565b61736b836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6173b3836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b9015156173f6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016173ed919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663abf1390788886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161747092919061dae2565b602060405180830381600087803b15801561748a57600080fd5b505af115801561749e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506174c2919081019061c9d5565b93505050509392505050565b606080826040805190810160405280601181526020017f6765744e6f746550726f706572746965730000000000000000000000000000008152506175278773ffffffffffffffffffffffffffffffffffffffff1661aa38565b617568836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6175b0836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b9015156175f3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016175ea919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc95896289896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161766d92919061dae2565b600060405180830381600087803b15801561768757600080fd5b505af115801561769b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506176c4919081019061c852565b94509450505050935093915050565b6000816040805190810160405280600c81526020017f7570646174654e6f74654e6f000000000000000000000000000000000000000081525061772b8773ffffffffffffffffffffffffffffffffffffffff1661aa38565b61776c836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6177b4836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b9015156177f7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016177ee919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9c420758989896040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016178739392919061db5e565b602060405180830381600087803b15801561788d57600080fd5b505af11580156178a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506178c5919081019061c9d5565b9350505050949350505050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016179659392919061daa4565b602060405180830381600087803b15801561797f57600080fd5b505af1158015617993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506179b7919081019061c9d5565b6179ff836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b901515617a42576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617a39919061de96565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c241460689308a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617ac0949392919061d91a565b600060405180830381600087803b158015617ada57600080fd5b505af1158015617aee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250617b17919081019061c8ff565b9350505050949350505050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515617bb9576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617bb09061e0ab565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015617c3f57600080fd5b505af1158015617c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617c77919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff16637138972d846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617ccb919061d7a5565b602060405180830381600087803b158015617ce557600080fd5b505af1158015617cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617d1d919081019061bf9b565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515617d91576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617d889061df0b565b60405180910390fd5b617d9a8161b47b565b80915050919050565b6000816040805190810160405280601281526020017f6765744163636f756e744e6f746553697a650000000000000000000000000000815250617dfb8673ffffffffffffffffffffffffffffffffffffffff1661aa38565b617e3c836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b617e84836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515617ec7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401617ebe919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673","ffffffffffffffffffffffffffffffffffffffff1663ec0c712488886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617f4192919061d7c0565b602060405180830381600087803b158015617f5b57600080fd5b505af1158015617f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617f93919081019061cecd565b93505050509392505050565b6000617fa961b671565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161803a9392919061daa4565b602060405180830381600087803b15801561805457600080fd5b505af1158015618068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061808c919081019061c9d5565b6180d4836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b901515618117576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161810e919061de96565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a1f84b48c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161819795949392919061d9b9565b606060405180830381600087803b1580156181b157600080fd5b505af11580156181c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506181e9919081019061cab2565b94509450505050965096945050505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618292576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016182899061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156182e257805182526020820191506020810190506020830392506182bd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561838f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016183869061e04b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561841557600080fd5b505af1158015618429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061844d919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff166330769859856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016184a1919061d7a5565b602060405180830381600087803b1580156184bb57600080fd5b505af11580156184cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506184f3919081019061bf9b565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c11cdc6826009886040518082805190602001908083835b60208310151561856c5780518252602082019150602081019050602083039250618547565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016185fb9392919061d7e9565b602060405180830381600087803b15801561861557600080fd5b505af1158015618629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061864d919081019061c9d5565b9150509392505050565b606080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c74f495c846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016186d1919061de96565b600060405180830381600087803b1580156186eb57600080fd5b505af11580156186ff573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618728919081019061c940565b91509150915091565b6060856040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016187c49392919061daa4565b602060405180830381600087803b1580156187de57600080fd5b505af11580156187f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618816919081019061c9d5565b61885e836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b9015156188a1576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618898919061de96565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561890657600080fd5b505af115801561891a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061893e919081019061c9d5565b15618a1e57601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016189c0949392919061da21565b600060405180830381600087803b1580156189da57600080fd5b505af11580156189ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618a17919081019061c8be565b9350618af5565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618a9b949392919061da21565b600060405180830381600087803b158015618ab557600080fd5b505af1158015618ac9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618af2919081019061c8be565b93505b50505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618b96576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618b8d9061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b602083101515618be65780518252602082019150602081019050602083039250618bc1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618c93576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618c8a9061e04b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366cd861e600a866040518082805190602001908083835b602083101515618d095780518252602082019150602081019050602083039250618ce4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618d9b949392919061d820565b602060405180830381600087803b158015618db557600080fd5b505af1158015618dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618ded919081019061c9d5565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618e8b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618e829061dfeb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515618edb5780518252602082019150602081019050602083039250618eb6565b6001836020036101000a03801982511681","8451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515618f88576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618f7f9061e04b565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663127a21eb600a876040518082805190602001908083835b602083101515618ffe5780518252602082019150602081019050602083039250618fd9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161909295949392919061d8b8565b602060405180830381600087803b1580156190ac57600080fd5b505af11580156190c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506190e4919081019061c9d5565b9050949350505050565b6000816040805190810160405280600781526020017f73657452617465000000000000000000000000000000000000000000000000008152506191468673ffffffffffffffffffffffffffffffffffffffff1661aa38565b619187836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b6191cf836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515619212576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619209919061de96565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344b8f03d88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161928c92919061dae2565b602060405180830381600087803b1580156192a657600080fd5b505af11580156192ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506192de919081019061cecd565b93505050509392505050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806193955750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156193d6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016193cd9061df4b565b60405180910390fd5b6002601160146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051619442919061de7b565b60405180910390a26001905090565b6060816040805190810160405280600f81526020017f6765744163636f756e744e6f74657300000000000000000000000000000000008152506194a98873ffffffffffffffffffffffffffffffffffffffff1661aa38565b6194ea836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b619532836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515619575576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161956c919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c24146068a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016195f3949392919061d91a565b600060405180830381600087803b15801561960d57600080fd5b505af1158015619621573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061964a919081019061c8ff565b935050505095945050505050565b6060816040805190810160405280600a81526020017f676574486f6c64657273000000000000000000000000000000000000000000008152506196b08573ffffffffffffffffffffffffffffffffffffffff1661aa38565b6196f1836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b619739836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b90151561977c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619773919061de96565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156197e157600080fd5b505af11580156197f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619819919081019061c9d5565b156198f357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632083ac3b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619895919061d7a5565b600060405180830381600087803b1580156198af57600080fd5b505af11580156198c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506198ec919081019061c6b4565b93506199c4565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632083ac3b876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161996a919061d7a5565b600060405180830381600087803b15801561998457600080fd5b505af1158015619998573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506199c1919081019061c6b4565b93505b50505092915050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc921a8a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015619a5657600080fd5b505af1158015619a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619a8e919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff1663cab59f3b868686306040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619ae8949392919061deb8565b602060405180830381600087803b158015619b0257600080fd5b505af1158015619b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619b3a919081019061bf9b565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515619bae576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619ba59061dfab565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338213fc6826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619c25919061d7a5565b602060405180830381600087803b158015619c3f57600080fd5b505af1158015619c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619c77919081019061c9d5565b50809150509392505050565b6000606080836040805190810160405280600581526020017f6973737565000000000000000000000000000000000000000000000000000000815250619cde8a73ffffffffffffffffffffffffffffffffffffffff1661aa38565b619d1f836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b619d67836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b901515619daa576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619da1919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff695fd38c8c8c8c6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619e28949392919061d95f565b600060405180830381600087803b158015619e4257600080fd5b505af1158015619e56573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250619e7f919081019061cef6565b955095509550505050955095509592505050565b6000619efa6040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250848460048060200260405190810160405280929190826004602002808284","378201915050505050613de5565b506001905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b601160149054906101000a900460ff1681565b6000816040805190810160405280601081526020017f676574546f74616c4e6f746553697a6500000000000000000000000000000000815250619fca8573ffffffffffffffffffffffffffffffffffffffff1661aa38565b61a00b836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b61a053836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b90151561a096576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a08d919061de96565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632340585f876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a10e919061d7a5565b602060405180830381600087803b15801561a12857600080fd5b505af115801561a13c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a160919081019061cecd565b935050505092915050565b6000816040805190810160405280600b81526020017f6f70656e4163636f756e7400000000000000000000000000000000000000000081525061a1c38673ffffffffffffffffffffffffffffffffffffffff1661aa38565b61a204836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461ab17565b61a24c836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061a7d590919063ffffffff16565b90151561a28f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a286919061de96565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a2f457600080fd5b505af115801561a308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a32c919081019061c9d5565b1561a40357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663317fd6fb88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a3aa92919061d7c0565b602060405180830381600087803b15801561a3c457600080fd5b505af115801561a3d8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a3fc919081019061c9d5565b935061a4d1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306e608de88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a47c92919061d7c0565b602060405180830381600087803b15801561a49657600080fd5b505af115801561a4aa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a4ce919081019061c9d5565b93505b5050509392505050565b600061a5426040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848460048060200260405190810160405280929190826004602002808284378201915050505050613de5565b506001905092915050565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a5e09392919061daa4565b602060405180830381600087803b15801561a5fa57600080fd5b505af115801561a60e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a632919081019061c9d5565b61a67a836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061a7d590919063ffffffff16565b90151561a6bd576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a6b4919061de96565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663403dad7588886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a73792919061dae2565b602060405180830381600087803b15801561a75157600080fd5b505af115801561a765573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a789919081019061c9d5565b93505050509392505050565b6000821561a7b85761a7b182601461b34f90919063ffffffff16565b905061a7cf565b61a7cc82601261b34f90919063ffffffff16565b90505b92915050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561a81d5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561a8df57858181518110151561a84357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561a8a257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a82c565b600090505b845181101561a99757848181518110151561a8fb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561a95a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061a8e4565b83965050505050505092915050565b60608160010180548060200260200160405190810160405280929190818152602001828054801561aa2c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161a9e2575b50505050509050919050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561aa835781602001602082028038833980820191505090505b509250600090505b601481101561ab1057818160148110151561aaa257fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561aad357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061aa8b565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561abb2576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161aba99061dfeb565b60405180910390fd5b61abbb8861b4bf565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561ac4357600080fd5b505af115801561ac57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ac7b919081019061bf9b565b73ffffffffffffffffffffffffffffffffffffffff166330769859846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161accf919061d7a5565b602060405180830381600087803b15801561ace957600080fd5b505af115801561acfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ad21919081019061bf9b565b9150600360405190808252806020026020018201604052801561ad535781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561ad8e578051825260208201915060208101905060208303925061ad69565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561adf157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561ae3d57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561ae8957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffff","","","","4083018561d796565b61df02606083018461cf9e565b95945050505050565b6000602082019050818103600083015261df248161d344565b9050919050565b6000602082019050818103600083015261df448161d37b565b9050919050565b6000602082019050818103600083015261df648161d3b2565b9050919050565b6000602082019050818103600083015261df848161d40f565b9050919050565b6000602082019050818103600083015261dfa48161d446565b9050919050565b6000602082019050818103600083015261dfc48161d4a3565b9050919050565b6000602082019050818103600083015261dfe48161d4da565b9050919050565b6000602082019050818103600083015261e0048161d537565b9050919050565b6000602082019050818103600083015261e0248161d56e565b9050919050565b6000602082019050818103600083015261e0448161d5cb565b9050919050565b6000602082019050818103600083015261e0648161d628565b9050919050565b6000602082019050818103600083015261e0848161d65f565b9050919050565b6000602082019050818103600083015261e0a48161d696565b9050919050565b6000602082019050818103600083015261e0c48161d6f3565b9050919050565b6000602082019050818103600083015261e0e48161d750565b9050919050565b600060208201905061e100600083018461d787565b92915050565b600060608201905061e11b600083018661d787565b818103602083015261e12d818561d1d5565b9050818103604083015261e141818461d1d5565b9050949350505050565b600060208201905061e160600083018461d796565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561e18957600080fd5b8060405250919050565b600067ffffffffffffffff82111561e1aa57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e1d257600080fd5b602082029050919050565b600067ffffffffffffffff82111561e1f457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e21c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e24457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e26c57600080fd5b602082029050919050565b600067ffffffffffffffff82111561e28e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561e2b657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e2e257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e30e57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561e33a57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000602082019050919050565b600081519050919050565b600060049050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600061e5318261e478565b9050919050565b82818337600083830152505050565b60005b8381101561e56557808201518184015260208101905061e54a565b8381111561e574576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c745f5e6b80eb167a0af7f8afdccabc9e63fd749fdb4d53e7021841ae7bf0c726c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"tearNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"}],\"name\":\"listAssetVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"noteNos\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"res\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"checkHolderByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"openAccountByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTearNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"}],\"name\":\"createHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"priceVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"initRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addDetailToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"}],\"name\":\"getAllAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"initRolesOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"","nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"enableBatch\",\"outputs\":[{\"name\":\"isEffective\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"bytes[]\"},{\"name\":\"values\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"accountHoldNote\",\"outputs\":[{\"name\":\"isContain\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"oldNoteNo\",\"type\":\"uint256\"},{\"name\":\"newNoteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteNo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operations\",\"type\":\"string[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addOperationToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBook\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"keyList\",\"type\":\"bytes[]\"},{\"name\":\"valueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAssetPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revokeId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_accountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"rateVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grantId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"uint256Args\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"upgradeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"revokeExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"get","NoteDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"isEffectiveDate\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currencyName\",\"type\":\"string\"},{\"name\":\"currencySymbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_project\",\"type\":\"address\"},{\"name\":\"_accountManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogBaseAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_ADDBOOKBYCUSTODY = "addBookByCustody";

    public static final String FUNC_REGISTERMEMBER = "registerMember";

    public static final String FUNC_ADDASSET = "addAsset";

    public static final String FUNC_GETHOLDER = "getHolder";

    public static final String FUNC_TEARNOTE = "tearNote";

    public static final String FUNC__STATUS = "_status";

    public static final String FUNC_QUERYBOOKBYCUSTODY = "queryBookByCustody";

    public static final String FUNC_GETHOLDERS = "getHolders";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETACCOUNTNOTES = "getAccountNotes";

    public static final String FUNC_LISTASSETVERSION = "listAssetVersion";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_UNFREEZE = "unfreeze";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_WITHDRAWAL = "withdrawal";

    public static final String FUNC_CHECKHOLDERBYADDRESS = "checkHolderByAddress";

    public static final String FUNC_OPENACCOUNTBYCUSTODY = "openAccountByCustody";

    public static final String FUNC_GETTEARNOTES = "getTearNotes";

    public static final String FUNC_UNREGISTERADMIN = "unregisterAdmin";

    public static final String FUNC_GETNOTEPROPERTIES = "getNoteProperties";

    public static final String FUNC_ISMEMBER = "isMember";

    public static final String FUNC_ISACCOUNTADMIN = "isAccountAdmin";

    public static final String FUNC_CREATEHOLDER = "createHolder";

    public static final String FUNC_SETPRICE = "setPrice";

    public static final String FUNC_INITROLES = "initRoles";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_REMOVEDETAIL = "removeDetail";

    public static final String FUNC_ADDDETAILTORESGROUP = "addDetailToResGroup";

    public static final String FUNC_GETALLASSETS = "getAllAssets";

    public static final String FUNC_INITROLESOPERATION = "initRolesOperation";

    public static final String FUNC_ENABLEBATCH = "enableBatch";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_GETACCOUNTNOTESIZE = "getAccountNoteSize";

    public static final String FUNC_ISNORMAL = "isNormal";

    public static final String FUNC_UPDATENOTEPROPERTIES = "updateNoteProperties";

    public static final String FUNC_GRANT = "grant";

    public static final String FUNC_GETTOTALNOTESIZE = "getTotalNoteSize";

    public static final String FUNC_ACCOUNTHOLDNOTE = "accountHoldNote";

    public static final String FUNC_UPDATENOTENO = "updateNoteNo";

    public static final String FUNC_UNFREEZENOTE = "unfreezeNote";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_ADDOPERATIONTORESGROUP = "addOperationToResGroup";

    public static final String FUNC_QUERYBOOK = "queryBook";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_GETASSETPOOLS = "getAssetPools";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REVOKEID = "revokeId";

    public static final String FUNC_GETPROJECTTERM = "getProjectTerm";

    public static final String FUNC__ACCOUNTMANAGER = "_accountManager";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_CREATEROLE = "createRole";

    public static final String FUNC_SETRATE = "setRate";

    public static final String FUNC_GRANTID = "grantId";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_FREEZENOTE = "freezeNote";

    public static final String FUNC_UPGRADEASSET = "upgradeAsset";

    public static final String FUNC_GETACCOUNTADMIN = "getAccountAdmin";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_ISHOLDER = "isHolder";

    public static final String FUNC_REGISTERADMIN = "registerAdmin";

    public static final String FUNC_GETNOTEDETAIL = "getNoteDetail";

    public static final String FUNC_GETTOTALBALANCE = "getTotalBalance";

    public static final String FUNC_UPDATENOTEBATCH = "updateNoteBatch";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CREATECURRENCY = "createCurrency";

    public static final String FUNC_REMOVEOPERATION = "removeOperation";

    public static final String FUNC_UNREGISTERMEMBER = "unregisterMember";

    public static final String FUNC_GETACCOUNTASSETS = "getAccountAssets";

    public static final Event LOGBASEACCOUNT_EVENT = new Event("LogBaseAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Organization(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addBookByCustody(String asset, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getAddBookByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<BigInteger> getAddBookByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAsset(Boolean isFungible, String asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<Boolean, String> getAddAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getHolder() throws ContractException {
        final Function function = new Function(FUNC_GETHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt tearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void tearNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getTearNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getTearNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger _status() throws ContractException {
        final Function function = new Function(FUNC__STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List queryBookByCustody(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getHolders(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETHOLDERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAccountNotes(String asset, String account, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<BigInteger>, List<String>> listAssetVersion(String assetName) throws ContractException {
        final Function function = new Function(FUNC_LISTASSETVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Address>) results.get(1).getValue()));
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt unfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnfreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnfreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCancelAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getCancelAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getWithdrawalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getWithdrawalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt checkHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkHolderByAddress(String res, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getCheckHolderByAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getCheckHolderByAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt openAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void openAccountByCustody(String asset, String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOpenAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getOpenAccountByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getOpenAccountByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getTearNotes(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTEARNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt unregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getNoteProperties(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, List<byte[]>>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()));
    }

    public Boolean isMember(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isAccountAdmin(String caller) throws ContractException {
        final Function function = new Function(FUNC_ISACCOUNTADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(caller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getAccountNotes(String asset, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createHolder(String adminExternal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCreateHolderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getCreateHolderOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setPrice(String asset, BigInteger priceVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetPriceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetPriceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt initRoles(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initRoles(List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitRoles(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getInitRolesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITROLES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public Tuple1<Boolean> getInitRolesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INITROLES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getFreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRemoveDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getAddDetailToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getAddDetailToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAllAssets(Boolean isFungible) throws ContractException {
        final Function function = new Function(FUNC_GETALLASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt initRolesOperation(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLESOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initRolesOperation(List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITROLESOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitRolesOperation(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLESOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getInitRolesOperationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITROLESOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public Tuple1<Boolean> getInitRolesOperationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INITROLESOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getFreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getUnfreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt enableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableBatch(String asset, BigInteger batchNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getEnableBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getEnableBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isAdmin(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getAccountNoteSize(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt isNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void isNormal(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIsNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getIsNormalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>> getUpdateNotePropertiesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getUpdateNotePropertiesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<byte[]>, List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue())
                );
    }

    public TransactionReceipt grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getGrantInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getGrantOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getTotalNoteSize(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean accountHoldNote(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_ACCOUNTHOLDNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, List<byte[]>> getUpdateNoteNoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteNoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getUnfreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getUnfreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getRegisterAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<byte[]>> getAddOperationToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getAddOperationToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List queryBook(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>> getCreateAccountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple2<Boolean, String> getCreateAccountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAssetPools(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getGetAssetPoolsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public BigInteger getBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt revokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revokeId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRevokeIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getProjectTerm() throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTTERM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _accountManager() throws ContractException {
        final Function function = new Function(FUNC__ACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _owner() throws ContractException {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createRole(String roleName, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCreateRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getCreateRoleOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setRate(String asset, BigInteger rateVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetRateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetRateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt grantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grantId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getGrantIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getGrantIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getBalance(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getIssueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple3<BigInteger, List<BigInteger>, List<BigInteger>> getIssueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, List<BigInteger>, List<BigInteger>>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue())
                );
    }

    public TransactionReceipt freezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getFreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getUpgradeAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getUpgradeAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAccountAdmin(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAccountAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRevokeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isHolder(String account) throws ContractException {
        final Function function = new Function(FUNC_ISHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt registerAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger> getNoteDetail(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                (BigInteger) results.get(3).getValue());
    }

    public BigInteger getTotalBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt cancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getCancelOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>> getUpdateNoteBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getDepositInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getDepositOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt createCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createCurrency(String currencyName, String currencySymbol, BigInteger decimals, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getCreateCurrencyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<String> getCreateCurrencyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeOperation(String roleName, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRemoveOperationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveOperationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAccountAssets(Boolean isFungible, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List<LogBaseAccountEventResponse> getLogBaseAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBASEACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogBaseAccountEventResponse> responses = new ArrayList<LogBaseAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBaseAccountEventResponse typedResponse = new LogBaseAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventType = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogBaseAccountEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogBaseAccountEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetOwnerEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetOwnerEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Organization load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Organization(contractAddress, client, credential);
    }

    public static Organization deploy(Client client, CryptoKeyPair credential, String _project, String _accountManager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_project), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_accountManager)));
        return deploy(Organization.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogBaseAccountEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] eventType;

        public String contractAddress;
    }

    public static class LogSetOwnerEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String contractAddress;
    }
}
