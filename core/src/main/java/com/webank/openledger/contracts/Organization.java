package com.webank.openledger.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.webank.openledger.core.common.BaseCustody;
import com.webank.openledger.core.common.BaseHolder;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Organization extends Contract implements BaseCustody, BaseHolder {
    public static final String[] BINARY_ARRAY = {"","","","57600080fd5b505af1158015611f7c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611fa5919081019061cf5d565b9350612083565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314a923358a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612029949392919061e364565b600060405180830381600087803b15801561204357600080fd5b505af1158015612057573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612080919081019061cf5d565b93505b50505095945050505050565b6060816040805190810160405280600a81526020017f676574486f6c64657273000000000000000000000000000000000000000000008152506120e78573ffffffffffffffffffffffffffffffffffffffff1661af70565b612128836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b612170836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b9015156121b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121aa919061e7d9565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561221857600080fd5b505af115801561222c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612250919081019061d074565b1561232a57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cac9ba876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122cc919061e057565b600060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612323919081019061cd5d565b93506123fb565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338cac9ba876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123a1919061e057565b600060405180830381600087803b1580156123bb57600080fd5b505af11580156123cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123f8919081019061cd5d565b93505b50505092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248d9061e96e565b60405180910390fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fc66d1d23a5b7baf1f496bb19f580d7b12070ad5a08a758c990db97d961fa33a660405160405180910390a350565b6060816040805190810160405280600f81526020017f6765744163636f756e744e6f746573000000000000000000000000000000000081525061258c8873ffffffffffffffffffffffffffffffffffffffff1661af70565b6125cd836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b612615836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515612658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264f919061e7d9565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d818a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126d6949392919061e25d565b600060405180830381600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061272d919081019061cf9e565b935050505095945050505050565b606080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a71d6b8846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127b5919061e7d9565b600060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061280c919081019061cfdf565b91509150915091565b60006060866040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128aa9392919061e3e7565b602060405180830381600087803b1580156128c457600080fd5b505af11580156128d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128fc919081019061d074565b612944836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061b4d790919063ffffffff16565b901515612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297e919061e7d9565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc2d23368b8b8b8b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a05949392919061e2a2565b600060405180830381600087803b158015612a1f57600080fd5b505af1158015612a33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612a5c919081019061d18d565b945094505050509550959350505050565b6000816040805190810160405280600881526020017f756e667265657a65000000000000000000000000000000000000000000000000815250612ac58573ffffffffffffffffffffffffffffffffffffffff1661af70565b612b06836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b612b4e836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515612b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b88919061e7d9565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663789a0ed5876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c09919061e057565b602060405180830381600087803b158015612c2357600080fd5b505af1158015612c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c5b919081019061d074565b935050505092915050565b6000816040805190810160405280600681526020017f63616e63656c0000000000000000000000000000000000000000000000000000815250612cbe8573ffffffffffffffffffffffffffffffffffffffff1661af70565b612cff836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b612d47836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515612d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d81919061e7d9565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec17d025876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e02919061e057565b602060405180830381600087803b158015612e1c57600080fd5b505af1158015612e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e54919081019061d074565b935050505092915050565b6000612e6961be0c565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612efa9392919061e3e7565b602060405180830381600087803b158015612f1457600080fd5b505af1158015612f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f4c919081019061d074565b612f94836040805190810160405280601c8152602001","7f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061b4d790919063ffffffff16565b901515612fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fce919061e7d9565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bee379d58c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161305795949392919061e2fc565b606060405180830381600087803b15801561307157600080fd5b505af1158015613085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130a9919081019061d151565b94509450505050965096945050505050565b60006130c561be0c565b826040805190810160405280600a81526020017f7769746864726177616c0000000000000000000000000000000000000000000081525061311b8a73ffffffffffffffffffffffffffffffffffffffff1661af70565b61315c836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b6131a4836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b9015156131e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131de919061e7d9565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663182c5ddc8c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161326795949392919061e2fc565b606060405180830381600087803b15801561328157600080fd5b505af1158015613295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132b9919081019061d151565b94509450505050965096945050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156133165761330f83858361b7d4565b9150613342565b61333f838561333a8873ffffffffffffffffffffffffffffffffffffffff1661af70565b61b7d4565b91505b509392505050565b6000816040805190810160405280600b81526020017f6f70656e4163636f756e740000000000000000000000000000000000000000008152506133a28673ffffffffffffffffffffffffffffffffffffffff1661af70565b6133e3836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61342b836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b90151561346e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613465919061e7d9565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156134d357600080fd5b505af11580156134e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061350b919081019061d074565b156135e257600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371fe98bc88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161358992919061e072565b602060405180830381600087803b1580156135a357600080fd5b505af11580156135b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506135db919081019061d074565b93506136b0565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa15b38988886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161365b92919061e072565b602060405180830381600087803b15801561367557600080fd5b505af1158015613689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136ad919081019061d074565b93505b5050509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f74657300000000000000000000000000000000000000008152506137128573ffffffffffffffffffffffffffffffffffffffff1661af70565b613753836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61379b836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b9015156137de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137d5919061e7d9565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637d070b15876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613856919061e057565b600060405180830381600087803b15801561387057600080fd5b505af1158015613884573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506138ad919081019061cf9e565b935050505092915050565b60006138fa6040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250848461768e565b506001905092915050565b606080826040805190810160405280601181526020017f6765744e6f746550726f7065727469657300000000000000000000000000000081525061395e8773ffffffffffffffffffffffffffffffffffffffff1661af70565b61399f836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b6139e7836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515613a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a21919061e7d9565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395e2847889896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613aa492919061e425565b600060405180830381600087803b158015613abe57600080fd5b505af1158015613ad2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613afb919081019061cef1565b94509450505050935093915050565b6000613b4d846040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250858561b04f565b90509392505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060846040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c439392919061e3e7565b602060405180830381600087803b158015613c5d57600080fd5b505af1158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613c95919081019061d074565b613cdd836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061b4d790919063ffffffff16565b901515613d20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d17919061e7d9565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b163d8189308a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d9e949392919061e25d565b600060405180830381600087803b158015613db857600080fd5b505af1158015613dcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613df5919081019061cf9e565b9350505050949350505050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e8e9061e86e565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613f1d57600080fd5b505af1158015613f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613f55919081019061c680565b73ffffffffffffffffffffffff","ffffffffffffffff1663e5bbffa2846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613fa9919061e057565b602060405180830381600087803b158015613fc357600080fd5b505af1158015613fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613ffb919081019061c680565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561406f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140669061e84e565b60405180910390fd5b6140788161bb84565b80915050919050565b6000816040805190810160405280600881526020017f73657450726963650000000000000000000000000000000000000000000000008152506140d98673ffffffffffffffffffffffffffffffffffffffff1661af70565b61411a836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b614162836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b9015156141a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161419c919061e7d9565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16637e45d34c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561420a57600080fd5b505af115801561421e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614242919081019061d074565b1561431857600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016142bf92919061e425565b602060405180830381600087803b1580156142d957600080fd5b505af11580156142ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614311919081019061d5e7565b93506143e5565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662e4768b88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161439092919061e425565b602060405180830381600087803b1580156143aa57600080fd5b505af11580156143be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506143e2919081019061d5e7565b93505b5050509392505050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161447a9061e86e565b60405180910390fd5b6144c26040805190810160405280600581526020017f41444d494e00000000000000000000000000000000000000000000000000000081525083617bfb565b1515614503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016144fa9061e9ae565b60405180910390fd5b6145426040805190810160405280600681526020017f4d454d424552000000000000000000000000000000000000000000000000000081525083617bfb565b1515614583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161457a9061e9ae565b60405180910390fd5b6146a46040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250600c805480602002602001604051908101604052809291908181526020016000905b8282101561469a578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146865780601f1061465b57610100808354040283529160200191614686565b820191906000526020600020905b81548152906001019060200180831161466957829003601f168201915b5050505050815260200190600101906145de565b5050505084616910565b15156146e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146dc9061e9ce565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ebd0b5cf600a6040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152506040518082805190602001908083835b602083101515614790578051825260208201915060208101905060208303925061476b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614845949392919061e163565b602060405180830381600087803b15801561485f57600080fd5b505af1158015614873573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614897919081019061d074565b5060019050919050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061494c5750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561498d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149849061ea6e565b60405180910390fd5b614995615867565b15156149d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149cd9061ea2e565b60405180910390fd5b6001601160146101000a81548160ff021916908360ff1602179055507f667265657a6500000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e30604051614a42919061e7be565b60405180910390a26001905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614add9061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515614b365780518252602082019150602081019050602083039250614b11565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614bda9061e88e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6d729ea600a876040518082805190602001908083835b602083101515614c595780518252602082019150602081019050602083039250614c34565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ced95949392919061e1fb565b602060405180830381600087803b158015614d0757600080fd5b505af1158015614d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d3f919081019061d074565b9050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614dd59061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515614e2e5780518252602082019150602081019050602083039250614e09565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515614edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ed29061e88e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf09f8c9600a876040518082805190602001908083835b602083101515614f515780518252602082019150602081019050602083039250614f2c565b6001836020036101000a03801982511681","","","616f6f949392919061e364565b600060405180830381600087803b158015616f8957600080fd5b505af1158015616f9d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250616fc6919081019061cf5d565b93505b50505095945050505050565b6000806000806000856040805190810160405280600d81526020017f6372656174654163636f756e74000000000000000000000000000000000000008152506060617057836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61709f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b9015156170e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016170d9919061e7d9565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561716957600080fd5b505af115801561717d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506171a1919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa28d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016171f5919061e057565b602060405180830381600087803b15801561720f57600080fd5b505af1158015617223573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617247919081019061c680565b9350601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166358293035600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016172e492919061e072565b6040805180830381600087803b1580156172fd57600080fd5b505af1158015617311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617335919081019061d0d9565b8096508197505050600d8590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001859750975050505050505094509492505050565b6060600480548060200260200160405190810160405280929190818152602001828054801561743d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116173f3575b5050505050905090565b6000826040805190810160405280600a81526020017f67657442616c616e636500000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016174da9392919061e3e7565b602060405180830381600087803b1580156174f457600080fd5b505af1158015617508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061752c919081019061d074565b617574836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061b4d790919063ffffffff16565b9015156175b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016175ae919061e7d9565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d87306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161763192919061e072565b602060405180830381600087803b15801561764b57600080fd5b505af115801561765f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617683919081019061d5e7565b935050505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161771c9061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156177755780518252602082019150602081019050602083039250617750565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617822576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016178199061e88e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156178a857600080fd5b505af11580156178bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506178e0919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617934919061e057565b602060405180830381600087803b15801561794e57600080fd5b505af1158015617962573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617986919081019061c680565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fce41caf826009886040518082805190602001908083835b6020831015156179ff57805182526020820191506020810190506020830392506179da565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617a8e9392919061e0e0565b602060405180830381600087803b158015617aa857600080fd5b505af1158015617abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617ae0919081019061d074565b9150509392505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663124b65b46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015617b7257600080fd5b505af1158015617b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617baa919081019061c680565b905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515617c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617c8a9061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515617ce35780518252602082019150602081019050602083039250617cbe565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515617d8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617d869061ea0e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af17d38a866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401617e06919061e7d9565b602060405180830381600087803b158015617e2057600080fd5b505af1158015617e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617e58919081019061c680565b9150816009866040518082805190602001908083835b602083101515617e935780518252602082019150602081019050602083039250617e6e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f004a1636040518163ffffffff167c010000000000000000000000000000000000000000","","601f82011682018060405250618f7b919081019061d074565b93505050509392505050565b600080600080846040805190810160405280600c81526020017f757067726164654173736574000000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff166348955e8d8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161901f9392919061e5e5565b602060405180830381600087803b15801561903957600080fd5b505af115801561904d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619071919081019061d074565b6190b9836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061b4d790919063ffffffff16565b9015156190fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016190f3919061e7d9565b60405180910390fd5b5088151515619140576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016191379061e8ce565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303dc6ac88b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016191b7919061e7d9565b6040805180830381600087803b1580156191d057600080fd5b505af11580156191e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619208919081019061d0d9565b80955081965050508385965096505050505050935093915050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156192e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016192db9061e8ae565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561936a57600080fd5b505af115801561937e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506193a2919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016193f6919061e057565b602060405180830381600087803b15801561941057600080fd5b505af1158015619424573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619448919081019061c680565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637739de4430838888886040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016194c995949392919061e1fb565b602060405180830381600087803b1580156194e357600080fd5b505af11580156194f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061951b919081019061d074565b915050949350505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156195f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016195ec9061e9ee565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561967b57600080fd5b505af115801561968f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506196b3919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff1663e5bbffa2856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619707919061e057565b602060405180830381600087803b15801561972157600080fd5b505af1158015619735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619759919081019061c680565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156197cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016197c49061e84e565b60405180910390fd5b61980d6040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508585618382565b151561984e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016198459061e8ee565b60405180910390fd5b600191505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c000000000000000000000000000000000000008152506198b68973ffffffffffffffffffffffffffffffffffffffff1661af70565b6198f7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61993f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515619982576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619979919061e7d9565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36ea8e68b8b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016199fc92919061e425565b600060405180830381600087803b158015619a1657600080fd5b505af1158015619a2a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250619a53919081019061cd9e565b965096509650965050505093509350935093565b6000816040805190810160405280600f81526020017f676574546f74616c42616c616e63650000000000000000000000000000000000815250619abf8573ffffffffffffffffffffffffffffffffffffffff1661af70565b619b00836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b619b48836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b901515619b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619b82919061e7d9565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3d38193876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619c03919061e057565b602060405180830381600087803b158015619c1d57600080fd5b505af1158015619c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619c55919081019061d5e7565b935050505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619cee9061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009876040518082805190602001908083835b602083101515619d475780518252602082019150602081019050602083039250619d22565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619deb9061e88e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015619e9257600080fd5b505af1158015619ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619eca919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff1614151515619f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401619f1a9061ea4e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e60","40518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015619fa957600080fd5b505af1158015619fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619fe1919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a035919061e057565b602060405180830381600087803b15801561a04f57600080fd5b505af115801561a063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a087919081019061c680565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561a0fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a0f29061e90e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d3a10de826009896040518082805190602001908083835b60208310151561a172578051825260208201915060208101905060208303925061a14d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687876040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a203949392919061e09b565b602060405180830381600087803b15801561a21d57600080fd5b505af115801561a231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a255919081019061d074565b915050949350505050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061a30b5750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561a34c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a3439061ea6e565b60405180910390fd5b6002601160146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f7d78a1adf6a29dad801d43ddd0c4478ec0cbf1bd9bfdd2e007d90429959f363e3060405161a3b8919061e7be565b60405180910390a26001905090565b6000816040805190810160405280600f81526020017f7570646174654e6f74654261746368000000000000000000000000000000000081525061a41f8873ffffffffffffffffffffffffffffffffffffffff1661af70565b61a460836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61a4a8836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b90151561a4eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a4e2919061e7d9565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce4929a58a8a8a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a569949392919061e4d8565b602060405180830381600087803b15801561a58357600080fd5b505af115801561a597573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a5bb919081019061d074565b935050505095945050505050565b600061a5d361be0c565b826040805190810160405280600781526020017f6465706f7369740000000000000000000000000000000000000000000000000081525061a6298a73ffffffffffffffffffffffffffffffffffffffff1661af70565b61a66a836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b04f565b61a6b2836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061b4d790919063ffffffff16565b90151561a6f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a6ec919061e7d9565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bc015308c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a77595949392919061e2fc565b606060405180830381600087803b15801561a78f57600080fd5b505af115801561a7a3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a7c7919081019061d151565b94509450505050965096945050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a3298946040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a86257600080fd5b505af115801561a876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a89a919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff1663c47bad2d868686306040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a8f4949392919061e7fb565b602060405180830381600087803b15801561a90e57600080fd5b505af115801561a922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a946919081019061c680565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561a9ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161a9b19061e94e565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f84c391826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161aa31919061e057565b602060405180830381600087803b15801561aa4b57600080fd5b505af115801561aa5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aa83919081019061d074565b50809150509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561ab24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161ab1b9061e8ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b60208310151561ab74578051825260208201915060208101905060208303925061ab4f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561ac21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161ac189061e88e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c28dee7c600a866040518082805190602001908083835b60208310151561ac97578051825260208201915060208101905060208303925061ac72565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ad29949392919061e1af565b602060405180830381600087803b15801561ad4357600080fd5b505af115801561ad57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ad7b919081019061d074565b90509392505050565b600061adc66040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461768e565b506001905092915050565b606060006040805190810160405280601081526020017f6765744163636f756e7441737365747300000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663344f24a08484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ae659392919061e3e7565b602060405180830381600087803b15801561ae7f57600080fd5b505af115801561ae93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aeb7919081019061d074565b61aeff836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061b4d790919063ffffffff16565b90151561af42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161af39919061e7d9565b60405180910390fd5b50851561af5a5761af53601461bbc8565b935061af67565b61af64601261bbc8","565b93505b50505092915050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561afbb5781602001602082028038833980820191505090505b509250600090505b601481101561b04857818160148110151561afda57fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561b00b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061afc3565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561b0ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161b0e19061e8ae565b60405180910390fd5b61b0f38861bc5a565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561b17b57600080fd5b505af115801561b18f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b1b3919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b207919061e057565b602060405180830381600087803b15801561b22157600080fd5b505af115801561b235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b259919081019061c680565b9150600360405190808252806020026020018201604052801561b28b5781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561b2c6578051825260208201915060208101905060208303925061b2a1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561b32957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561b37557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561b3c157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330c3c98b8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b4789392919061e599565b602060405180830381600087803b15801561b49257600080fd5b505af115801561b4a6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b4ca919081019061d074565b9350505050949350505050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561b51f5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561b5e157858181518110151561b54557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561b5a457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061b52e565b600090505b845181101561b69957848181518110151561b5fd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561b65c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061b5e6565b83965050505050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff161415151561b705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161b6fc9061e98e565b60405180910390fd5b61b70f838361bd27565b1561b71d576001905061b7ce565b826001018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b92915050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561b86f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161b8669061e8ae565b60405180910390fd5b61b8788761bc5a565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d85849e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561b90057600080fd5b505af115801561b914573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b938919081019061c680565b73ffffffffffffffffffffffffffffffffffffffff16639018c6fe846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b98c919061e057565b602060405180830381600087803b15801561b9a657600080fd5b505af115801561b9ba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b9de919081019061c680565b9150600260405190808252806020026020018201604052801561ba105781602001602082028038833980820191505090505b5090503081600081518110151561ba2357fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110151561ba6f57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330c3c98b8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161bb269392919061e599565b602060405180830381600087803b15801561bb4057600080fd5b505af115801561bb54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061bb78919081019061d074565b93505050509392505050565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60608160010180548060200260200160405190810160405280929190818152602001828054801561bc4e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161bc04575b50505050509050919050565b60008060008060008086600060048110151561bc7257fe5b6020020151945086600160048110151561bc8857fe5b6020020151935061bc9c846000191661bd76565b925086600260048110151561bcad57fe5b6020020151915086600360048110151561bcc357fe5b602002015190506001858484846040516000815260200160405260405161bced949392919061e779565b60206040516020810390808403906000865af115801561bd11573d6000803e3d6000fd5b5050506020604051035195505050505050919050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b6000806000809150600090505b602081101561be02576001810160200360080260020a848260208110151561bda757fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160282019150808060010191505061bd83565b8192505050919050565b6040805190810160405280600290602082028038833980820191505090505090565b600061be3a823561eeae565b905092915050565b600061be4e825161eeae565b905092915050565b600082601f830112151561be6957600080fd5b813561be7c61be778261eb36565b61eb09565b9150818183526020840193506020810190508385602084028201111561bea157600080fd5b60005b8381101561bed1578161beb7888261be2e565b84526020840193506020830192505060018101905061bea4565b5050505092915050565b600082601f830112151561beee57600080fd5b815161bf0161befc8261eb36565b61eb09565b9150818183526020840193506020810190508385602084028201111561bf2657600080fd5b60005b8381101561bf56578161bf3c888261be42565b84526020840193506020830192505060018101905061bf29565b5050505092915050565b6000","","","","1690509190505600a265627a7a7230582094103e949bce0ee3d3c20557af8701beadb3a8183074e98754818e3b2fa8ee786c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","ffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fee919081019061d077565b156120c357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edfa0ed5876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161206a919061e05a565b602060405180830381600087803b15801561208457600080fd5b505af1158015612098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120bc919081019061d5ea565b935061218f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edfa0ed5876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161213a919061e05a565b602060405180830381600087803b15801561215457600080fd5b505af1158015612168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061218c919081019061d5ea565b93505b50505092915050565b6000816040805190810160405280600f81526020017f7570646174654e6f7465426174636800000000000000000000000000000000008152506121f08873ffffffffffffffffffffffffffffffffffffffff1661b1d6565b612231836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b612279836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b9015156122bc576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016122b3919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd4ea8d58a8a8a8a6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161233a949392919061e4db565b602060405180830381600087803b15801561235457600080fd5b505af1158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061238c919081019061d077565b935050505095945050505050565b60006123dd846040805190810160405280600581526020017f41444d494e000000000000000000000000000000000000000000000000000000815250858561b2b5565b90509392505050565b6000816040805190810160405280600c81526020017f756e667265657a654e6f7465000000000000000000000000000000000000000081525061243e8673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b61247f836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b6124c7836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561250a576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612501919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315e63e2088886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161258492919061e428565b602060405180830381600087803b15801561259e57600080fd5b505af11580156125b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125d6919081019061d692565b93505050509392505050565b60006125ec61be0f565b826040805190810160405280600a81526020017f7769746864726177616c000000000000000000000000000000000000000000008152506126428a73ffffffffffffffffffffffffffffffffffffffff1661b1d6565b612683836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b6126cb836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561270e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612705919061e7dc565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bde036f18c8c8c8c8c6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161278e95949392919061e2ff565b606060405180830381600087803b1580156127a857600080fd5b505af11580156127bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127e0919081019061d154565b94509450505050965096945050505050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156128af576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016128a69061e971565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561293557600080fd5b505af1158015612949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061296d919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129c1919061e05a565b602060405180830381600087803b1580156129db57600080fd5b505af11580156129ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a13919081019061c683565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395c1d93d30838888886040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a9495949392919061e1fe565b602060405180830381600087803b158015612aae57600080fd5b505af1158015612ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ae6919081019061d077565b915050949350505050565b6000826040805190810160405280600a81526020017f67657442616c616e636500000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b849392919061e3ea565b602060405180830381600087803b158015612b9e57600080fd5b505af1158015612bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bd6919081019061d077565b612c1e836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061af7390919063ffffffff16565b901515612c61576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612c58919061e7dc565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325c4079687306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612cdb92919061e075565b602060405180830381600087803b158015612cf557600080fd5b505af1158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d2d919081019061d5ea565b935050505092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805480602002602001604051908101604052809291908181526020018280548015612de657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d9c575b5050505050905090565b600080601160149054906101000a900460ff1660ff1614905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612ec7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612ebe9061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515612f175780518252602082019150602081019050602083039250612ef2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffff","ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612fc4576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612fbb9061e9f1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1ef34c0600a876040518082805190602001908083835b60208310151561303a5780518252602082019150602081019050602083039250613015565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016130ce95949392919061e1fe565b602060405180830381600087803b1580156130e857600080fd5b505af11580156130fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613120919081019061d077565b9050949350505050565b600080600080846040805190810160405280600d81526020017f726567697374657241737365740000000000000000000000000000000000000081525060603073ffffffffffffffffffffffffffffffffffffffff1663118ca9718484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131c29392919061e5e8565b602060405180830381600087803b1580156131dc57600080fd5b505af11580156131f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613214919081019061d077565b61325c836040805190810160405280601681526020017f42617365437573746f64793a466f7262626964656e200000000000000000000081525061af7390919063ffffffff16565b90151561329f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613296919061e7dc565b60405180910390fd5b50881561339757600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161331d919061e7dc565b6040805180830381600087803b15801561333657600080fd5b505af115801561334a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061336e919081019061d0dc565b809650819550505083156133925761339085600261baed90919063ffffffff16565b505b613484565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba96c7618b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161340e919061e7dc565b6040805180830381600087803b15801561342757600080fd5b505af115801561343b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061345f919081019061d0dc565b809650819550505083156134835761348185600061baed90919063ffffffff16565b505b5b8484965096505050505050935093915050565b6000816040805190810160405280600b81526020017f656e61626c6542617463680000000000000000000000000000000000000000008152506134ef8673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b613530836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b613578836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b9015156135bb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016135b2919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a50ab50988886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161363592919061e428565b602060405180830381600087803b15801561364f57600080fd5b505af1158015613663573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613687919081019061d077565b93505050509392505050565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156137ac576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016137a39061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b6020831015156137fc57805182526020820191506020810190506020830392506137d7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156138a9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138a09061e9f1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361c1af59600a866040518082805190602001908083835b60208310151561391f57805182526020820191506020810190506020830392506138fa565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139b1949392919061e1b2565b602060405180830381600087803b1580156139cb57600080fd5b505af11580156139df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613a03919081019061d077565b90509392505050565b6060816040805190810160405280600c81526020017f676574546561724e6f7465730000000000000000000000000000000000000000815250613a648573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b613aa5836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b613aed836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515613b30576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613b27919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcbfde4b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ba8919061e05a565b600060405180830381600087803b158015613bc257600080fd5b505af1158015613bd6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250613bff919081019061cfa1565b935050505092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bf727356040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613c9257600080fd5b505af1158015613ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613cca919081019061c683565b905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613d66576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613d5d9061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b602083101515613db65780518252602082019150602081019050602083039250613d91565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515613e63576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613e5a9061e9f1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613ee957600080fd5b505af1158015613efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613f21919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859856040518263ffffffff167c0100000000000000000000000000000000000000000000000000","000000028152600401613f75919061e05a565b602060405180830381600087803b158015613f8f57600080fd5b505af1158015613fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fc7919081019061c683565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325a0a47e826009886040518082805190602001908083835b602083101515614040578051825260208201915060208101905060208303925061401b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140cf9392919061e0e3565b602060405180830381600087803b1580156140e957600080fd5b505af11580156140fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614121919081019061d077565b9150509392505050565b606080826040805190810160405280601481526020017f7570646174654e6f746550726f706572746965730000000000000000000000008152506141848973ffffffffffffffffffffffffffffffffffffffff1661b1d6565b6141c5836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61420d836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515614250576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614247919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f79096c8b8b8b8b6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016142ce949392919061e451565b600060405180830381600087803b1580156142e857600080fd5b505af11580156142fc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614325919081019061cef4565b945094505050509550959350505050565b6000816040805190810160405280600a81526020017f67657442616c616e63650000000000000000000000000000000000000000000081525061438e8673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b6143cf836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b614417836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561445a576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614451919061e7dc565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325c4079688886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016144d492919061e075565b602060405180830381600087803b1580156144ee57600080fd5b505af1158015614502573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614526919081019061d5ea565b93505050509392505050565b6060811561454b57614544600261b144565b9050614558565b614555600061b144565b90505b919050565b6000816040805190810160405280600881526020017f756e667265657a650000000000000000000000000000000000000000000000008152506145b58573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b6145f6836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61463e836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515614681576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614678919061e7dc565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef0c4a1c876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016146f9919061e05a565b602060405180830381600087803b15801561471357600080fd5b505af1158015614727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061474b919081019061d077565b935050505092915050565b6000816040805190810160405280600f81526020017f676574546f74616c42616c616e636500000000000000000000000000000000008152506147ae8573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b6147ef836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b614837836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561487a576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614871919061e7dc565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6c3a9ad876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148f2919061e05a565b602060405180830381600087803b15801561490c57600080fd5b505af1158015614920573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614944919081019061d5ea565b935050505092915050565b6000816040805190810160405280601081526020017f676574546f74616c4e6f746553697a65000000000000000000000000000000008152506149a78673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b6149e8836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b614a30836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515614a73576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614a6a919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399a1ca3988886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614aed92919061e428565b602060405180830381600087803b158015614b0757600080fd5b505af1158015614b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614b3f919081019061d077565b93505050509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515614bc0576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614bb79061e991565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614c4657600080fd5b505af1158015614c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614c7e919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff16637138972d856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614cd2919061e05a565b602060405180830381600087803b158015614cec57600080fd5b505af1158015614d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d24919081019061c683565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515614d98576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614d8f9061e851565b60405180910390fd5b614dd86040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508585618842565b1515614e19576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614e109061e8f1565b60405180910390fd5b600191505092915050565b6000806000806000856040805190810160405280600d81526020017f6372656174654163636f756e74000000000000000000000000000000000000008152506060614ea6836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b614eee836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515614f31576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614f28919061e7dc565b60405180910390fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffff","","5050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615ffa949392919061e166565b602060405180830381600087803b15801561601457600080fd5b505af1158015616028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061604c919081019061d077565b5060019050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156160ee576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016160e59061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b60208310151561613e5780518252602082019150602081019050602083039250616119565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156161ea576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016161e19061ea11565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930f4f2d866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616261919061e7dc565b602060405180830381600087803b15801561627b57600080fd5b505af115801561628f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506162b3919081019061c683565b9150816009866040518082805190602001908083835b6020831015156162ee57805182526020820191506020810190506020830392506162c9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f30b339b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156163e557600080fd5b505af11580156163f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061641d919081019061c683565b905080600a866040518082805190602001908083835b6020831015156164585780518252602082019150602081019050602083039250616433565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b46c706783836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161654292919061e075565b602060405180830381600087803b15801561655c57600080fd5b505af1158015616570573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616594919081019061d077565b15156165d5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016165cc9061ea71565b60405180910390fd5b60019250505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515616678576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161666f9061e971565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156166fe57600080fd5b505af1158015616712573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616736919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161678a919061e05a565b602060405180830381600087803b1580156167a457600080fd5b505af11580156167b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506167dc919081019061c683565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a6c11e530838888886040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161685d95949392919061e1fe565b602060405180830381600087803b15801561687757600080fd5b505af115801561688b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506168af919081019061d077565b915050949350505050565b6000816040805190810160405280600681526020017f63616e63656c00000000000000000000000000000000000000000000000000008152506169128573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b616953836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61699b836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b9015156169de576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016169d5919061e7dc565b60405180910390fd5b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de1ed235876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616a56919061e05a565b602060405180830381600087803b158015616a7057600080fd5b505af1158015616a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616aa8919081019061d077565b935050505092915050565b60608060606000846040805190810160405280600d81526020017f6765744e6f746544657461696c00000000000000000000000000000000000000815250616b108973ffffffffffffffffffffffffffffffffffffffff1661b1d6565b616b51836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b616b99836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515616bdc576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616bd3919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c04b99a8b8b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616c5692919061e428565b600060405180830381600087803b158015616c7057600080fd5b505af1158015616c84573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250616cad919081019061cda1565b965096509650965050505093509350935093565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e99525d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015616d4a57600080fd5b505af1158015616d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616d82919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff16637138972d856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401616dd6919061e05a565b602060405180830381600087803b158015616df057600080fd5b505af1158015616e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250616e28919081019061c683565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515616e9c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401616e939061e851565b60405180910390fd5b616f9d6040805190810160405280600681526020017f4d454d42455200000000000000000000000000000000000000000000000000008152508560096040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152506040518082805190602001908083835b602083101515616f435780518252602082019150602081019050602083039250616f1e565b6001836020036101000a038019825116818451168082178552505050505050","","000000000000000000000000000000000000000000028152600401617f8892919061e075565b602060405180830381600087803b158015617fa257600080fd5b505af1158015617fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250617fda919081019061d5ea565b93505050509392505050565b6000617ff061be0f565b876040805190810160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250843073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016180819392919061e3ea565b602060405180830381600087803b15801561809b57600080fd5b505af11580156180af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506180d3919081019061d077565b61811b836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061af7390919063ffffffff16565b90151561815e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618155919061e7dc565b60405180910390fd5b50601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a1f84b48c8c8c8c8c6040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016181de95949392919061e2ff565b606060405180830381600087803b1580156181f857600080fd5b505af115801561820c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618230919081019061d154565b94509450505050965096945050505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156182d9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016182d09061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009876040518082805190602001908083835b6020831015156183295780518252602082019150602081019050602083039250618304565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156183d6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016183cd9061e9f1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561847457600080fd5b505af1158015618488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506184ac919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff1614151515618505576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016184fc9061e871565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561858b57600080fd5b505af115801561859f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506185c3919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618617919061e05a565b602060405180830381600087803b15801561863157600080fd5b505af1158015618645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618669919081019061c683565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156186dd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016186d49061e931565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634612e322826009896040518082805190602001908083835b602083101515618754578051825260208201915060208101905060208303925061872f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016187e5949392919061e09e565b602060405180830381600087803b1580156187ff57600080fd5b505af1158015618813573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618837919081019061d077565b915050949350505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156188d9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016188d09061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156189295780518252602082019150602081019050602083039250618904565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156189d6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016189cd9061e9f1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015618a7457600080fd5b505af1158015618a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618aac919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff1614151515618b05576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618afc9061e871565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015618b8b57600080fd5b505af1158015618b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618bc3919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618c17919061e05a565b602060405180830381600087803b158015618c3157600080fd5b505af1158015618c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618c69919081019061c683565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515618cdd576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401618cd49061e931565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c11cdc6826009886040518082805190602001908083835b602083101515618d545780518252602082019150602081019050602083039250618d2f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618de39392919061e0e3565b602060405180830381600087803b158015618dfd57600080fd5b505af1158015618e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618e35919081019061d077565b9150509392505050565b606080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c74f495c846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618eb9919061e7dc565b600060405180830381600087803b158015618ed357600080fd5b505af1158015618ee7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250618f10919081019061cfe2565b91509150915091565b6060856040805190810160405280600981526020017f7175657279426f6f6b0000000000000000000000000000000000000000000000815250833073ffffffffffffffffffffffffff","ffffffffffffff1663140930ef8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401618fac9392919061e3ea565b602060405180830381600087803b158015618fc657600080fd5b505af1158015618fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250618ffe919081019061d077565b619046836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061af7390919063ffffffff16565b901515619089576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619080919061e7dc565b60405180910390fd5b508873ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156190ee57600080fd5b505af1158015619102573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619126919081019061d077565b1561920657601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016191a8949392919061e367565b600060405180830381600087803b1580156191c257600080fd5b505af11580156191d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506191ff919081019061cf60565b93506192dd565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3b4c39d8a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619283949392919061e367565b600060405180830381600087803b15801561929d57600080fd5b505af11580156192b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506192da919081019061cf60565b93505b50505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561937e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016193759061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009856040518082805190602001908083835b6020831015156193ce57805182526020820191506020810190506020830392506193a9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561947b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016194729061e9f1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166366cd861e600a866040518082805190602001908083835b6020831015156194f157805182526020820191506020810190506020830392506194cc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163086866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619583949392919061e11a565b602060405180830381600087803b15801561959d57600080fd5b505af11580156195b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506195d5919081019061d077565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619673576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161966a9061e971565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009866040518082805190602001908083835b6020831015156196c3578051825260208201915060208101905060208303925061969e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515619770576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016197679061e9f1565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663127a21eb600a876040518082805190602001908083835b6020831015156197e657805182526020820191506020810190506020830392506197c1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16308787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161987a95949392919061e1fe565b602060405180830381600087803b15801561989457600080fd5b505af11580156198a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506198cc919081019061d077565b9050949350505050565b6000816040805190810160405280600781526020017f736574526174650000000000000000000000000000000000000000000000000081525061992e8673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b61996f836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b6199b7836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b9015156199fa576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016199f1919061e7dc565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344b8f03d88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619a7492919061e428565b602060405180830381600087803b158015619a8e57600080fd5b505af1158015619aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250619ac6919081019061d5ea565b93505050509392505050565b6000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480619b7d5750601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515619bbe576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619bb59061e8b1565b60405180910390fd5b6002601160146101000a81548160ff021916908360ff1602179055507f63616e63656c00000000000000000000000000000000000000000000000000007f598b76607bab91793e04db590052049ff4ca46cfc234328da5536f5169790af730604051619c2a919061e7c1565b60405180910390a26001905090565b6060816040805190810160405280600f81526020017f6765744163636f756e744e6f7465730000000000000000000000000000000000815250619c918873ffffffffffffffffffffffffffffffffffffffff1661b1d6565b619cd2836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b619d1a836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515619d5d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619d54919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c24146068a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401619ddb949392919061e260565b600060405180830381600087803b158015619df557600080fd5b505af1158015619e09573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250619e32919081019061cfa1565b935050505095945050505050565b6060816040805190810160405280600a81526020017f676574486f6c6465727300000000000000000000000000000000000000000000815250619e988573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b619ed9836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b619f21836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b901515619f64576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401619f5b919061e7dc565b60405180910390","fd5b508573ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015619fc957600080fd5b505af1158015619fdd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a001919081019061d077565b1561a0db57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632083ac3b876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a07d919061e05a565b600060405180830381600087803b15801561a09757600080fd5b505af115801561a0ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061a0d4919081019061cd60565b935061a1ac565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632083ac3b876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a152919061e05a565b600060405180830381600087803b15801561a16c57600080fd5b505af115801561a180573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061a1a9919081019061cd60565b93505b50505092915050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc921a8a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561a23e57600080fd5b505af115801561a252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a276919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff1663cab59f3b868686306040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a2d0949392919061e7fe565b602060405180830381600087803b15801561a2ea57600080fd5b505af115801561a2fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a322919081019061c683565b90508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561a396576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a38d9061e911565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338213fc6826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a40d919061e05a565b602060405180830381600087803b15801561a42757600080fd5b505af115801561a43b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a45f919081019061d077565b50809150509392505050565b6000606080836040805190810160405280600581526020017f697373756500000000000000000000000000000000000000000000000000000081525061a4c68a73ffffffffffffffffffffffffffffffffffffffff1661b1d6565b61a507836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61a54f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561a592576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a589919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff695fd38c8c8c8c6040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a610949392919061e2a5565b600060405180830381600087803b15801561a62a57600080fd5b505af115801561a63e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061a667919081019061d613565b955095509550505050955095509592505050565b600061a6bd6040805190810160405280600581526020017f41444d494e0000000000000000000000000000000000000000000000000000008152508484613ccf565b506001905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b601160149054906101000a900460ff1681565b6000816040805190810160405280601081526020017f676574546f74616c4e6f746553697a650000000000000000000000000000000081525061a78d8573ffffffffffffffffffffffffffffffffffffffff1661b1d6565b61a7ce836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61a816836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561a859576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161a850919061e7dc565b60405180910390fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632340585f876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161a8d1919061e05a565b602060405180830381600087803b15801561a8eb57600080fd5b505af115801561a8ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061a923919081019061d5ea565b935050505092915050565b6000816040805190810160405280600b81526020017f6f70656e4163636f756e7400000000000000000000000000000000000000000081525061a9868673ffffffffffffffffffffffffffffffffffffffff1661b1d6565b61a9c7836040805190810160405280600681526020017f4d454d4245520000000000000000000000000000000000000000000000000000815250848461b2b5565b61aa0f836040805190810160405280601781526020017f426173654f726741646d696e3a466f7262626964656e2000000000000000000081525061af7390919063ffffffff16565b90151561aa52576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161aa49919061e7dc565b60405180910390fd5b508673ffffffffffffffffffffffffffffffffffffffff16634c2e2dbf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561aab757600080fd5b505af115801561aacb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061aaef919081019061d077565b1561abc657600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663317fd6fb88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ab6d92919061e075565b602060405180830381600087803b15801561ab8757600080fd5b505af115801561ab9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061abbf919081019061d077565b935061ac94565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306e608de88886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ac3f92919061e075565b602060405180830381600087803b15801561ac5957600080fd5b505af115801561ac6d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061ac91919081019061d077565b93505b5050509392505050565b600061ace06040805190810160405280600681526020017f4d454d42455200000000000000000000000000000000000000000000000000008152508484613ccf565b506001905092915050565b6000836040805190810160405280600f81526020017f6163636f756e74486f6c644e6f74650000000000000000000000000000000000815250833073ffffffffffffffffffffffffffffffffffffffff1663140930ef8484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ad7e9392919061e3ea565b602060405180830381600087803b15801561ad9857600080fd5b505af115801561adac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061add0919081019061d077565b61ae18836040805190810160405280601c81526020017f426173654163636f756e74486f6c6465723a466f7262626964656e200000000081525061af7390919063ffffffff16565b90151561ae5b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161ae52919061e7dc565b60405180910390fd5b50601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663403dad7588886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161aed592919061e428565b602060405180830381600087803b15801561aeef57600080fd5b505af115801561af03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061af27919081019061d077565b93505050509392505050565b6000821561af565761af4f82601461baed90919063ffffffff16565b905061af6d565b61af6a82601261baed909190","63ffffffff16565b90505b92915050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561afbb5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561b07d57858181518110151561afe157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561b04057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061afca565b600090505b845181101561b13557848181518110151561b09957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561b0f857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061b082565b83965050505050505092915050565b60608160010180548060200260200160405190810160405280929190818152602001828054801561b1ca57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161b180575b50505050509050919050565b6060600080836c0100000000000000000000000002915060146040519080825280601f01601f19166020018201604052801561b2215781602001602082028038833980820191505090505b509250600090505b601481101561b2ae57818160148110151561b24057fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561b27157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061b229565b5050919050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561b350576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161b3479061e971565b60405180910390fd5b61b3598861bc5d565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561b3e157600080fd5b505af115801561b3f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b419919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b46d919061e05a565b602060405180830381600087803b15801561b48757600080fd5b505af115801561b49b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b4bf919081019061c683565b9150600360405190808252806020026020018201604052801561b4f15781602001602082028038833980820191505090505b5090506009876040518082805190602001908083835b60208310151561b52c578051825260208201915060208101905060208303925061b507565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110151561b58f57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503081600181518110151561b5db57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110151561b62757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6cf431a8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b6de9392919061e59c565b602060405180830381600087803b15801561b6f857600080fd5b505af115801561b70c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b730919081019061d077565b9350505050949350505050565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561b7d8576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161b7cf9061e971565b60405180910390fd5b61b7e18761bc5d565b9250600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663576961956040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561b86957600080fd5b505af115801561b87d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b8a1919081019061c683565b73ffffffffffffffffffffffffffffffffffffffff166330769859846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161b8f5919061e05a565b602060405180830381600087803b15801561b90f57600080fd5b505af115801561b923573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061b947919081019061c683565b9150600260405190808252806020026020018201604052801561b9795781602001602082028038833980820191505090505b5090503081600081518110151561b98c57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110151561b9d857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6cf431a8288886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161ba8f9392919061e59c565b602060405180830381600087803b15801561baa957600080fd5b505af115801561babd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061bae1919081019061d077565b93505050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff161415151561bb4a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161bb419061e8d1565b60405180910390fd5b61bb54838361bd2a565b1561bb62576001905061bc13565b826001018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b92915050565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008086600060048110151561bc7557fe5b6020020151945086600160048110151561bc8b57fe5b6020020151935061bc9f846000191661bd79565b925086600260048110151561bcb057fe5b6020020151915086600360048110151561bcc657fe5b602002015190506001858484846040516000815260200160405260405161bcf0949392919061e77c565b60206040516020810390808403906000865af115801561bd14573d6000803e3d6000fd5b5050506020604051035195505050505050919050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b6000806000809150600090505b602081101561be05576001810160200360080260020a848260208110151561bdaa57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160282019150808060010191505061bd86565b8192505050919050565b6040805190810160405280600290602082028038833980820191505090505090565b600061be3d823561eeb1565b905092915050565b600061be51825161eeb1565b905092915050565b600082601f830112151561be6c57600080fd5b813561be7f61be7a8261eb39565b61eb0c565b9150818183526020840193506020810190508385602084028201111561bea457600080fd5b60005b8381101561bed4578161beba888261be31565b84526020840193506020830192505060018101905061bea7565b5050505092915050565b600082601f830112151561bef157600080fd5b815161bf0461beff8261eb39565b61eb0c565b9150818183526020840193506020810190508385602084028201111561bf2957600080fd5b60005b8381101561bf59578161bf3f888261be45565b84526020840193506020830192505060018101905061bf2c565b505050509291505056","","","","1f83011690509190505600a265627a7a72305820958a54bf3d0bfc7f011da553ae6b25eece8eda45d5adab669b85aea38ccd64136c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"tearNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBookByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"}],\"name\":\"listAssetVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"noteNos\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"res\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"checkHolderByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"openAccountByCustody\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTearNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"}],\"name\":\"createHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"priceVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"initRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addDetailToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"}],\"name\":\"getAllAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":fa","lse,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"enableBatch\",\"outputs\":[{\"name\":\"isEffective\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sign\",\"type\":\"bytes32[4]\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isNormal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"bytes[]\"},{\"name\":\"values\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteProperties\",\"outputs\":[{\"name\":\"noteKeys\",\"type\":\"bytes[]\"},{\"name\":\"noteValues\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allowExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalNoteSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"accountHoldNote\",\"outputs\":[{\"name\":\"isContain\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"oldNoteNo\",\"type\":\"uint256\"},{\"name\":\"newNoteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteNo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unfreezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operations\",\"type\":\"string[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"addOperationToResGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"uintCondition\",\"type\":\"uint256[]\"},{\"name\":\"addressCondition\",\"type\":\"address[]\"},{\"name\":\"limit\",\"type\":\"int256[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"queryBook\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"keyList\",\"type\":\"bytes[]\"},{\"name\":\"valueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAssetPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revokeId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_accountManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"createRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"rateVal\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grantId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"uint256Args\",\"type\":\"uint256[]\"},{\"name\":\"stringValueList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"freezeNote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetName\",\"type\":\"string\"},{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"upgradeAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccountAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"revokeExternalAddr\",\"type\":\"address\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"detail\",\"type\":\"bytes\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"registerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"noteNo\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getNoteDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"func","tion\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"_external\",\"type\":\"address\"},{\"name\":\"callerRole\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"grantId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"batchNo\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"isEffectiveDate\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"updateNoteBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"transactionAddress\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"typeList\",\"type\":\"int256[]\"},{\"name\":\"detailList\",\"type\":\"bytes[]\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currencyName\",\"type\":\"string\"},{\"name\":\"currencySymbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleName\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"removeOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"memberExternal\",\"type\":\"address\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"unregisterMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"isFungible\",\"type\":\"bool\"},{\"name\":\"sign\",\"type\":\"bytes32[4]\"}],\"name\":\"getAccountAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_project\",\"type\":\"address\"},{\"name\":\"_accountManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventType\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogBaseAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_ADDBOOKBYCUSTODY = "addBookByCustody";

    public static final String FUNC_REGISTERMEMBER = "registerMember";

    public static final String FUNC_ADDASSET = "addAsset";

    public static final String FUNC_GETHOLDER = "getHolder";

    public static final String FUNC_TEARNOTE = "tearNote";

    public static final String FUNC__STATUS = "_status";

    public static final String FUNC_QUERYBOOKBYCUSTODY = "queryBookByCustody";

    public static final String FUNC_GETHOLDERS = "getHolders";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETACCOUNTNOTES = "getAccountNotes";

    public static final String FUNC_LISTASSETVERSION = "listAssetVersion";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_UNFREEZE = "unfreeze";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_WITHDRAWAL = "withdrawal";

    public static final String FUNC_CHECKHOLDERBYADDRESS = "checkHolderByAddress";

    public static final String FUNC_OPENACCOUNTBYCUSTODY = "openAccountByCustody";

    public static final String FUNC_GETTEARNOTES = "getTearNotes";

    public static final String FUNC_UNREGISTERADMIN = "unregisterAdmin";

    public static final String FUNC_GETNOTEPROPERTIES = "getNoteProperties";

    public static final String FUNC_ISMEMBER = "isMember";

    public static final String FUNC_ISACCOUNTADMIN = "isAccountAdmin";

    public static final String FUNC_CREATEHOLDER = "createHolder";

    public static final String FUNC_SETPRICE = "setPrice";

    public static final String FUNC_INITROLES = "initRoles";

    public static final String FUNC_FREEZE = "freeze";

    public static final String FUNC_REMOVEDETAIL = "removeDetail";

    public static final String FUNC_ADDDETAILTORESGROUP = "addDetailToResGroup";

    public static final String FUNC_GETALLASSETS = "getAllAssets";

    public static final String FUNC_ENABLEBATCH = "enableBatch";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_GETACCOUNTNOTESIZE = "getAccountNoteSize";

    public static final String FUNC_ISNORMAL = "isNormal";

    public static final String FUNC_UPDATENOTEPROPERTIES = "updateNoteProperties";

    public static final String FUNC_GRANT = "grant";

    public static final String FUNC_GETTOTALNOTESIZE = "getTotalNoteSize";

    public static final String FUNC_ACCOUNTHOLDNOTE = "accountHoldNote";

    public static final String FUNC_UPDATENOTENO = "updateNoteNo";

    public static final String FUNC_UNFREEZENOTE = "unfreezeNote";

    public static final String FUNC_REGISTERASSET = "registerAsset";

    public static final String FUNC_ADDOPERATIONTORESGROUP = "addOperationToResGroup";

    public static final String FUNC_QUERYBOOK = "queryBook";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_GETASSETPOOLS = "getAssetPools";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REVOKEID = "revokeId";

    public static final String FUNC_GETPROJECTTERM = "getProjectTerm";

    public static final String FUNC__ACCOUNTMANAGER = "_accountManager";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_CREATEROLE = "createRole";

    public static final String FUNC_SETRATE = "setRate";

    public static final String FUNC_GRANTID = "grantId";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_FREEZENOTE = "freezeNote";

    public static final String FUNC_UPGRADEASSET = "upgradeAsset";

    public static final String FUNC_GETACCOUNTADMIN = "getAccountAdmin";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_ISHOLDER = "isHolder";

    public static final String FUNC_REGISTERADMIN = "registerAdmin";

    public static final String FUNC_GETNOTEDETAIL = "getNoteDetail";

    public static final String FUNC_GETTOTALBALANCE = "getTotalBalance";

    public static final String FUNC_UPDATENOTEBATCH = "updateNoteBatch";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CREATECURRENCY = "createCurrency";

    public static final String FUNC_REMOVEOPERATION = "removeOperation";

    public static final String FUNC_UNREGISTERMEMBER = "unregisterMember";

    public static final String FUNC_GETACCOUNTASSETS = "getAccountAssets";

    public static final Event LOGBASEACCOUNT_EVENT = new Event("LogBaseAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Organization(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addBookByCustody(String asset, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddBookByCustody(String asset, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getAddBookByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<BigInteger> getAddBookByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDBOOKBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAsset(Boolean isFungible, String asset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAsset(Boolean isFungible, String asset) {
        final Function function = new Function(
                FUNC_ADDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(asset)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<Boolean, String> getAddAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getHolder() throws ContractException {
        final Function function = new Function(FUNC_GETHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt tearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void tearNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTearNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TEARNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getTearNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getTearNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TEARNOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger _status() throws ContractException {
        final Function function = new Function(FUNC__STATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List queryBookByCustody(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOKBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getHolders(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETHOLDERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAccountNotes(String asset, String account, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<BigInteger>, List<String>> listAssetVersion(String assetName) throws ContractException {
        final Function function = new Function(FUNC_LISTASSETVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<String>>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Address>) results.get(1).getValue()));
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, List<BigInteger> noteNos, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                noteNos.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(noteNos, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256uint256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt unfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnfreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnfreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCancelAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getCancelAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getTransferAddressAddressaddressUint256Int256int256BytesbytesBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void withdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdrawal(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getWithdrawalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getWithdrawalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_WITHDRAWAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt checkHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkHolderByAddress(String res, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckHolderByAddress(String res, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(res), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getCheckHolderByAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getCheckHolderByAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKHOLDERBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt openAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void openAccountByCustody(String asset, String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOpenAccountByCustody(String asset, String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getOpenAccountByCustodyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getOpenAccountByCustodyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_OPENACCOUNTBYCUSTODY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getTearNotes(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTEARNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt unregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getNoteProperties(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, List<byte[]>>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()));
    }

    public Boolean isMember(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isAccountAdmin(String caller) throws ContractException {
        final Function function = new Function(FUNC_ISACCOUNTADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(caller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getAccountNotes(String asset, BigInteger start, BigInteger end, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(end), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createHolder(String adminExternal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateHolder(String adminExternal) {
        final Function function = new Function(
                FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCreateHolderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getCreateHolderOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEHOLDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setPrice(String asset, BigInteger priceVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPrice(String asset, BigInteger priceVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(priceVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetPriceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetPriceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt initRoles(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initRoles(List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitRoles(List<byte[]> sign) {
        final Function function = new Function(
                FUNC_INITROLES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getInitRolesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITROLES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public Tuple1<Boolean> getInitRolesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INITROLES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze() {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getFreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeDetail(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveDetail(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRemoveDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDetailToResGroup(String roleName, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getAddDetailToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getAddDetailToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDDETAILTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAllAssets(Boolean isFungible) throws ContractException {
        final Function function = new Function(FUNC_GETALLASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt freeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeze(String account, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeze(String account, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getFreezeAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreeze(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreeze() {
        final Function function = new Function(
                FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getUnfreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt enableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableBatch(String asset, BigInteger batchNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableBatch(String asset, BigInteger batchNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getEnableBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getEnableBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENABLEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isAdmin(List<byte[]> sign, String operation, byte[] detail) throws ContractException {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getAccountNoteSize(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt isNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void isNormal(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIsNormal() {
        final Function function = new Function(
                FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getIsNormalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISNORMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteProperties(String asset, BigInteger noteNo, List<byte[]> keys, List<byte[]> values, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                keys.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keys, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(values, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>> getUpdateNotePropertiesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple2<List<byte[]>, List<byte[]>> getUpdateNotePropertiesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEPROPERTIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<byte[]>, List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue())
                );
    }

    public TransactionReceipt grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrant(String allowExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(allowExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getGrantInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getGrantOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getTotalNoteSize(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALNOTESIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean accountHoldNote(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_ACCOUNTHOLDNOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteNo(String asset, BigInteger oldNoteNo, BigInteger newNoteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(oldNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(newNoteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, List<byte[]>> getUpdateNoteNoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteNoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnfreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getUnfreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getUnfreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNFREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getRegisterAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getRegisterAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOperationToResGroup(String roleName, List<String> operations, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                operations.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(operations, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<byte[]>> getAddOperationToResGroupInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getAddOperationToResGroupOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDOPERATIONTORESGROUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List queryBook(String asset, List<BigInteger> uintCondition, List<String> addressCondition, List<BigInteger> limit, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_QUERYBOOK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                uintCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uintCondition, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                addressCondition.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(addressCondition, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                limit.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(limit, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateAccount(String _external, List<byte[]> keyList, List<byte[]> valueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                keyList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(keyList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                valueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(valueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>> getCreateAccountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, List<byte[]>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple2<Boolean, String> getCreateAccountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAssetPools(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAssetPools() {
        final Function function = new Function(
                FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getGetAssetPoolsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETASSETPOOLS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public BigInteger getBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt revokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revokeId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevokeId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRevokeIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getProjectTerm() throws ContractException {
        final Function function = new Function(FUNC_GETPROJECTTERM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _accountManager() throws ContractException {
        final Function function = new Function(FUNC__ACCOUNTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _owner() throws ContractException {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt createRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createRole(String roleName, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateRole(String roleName, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_CREATEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getCreateRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getCreateRoleOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setRate(String asset, BigInteger rateVal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRate(String asset, BigInteger rateVal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rateVal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getSetRateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<BigInteger> getSetRateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt grantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grantId(String roleName, String _external, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrantId(String roleName, String _external, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getGrantIdStringAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getGrantIdStringAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getBalance(String asset, String account, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void issue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssue(String asset, List<String> transactionAddress, List<BigInteger> uint256Args, List<byte[]> stringValueList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                uint256Args.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(uint256Args, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                stringValueList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(stringValueList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>> getIssueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, List<String>, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple3<BigInteger, List<BigInteger>, List<BigInteger>> getIssueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, List<BigInteger>, List<BigInteger>>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue())
                );
    }

    public TransactionReceipt freezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freezeNote(String asset, BigInteger noteNo, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreezeNote(String asset, BigInteger noteNo, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_FREEZENOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, List<byte[]>> getFreezeNoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getFreezeNoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FREEZENOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void upgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpgradeAsset(String assetName, Boolean isFungible, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(assetName), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, List<byte[]>> getUpgradeAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple2<String, Boolean> getUpgradeAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPGRADEASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt getAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAccountAdmin(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAccountAdmin() {
        final Function function = new Function(
                FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAccountAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETACCOUNTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void revoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevoke(String revokeExternalAddr, String operation, byte[] detail, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(revokeExternalAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(detail), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, byte[], List<byte[]>> getRevokeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, byte[], List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getRevokeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isHolder(String account) throws ContractException {
        final Function function = new Function(FUNC_ISHOLDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt registerAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerAdmin(String adminExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterAdmin(String adminExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getRegisterAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getRegisterAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger> getNoteDetail(String asset, BigInteger noteNo, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETNOTEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(noteNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<String>, List<BigInteger>, List<BigInteger>, BigInteger>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                (BigInteger) results.get(3).getValue());
    }

    public BigInteger getTotalBalance(String asset, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETTOTALBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt grantId(String roleName, String _external, String callerRole, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(callerRole), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void grantId(String roleName, String _external, String callerRole, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(callerRole), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGrantId(String roleName, String _external, String callerRole, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_GRANTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_external), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(callerRole), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, List<byte[]>> getGrantIdStringAddressAddressBytes32bytes324Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                convertToNative((List<Bytes32>) results.get(3).getValue())
                );
    }

    public Tuple1<Boolean> getGrantIdStringAddressAddressBytes32bytes324Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GRANTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt cancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cancel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCancel() {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getCancelOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateNoteBatch(String asset, BigInteger batchNo, BigInteger date, Boolean isEffectiveDate, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(batchNo), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(isEffectiveDate), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>> getUpdateNoteBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, BigInteger, Boolean, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                convertToNative((List<Bytes32>) results.get(4).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateNoteBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATENOTEBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeposit(String asset, List<String> transactionAddress, BigInteger amount, List<BigInteger> typeList, List<byte[]> detailList, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(asset), 
                transactionAddress.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(transactionAddress, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                typeList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(typeList, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                detailList.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(detailList, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>> getDepositInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, List<String>, BigInteger, List<BigInteger>, List<byte[]>, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Int256>) results.get(3).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(4).getValue()), 
                convertToNative((List<Bytes32>) results.get(5).getValue())
                );
    }

    public Tuple2<Boolean, List<BigInteger>> getDepositOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, List<BigInteger>>(

                (Boolean) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt createCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createCurrency(String currencyName, String currencySymbol, BigInteger decimals, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateCurrency(String currencyName, String currencySymbol, BigInteger decimals) {
        final Function function = new Function(
                FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencyName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(currencySymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getCreateCurrencyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<String> getCreateCurrencyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeOperation(String roleName, String operation, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOperation(String roleName, String operation, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(roleName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(operation), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, List<byte[]>> getRemoveOperationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Bytes32>) results.get(2).getValue())
                );
    }

    public Tuple1<Boolean> getRemoveOperationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEOPERATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt unregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterMember(String memberExternal, List<byte[]> sign, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterMember(String memberExternal, List<byte[]> sign) {
        final Function function = new Function(
                FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(memberExternal), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getUnregisterMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<StaticArray4<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUnregisterMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UNREGISTERMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List getAccountAssets(Boolean isFungible, List<byte[]> sign) throws ContractException {
        final Function function = new Function(FUNC_GETACCOUNTASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(isFungible), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray4<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(sign, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List<LogBaseAccountEventResponse> getLogBaseAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBASEACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogBaseAccountEventResponse> responses = new ArrayList<LogBaseAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBaseAccountEventResponse typedResponse = new LogBaseAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventType = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogBaseAccountEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogBaseAccountEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGBASEACCOUNT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetOwnerEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetOwnerEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETOWNER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Organization load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Organization(contractAddress, client, credential);
    }

    public static Organization deploy(Client client, CryptoKeyPair credential, String _project, String _accountManager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_project), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_accountManager)));
        return deploy(Organization.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogBaseAccountEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] eventType;

        public String contractAddress;
    }

    public static class LogSetOwnerEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String contractAddress;
    }
}
